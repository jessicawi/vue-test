{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\Event.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\Event.vue","mtime":1558596232132},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DataSource from \"../data/datasource\";\nimport Cookies from \"js-cookie\";\nimport Vue from 'vue';\nimport VCalendar from \"v-calendar\";\n\nVue.use(VCalendar, {\n    componentPrefix: 'v',  // Use <vc-calendar /> instead of <v-calendar />\n    // ...,                // ...other defaults\n});\nexport default {\n    name: \"Event\",\n    components: {\n        // VCalendar,\n    },\n    async mounted() {\n        await this.LoadEventDetails();\n        await this.BindParticipantList();\n        await this.getLevelSpecificSchool();\n\n        this.sessionID = Cookies.get('userIDSession');\n    },\n    data(){\n        return{\n            ddlParticipant:'',\n            selectedParticipantList:[],\n            rdEventType: '',\n            eventList:[],\n            levelList: [],\n            inputEventStartTime:'',\n            inputEventEndTime:'',\n            optFullDayEvent:false,\n            optParentSignUp:false,\n            inputEventRegCutOffDay:'0',\n            inputEventRegLimit:'0',\n            inputEventTitle:'',\n            inputEventLocation:'',\n            inputEventDesc:'',\n            selectedEventID:'',\n            ddlClassLevel: '',\n            //v-calendar\n            inputVCalendar:'',\n            mode:'single',\n            selectedDate:null,\n            sessionID: '',\n            lblNewEditCalendar: '',\n            MasterParticipantList:[],\n            CurrentParticipantList:[],\n            ParticipantNameListIntTemp:[],\n            ParticipantNameListInt:[],\n            tempParticipantList:[],\n            ParticipantNameListAction: {\n                label: 'Delete',\n                props: {\n                    align: 'center',\n                },\n                buttons: [{\n                    props: {\n                        type: 'primary',\n                        icon: 'el-icon-edit'\n                    },\n                    handler: row => {\n                        console.log(row, row.SelectedConID, row.SelectedConEmail, row.StAllItem);\n                        this.ParticipantNameListInt.splice(this.ParticipantNameListInt.indexOf(row), 1);\n                        this.selectedParticipantList.splice(this.selectedParticipantList.indexOf(row), 1);\n                        let objValue= {\n                            CONname: row.StAllItem,\n                            CONEmail: row.SelectedConEmail,\n                            CONid: row.SelectedConID,\n                        }\n                        this.CurrentParticipantList.push(objValue);\n\n                    },\n                    label: 'Delete'\n                }]\n            },\n            ParticipantNameList:[{\n                prop: \"StAllItem\",\n                label: \"Email Address\"\n            }],\n        }\n    },\n    methods:{\n        async BindEventFields(resultTable){\n            try {\n                this.ParticipantNameListIntTemp=[];\n                this.ParticipantNameListInt=[];\n                this.CurrentParticipantList=[];\n\n\n                resultTable.forEach(m => {\n                    this.inputEventTitle = m.EventTitle;\n                    this.rdEventType = m.EventType;\n                    this.inputEventStartTime = m.EventStartTime;\n                    this.inputEventEndTime = m.EventEndTime;\n                    this.inputEventRegLimit = m.EventRegLimit;\n                    this.inputEventRegCutOffDay = m.EventRegCutOffDay;\n                    this.inputEventLocation = m.EventLocation;\n\n                    const resp = DataSource.shared.getEventParticipantByEventID(m.EventID);\n                    resp.then((resp)=>{\n                        if(resp.code ==='2'){\n                            console.log('No record found');\n                            this.MasterParticipantList.forEach(m=>{\n                                this.CurrentParticipantList.push(m);\n                            });\n                        }\n                        else {\n                            this.ParticipantNameListIntTemp=resp.Table;\n                            this.ParticipantNameListIntTemp.forEach(n=> {\n                                let tempList ={\n                                        StAllItem: n.CONname,\n                                        SelectedConID:n.CONid,\n                                        SelectedConEmail:n.CONEmail,\n                                }\n                                    this.ParticipantNameListInt.push(tempList);\n\n                                    this.MasterParticipantList.forEach(p=>{\n                                        if(n.CONid===p.CONid)\n                                        {\n                                           // this.CurrentParticipantList.splice(this.CurrentParticipantList.indexOf(m), 1);\n                                        }\n                                        else\n                                        {\n                                            let tempCurrentList ={\n                                                CONname: p.CONname,\n                                                CONid:p.CONid,\n                                                CONEmail:p.CONEmail,\n                                            }\n                                            this.CurrentParticipantList.push(tempCurrentList);\n                                        }\n                                    });\n\n                            });\n\n                            this.selectedParticipantList = (resp.Table)? resp.Table:[];\n                        }\n                    });\n\n                    if (m.EventFullDay === 'Yes') {\n                        this.optFullDayEvent = true;\n                    };\n                    if (m.EventParentSignUp === 'Yes') {\n                        this.optParentSignUp = true;\n                    };\n                });\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async BindParticipantList(){\n            try {\n                const response = await DataSource.shared.getAllStaffListBySchool();\n                if (response) {\n                    if (response.code === '88') {\n                        window.location.replace('/');\n                    } else {\n                        this.MasterParticipantList = response.Table;\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async editEvent(eventID){\n            try{\n                //capture EventID\n                this.selectedEventID = eventID;\n                const response = await DataSource.shared.getEvent(eventID);\n                if(response==='88') {\n                    window.location.replace('/');\n                }else if(response==='99'){\n                    console.log('Cannot get event');\n                }else if(response==='2'){\n                    console.log('invalid ID');\n                    window.location.replace('/');\n                }\n                else{\n                    this.BindEventFields(response.Table);\n                    this.$refs['EventShowModal'].show();\n                    console.log(eventID);\n                }\n                this.eventNewEdit('Edit');\n\n            }catch(e){\n                alert(e);\n                console.log(e);\n            }\n\n        },\n        AddParticipantList(){\n            try{\n                if (this.ddlParticipant !== '') {\n                    let addNewRowList = {\n                        participantConID: this.ddlParticipant,\n                    };\n                    this.selectedParticipantList.push(addNewRowList);\n\n                    const filterParticipantList = this.CurrentParticipantList.filter(d => {\n                        return d.CONid === this.ddlParticipant;\n                    });\n                    let name=filterParticipantList[0].CONname;\n                    let conID=filterParticipantList[0].CONid;\n                    let conEmail=filterParticipantList[0].CONEmail;\n                    let addNameList={\n                        StAllItem: name,\n                        SelectedConID:conID,\n                        SelectedConEmail:conEmail,\n                    };\n                    this.ParticipantNameListInt.push(addNameList);\n                    console.log(this.ParticipantNameListInt);\n\n                    this.CurrentParticipantList.forEach(m => {\n                        if (m.CONid === this.ddlParticipant) {\n                            this.CurrentParticipantList.splice(this.CurrentParticipantList.indexOf(m), 1);\n                        }\n                    });\n\n                    this.ddlParticipant = '';\n                }\n                else {\n                    this.$notify.error({\n                        title: 'Error',\n                        message: 'Please select.'\n                    });\n                }\n            }\n            catch(e){\n                alert(e);\n                console.log(e);\n            }\n        },\n        async getLevelSpecificSchool() {\n            try {\n               console.log(Cookies.get('schoolSession')) ;\n                const response = await DataSource.shared.getLevelSpecificSchool(Cookies.get('schoolSession'));\n                if (response) {\n                    if (response.code === '88') {\n                        window.location.replace('/');\n                    } else {\n                        this.levelList = response.Table;\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        getEventTime(startValue,endValue){\n            try{\n                let startTime = new Date(startValue);\n                let endTime = new Date(endValue);\n                let timeDiff = Math.abs(endTime.getTime()-startTime.getTime());\n                let diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n                let starthour = new Date(startValue).getHours();\n                let startminute = new Date(startValue).getMinutes();\n                let endhour = new Date(endValue).getHours();\n                let endminute = new Date(endValue).getMinutes();\n                let Time;\n                if(diffDays>1)\n                {\n                    return \"All Day\";\n                }\n                else{\n                    Time = starthour + \":\"+startminute+ \"AM to \" +endhour+\":\"+endminute+\"PM\";\n                    return Time;\n                }\n            }catch(e){\n                alert(e);\n            }\n        },\n        convertToDate(startTime){\n            let day = new Date(startTime).getDate();\n            let month = new Date(startTime).getMonth() + 1;\n            let year = new Date(startTime).getFullYear();\n            let date;\n\n            let monthValue = new Array();\n            monthValue[0] = \"January\";\n            monthValue[1] = \"February\";\n            monthValue[2] = \"March\";\n            monthValue[3] = \"April\";\n            monthValue[4] = \"May\";\n            monthValue[5] = \"June\";\n            monthValue[6] = \"July\";\n            monthValue[7] = \"August\";\n            monthValue[8] = \"September\";\n            monthValue[9] = \"October\";\n            monthValue[10] = \"November\";\n            monthValue[11] = \"December\";\n\n            let m = monthValue[month-1];\n            date = day + \"th \" + m + \" \" + year;\n            return date;\n        },\n        async btnCreateEvent(){\n            try\n            {\n                if(this.optFullDayEvent===true){\n                    this.optFullDayEvent=\"Yes\";\n                }\n                else{\n                    this.optFullDayEvent=\"No\";\n                }\n                if(this.optParentSignUp===true){\n                    this.optParentSignUp = \"Yes\";\n                }\n                else{\n                    this.optParentSignUp = \"No\";\n                }\n                let participantList=[];\n                var Obj = {\n                    EventTitle:this.inputEventTitle,\n                    EventType:this.rdEventType,\n                    EventStartTime:this.inputEventStartTime,\n                    EventEndTime:this.inputEventEndTime,\n                    EventFullDay:this.optFullDayEvent,\n                    EventParentSignUp: this.optParentSignUp,\n                    EventRegCutOffDay:this.inputEventRegCutOffDay,\n                    EventRegLimit:this.inputEventRegLimit,\n                    EventLocation: this.inputEventLocation,\n                    // EventDesc:this:inputEventDesc\n                };\n\n                if(this.selectedParticipantList!==''|| this.selectedParticipantList !== null || this.selectedParticipantList !==undefined){\n                    this.selectedParticipantList.forEach(item => {\n                        let participantListDetail = {\n                            Type: 'EventParConID',\n                            value: item.participantConID,\n                        };\n                        participantList.push(participantListDetail);\n                    });\n                }\n\n                if(this.inputEventTitle=== '' || this.inputEventTitle === null || this.inputEventTitle === undefined){\n                    alert('Please insert event title.');\n                }\n                else if(this.inputEventStartTime === '' || this.inputEventStartTime === null || this.inputEventStartTime === undefined){\n                    alert('Please select date from.');\n                }\n                else if(this.inputEventEndTime === '' || this.inputEventEndTime === null || this.inputEventEndTime === undefined){\n                    alert('Please select date to');\n                }\n                else{\n\n                    const response = await DataSource.shared.saveEvent(JSON.stringify(Obj),JSON.stringify(participantList));\n\n                    if(response.code==='88'){\n                        console.log('88');\n                    }\n                    else if(response.code===\"99\"){\n                        console.log('99');\n                    }\n                    else if(response.code==='1'){\n                        alert('Event edit Successful');\n                        window.location.replace('/Event');\n                    }\n                }\n            }\n            catch(e){\n                alert(e);\n            }\n        },\n        async btnAddToCalendar(){\n\n        },\n        async LoadEventDetails() {\n            try{\n                const response = DataSource.shared.getEvent();\n                response.then((response)=>{\n\n                    if(response.Table.length < 1){\n                        alert('No record found');\n                        console.log('No record found');\n                    }\n                    else {\n                        this.eventList = (response.Table)? response.Table:[];\n                    }\n                });\n            }catch(e){\n                alert(e);\n                console.log(e);\n            }\n        },\n        eventNewEdit (value) {\n            if(value==='New'){\n                this.lblNewEditCalendar = value;\n                this.refreshBModalValue();\n            }\n            else{\n                this.lblNewEditCalendar = value;\n            }\n            this.$refs.EventShowModal.show();\n        },\n        refreshBModalValue(){\n            let getCurrentDateTime = new Date();\n            this.inputEventTitle = '';\n            this.rdEventType = 'Event';\n            this.inputEventStartTime = getCurrentDateTime;\n            this.inputEventEndTime = getCurrentDateTime;\n            this.inputEventRegLimit = '0';\n            this.inputEventRegCutOffDay = '0';\n            this.inputEventLocation = '';\n            this.optFullDayEvent = false;\n            this.optParentSignUp = false;\n            this.ParticipantNameListInt=[];\n            this.ddlParticipant='';\n\n            this.CurrentParticipantList=[];\n            this.MasterParticipantList.forEach(m => {\n                this.CurrentParticipantList.push(m);\n            });\n        },\n        async filterSelectedParticipant(filterValue, allOptions) {\n            return allOptions.filter(option => option.includes(filterValue));\n        },\n\n        async btnEditEvent(){\n            try\n            {\n                let participantList=[];\n                console.log(this.selectedEventID);\n                var Obj = {\n                    EventID:this.selectedEventID,\n                    EventTitle:this.inputEventTitle,\n                    EventType:this.rdEventType,\n                    EventStartTime:this.inputEventStartTime,\n                    EventEndTime:this.inputEventEndTime,\n                    EventFullDay:this.optFullDayEvent,\n                    EventParentSignUp: this.optParentSignUp,\n                    EventRegCutOffDay:this.inputEventRegCutOffDay,\n                    EventRegLimit:this.inputEventRegLimit,\n                    EventLocation: this.inputEventLocation,\n                    // EventDesc:this:inputEventDesc\n                };\n\n                if(this.selectedParticipantList!==''|| this.selectedParticipantList !== null || this.selectedParticipantList !==undefined){\n                    this.selectedParticipantList.forEach(item => {\n                        let participantListDetail = {\n                            Type: 'EventParConID',\n                            value: item.participantConID,\n                        };\n                        participantList.push(participantListDetail);\n                    });\n                }\n\n                if(this.inputEventTitle=== '' || this.inputEventTitle === null || this.inputEventTitle === undefined){\n                    alert('Please insert event title.');\n                }\n                else if(this.inputEventStartTime === '' || this.inputEventStartTime === null || this.inputEventStartTime === undefined){\n                    alert('Please select date from.');\n                }\n                else if(this.inputEventEndTime === '' || this.inputEventEndTime === null || this.inputEventEndTime === undefined){\n                    alert('Please select date to');\n                }\n                else{\n\n                    const response = await DataSource.shared.updateEvent(JSON.stringify(Obj),JSON.stringify(participantList));\n\n                    if(response.code==='88'){\n                        console.log('88');\n                    }\n                    else if(response.code===\"99\"){\n                        console.log('99');\n                    }\n                    else if(response.code==='1'){\n                        alert('Event update successful');\n                        window.location.replace('/Event');\n                    }\n                }\n            }\n            catch(e){\n                alert(e);\n            }\n        },\n        async btnAddClasses(){\n            console.log(this.ddlClassLevel);\n        },\n    },\n}\n",{"version":3,"sources":["Event.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8JA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Event.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n    <div id=\"event_Calendar\">\r\n        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n            <b-btn variant=\"primary\" class=\"btnCreateEvent\" v-on:click=\"eventNewEdit('New')\">\r\n                Create Event\r\n            </b-btn>\r\n        </div>\r\n\r\n        <b-modal id=\"create_event_modal\" size=\"xl\" title='Event' ref=\"EventShowModal\" ok-only\r\n                 ok-variant=\"secondary\">\r\n\r\n                <div class=\"row col-lg-12 col-md-12 col-sm-12 col-xs-12\" title=\"Event Type\">\r\n\r\n                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>{{ lblNewEditCalendar }} Event</label> <br>\r\n                    <label><h1>Calendar Title</h1></label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"inputEventTitle\">\r\n                    <b-form-group label=\"Event Type\" align=\"left\">\r\n                        <b-form-radio v-model=\"rdEventType\" name=\"some-radios\" value=\"Event\" checked>Event</b-form-radio>\r\n                        <b-form-radio v-model=\"rdEventType\" name=\"some-radios\" value=\"SchoolClosure\">School Closure</b-form-radio>\r\n                        <b-form-radio v-model=\"rdEventType\" name=\"some-radios\" value=\"PublicHoliday\">Public Holiday</b-form-radio>\r\n                    </b-form-group>\r\n                </div>\r\n\r\n                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                        <label><b>Participant Email</b></label>\r\n\r\n                            <div v-if=\"ParticipantNameListInt.length>0\">\r\n                                <data-tables :data=\"ParticipantNameListInt\" :action-col=\"ParticipantNameListAction\">\r\n                                    <el-table-column v-for=\"item in ParticipantNameList\"\r\n                                                     :prop=\"item.prop\"\r\n                                                     :label=\"item.label\"\r\n                                                     :key=\"item.prop\"\r\n                                                     sortable=\"custom\">\r\n                                    </el-table-column>\r\n                                </data-tables>\r\n                            </div>\r\n\r\n                    </div>\r\n\r\n                    <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                                <label>From\r\n                                <el-date-picker v-model=\"inputEventStartTime\" format=\"dd-MM-yyyy HH:mm:ss\"\r\n                                                value-format=\"dd-MM-yyyy HH:mm:ss\" type=\"datetime\"\r\n                                                class=\"form-control\"\r\n                                                placeholder=\"Pick a day\"></el-date-picker></label>\r\n\r\n                                <label> To\r\n                                <el-date-picker v-model=\"inputEventEndTime\" format=\"dd-MM-yyyy HH:mm:ss\"\r\n                                                value-format=\"dd-MM-yyyy HH:mm:ss\" type=\"datetime\"\r\n                                                class=\"form-control\"\r\n                                                placeholder=\"Pick a day\"></el-date-picker></label>\r\n                        <br>\r\n                    </div>\r\n\r\n                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                        <b-form-checkbox\r\n                            v-model=\"optFullDayEvent\" name=\"check-button\" switch>Full Day event?\r\n                            {{optFullDayEvent}}\r\n                        </b-form-checkbox>\r\n                        <b-form-checkbox\r\n                                v-model=\"optParentSignUp\" name=\"btnParentSignUp\" switch>Parent sign up?\r\n                            {{optParentSignUp}}\r\n                        </b-form-checkbox>\r\n                    </div>\r\n\r\n                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                        <label>Registration Limit</label>\r\n                        <b-form-input id=\"RegLimit\"\r\n                                      type=\"text\" class=\"form-control\" v-model=\"inputEventRegLimit\" value=\"0\" min=\"0\" max=\"99\"></b-form-input>\r\n                    </div>\r\n\r\n                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                        <label>Registration cutoff(days)</label>\r\n                        <b-form-input id=\"range-1\" v-model=\"inputEventRegCutOffDay\" type=\"range\" value=\"0\" min=\"0\" max=\"5\" step=\"1\"></b-form-input>\r\n                        <div class=\"mt-2\">Days: {{ inputEventRegCutOffDay }}</div>\r\n                    </div>\r\n\r\n                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                        <el-select v-model=\"ddlClassLevel\" placeholder=\"Select\" class=\"fullwidth\">\r\n                            <el-option\r\n                                    v-for=\"item in levelList\"\r\n                                    :key=\"item.PK_Course_ID\"\r\n                                    :label=\"item.CRS_Course_Name\"\r\n                                    :value=\"item.PK_Course_ID\">\r\n                            </el-option>\r\n                        </el-select>\r\n                        <button v-on:click=\"btnAddClasses()\">Add Classes</button>\r\n                    </div>\r\n\r\n                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                        <label>Location</label>\r\n                        <input type=\"text\" class=\"form-control\" v-model=\"inputEventLocation\">\r\n                    </div>\r\n\r\n                    <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                        <el-select v-model=\"ddlParticipant\" placeholder=\"Select One\" class=\"fullwidth\"\r\n                                   filterable :filter-method=\"filterSelectedParticipant\">\r\n                            <el-option v-for=\"item in CurrentParticipantList\"\r\n                                       :value=item.CONid\r\n                                       :label=\"item.CONname\"\r\n                                       :key=\"item.ID\">\r\n                            </el-option>\r\n                        </el-select>\r\n                        <button v-on:click=\"AddParticipantList()\">Add Participant</button>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            <div v-if=\"this.lblNewEditCalendar==='New'\">\r\n                <button v-on:click=\"btnCreateEvent()\">Create Event</button>\r\n            </div>\r\n\r\n            <div v-else>\r\n                <button v-on:click=\"btnEditEvent()\">Edit Event</button>\r\n            </div>\r\n\r\n        </b-modal>\r\n\r\n        <div class=\"container\">\r\n            <div>\r\n                <h1>Event Overview</h1>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-lg\">\r\n                    <h5>Event Details</h5>\r\n                    <div style=\"overflow-x:scroll; height:800px;background:whitesmoke;scrollbar-color:rebeccapurple green\">\r\n                        <ul class ='eventUI'>\r\n                            <li v-for=\"item in eventList\" v-bind:key=\"item.EventID\" ref=\"\">\r\n                                {{item.EventTitle}}<br>\r\n                                {{convertToDate(item.EventStartTime)}}<br>\r\n                                {{getEventTime(item.EventStartTime,item.EventEndTime)}}<br>\r\n                                {{item.EventLocation}}<br>\r\n                                <b>Created By:{{item.CONname}}</b><br>\r\n                                <b-btn v-if=\"item.EventCreatedBy === sessionID\" @click=\"editEvent(item.EventID)\">Edit</b-btn>\r\n                                <hr>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"col-sm\">\r\n                    <h5>Upcoming Event</h5>\r\n                </div>\r\n\r\n                <div class=\"col-sm\">\r\n                    <h5>Calender</h5>\r\n                    <div style=\"overflow-x:scroll; >\r\n                        /*<v-calendar ></v-calendar>*/\r\n                        /*<v-date-picker :mode='mode' v-model='selectedDate'/>*/\r\n                        <!--<button v-on:click=\"btnAddToCalendar()\">Add to calendar</button>-->\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import DataSource from \"../data/datasource\";\r\n    import Cookies from \"js-cookie\";\r\n    import Vue from 'vue';\r\n    import VCalendar from \"v-calendar\";\r\n\r\n    Vue.use(VCalendar, {\r\n        componentPrefix: 'v',  // Use <vc-calendar /> instead of <v-calendar />\r\n        // ...,                // ...other defaults\r\n    });\r\n    export default {\r\n        name: \"Event\",\r\n        components: {\r\n            // VCalendar,\r\n        },\r\n        async mounted() {\r\n            await this.LoadEventDetails();\r\n            await this.BindParticipantList();\r\n            await this.getLevelSpecificSchool();\r\n\r\n            this.sessionID = Cookies.get('userIDSession');\r\n        },\r\n        data(){\r\n            return{\r\n                ddlParticipant:'',\r\n                selectedParticipantList:[],\r\n                rdEventType: '',\r\n                eventList:[],\r\n                levelList: [],\r\n                inputEventStartTime:'',\r\n                inputEventEndTime:'',\r\n                optFullDayEvent:false,\r\n                optParentSignUp:false,\r\n                inputEventRegCutOffDay:'0',\r\n                inputEventRegLimit:'0',\r\n                inputEventTitle:'',\r\n                inputEventLocation:'',\r\n                inputEventDesc:'',\r\n                selectedEventID:'',\r\n                ddlClassLevel: '',\r\n                //v-calendar\r\n                inputVCalendar:'',\r\n                mode:'single',\r\n                selectedDate:null,\r\n                sessionID: '',\r\n                lblNewEditCalendar: '',\r\n                MasterParticipantList:[],\r\n                CurrentParticipantList:[],\r\n                ParticipantNameListIntTemp:[],\r\n                ParticipantNameListInt:[],\r\n                tempParticipantList:[],\r\n                ParticipantNameListAction: {\r\n                    label: 'Delete',\r\n                    props: {\r\n                        align: 'center',\r\n                    },\r\n                    buttons: [{\r\n                        props: {\r\n                            type: 'primary',\r\n                            icon: 'el-icon-edit'\r\n                        },\r\n                        handler: row => {\r\n                            console.log(row, row.SelectedConID, row.SelectedConEmail, row.StAllItem);\r\n                            this.ParticipantNameListInt.splice(this.ParticipantNameListInt.indexOf(row), 1);\r\n                            this.selectedParticipantList.splice(this.selectedParticipantList.indexOf(row), 1);\r\n                            let objValue= {\r\n                                CONname: row.StAllItem,\r\n                                CONEmail: row.SelectedConEmail,\r\n                                CONid: row.SelectedConID,\r\n                            }\r\n                            this.CurrentParticipantList.push(objValue);\r\n\r\n                        },\r\n                        label: 'Delete'\r\n                    }]\r\n                },\r\n                ParticipantNameList:[{\r\n                    prop: \"StAllItem\",\r\n                    label: \"Email Address\"\r\n                }],\r\n            }\r\n        },\r\n        methods:{\r\n            async BindEventFields(resultTable){\r\n                try {\r\n                    this.ParticipantNameListIntTemp=[];\r\n                    this.ParticipantNameListInt=[];\r\n                    this.CurrentParticipantList=[];\r\n\r\n\r\n                    resultTable.forEach(m => {\r\n                        this.inputEventTitle = m.EventTitle;\r\n                        this.rdEventType = m.EventType;\r\n                        this.inputEventStartTime = m.EventStartTime;\r\n                        this.inputEventEndTime = m.EventEndTime;\r\n                        this.inputEventRegLimit = m.EventRegLimit;\r\n                        this.inputEventRegCutOffDay = m.EventRegCutOffDay;\r\n                        this.inputEventLocation = m.EventLocation;\r\n\r\n                        const resp = DataSource.shared.getEventParticipantByEventID(m.EventID);\r\n                        resp.then((resp)=>{\r\n                            if(resp.code ==='2'){\r\n                                console.log('No record found');\r\n                                this.MasterParticipantList.forEach(m=>{\r\n                                    this.CurrentParticipantList.push(m);\r\n                                });\r\n                            }\r\n                            else {\r\n                                this.ParticipantNameListIntTemp=resp.Table;\r\n                                this.ParticipantNameListIntTemp.forEach(n=> {\r\n                                    let tempList ={\r\n                                            StAllItem: n.CONname,\r\n                                            SelectedConID:n.CONid,\r\n                                            SelectedConEmail:n.CONEmail,\r\n                                    }\r\n                                        this.ParticipantNameListInt.push(tempList);\r\n\r\n                                        this.MasterParticipantList.forEach(p=>{\r\n                                            if(n.CONid===p.CONid)\r\n                                            {\r\n                                               // this.CurrentParticipantList.splice(this.CurrentParticipantList.indexOf(m), 1);\r\n                                            }\r\n                                            else\r\n                                            {\r\n                                                let tempCurrentList ={\r\n                                                    CONname: p.CONname,\r\n                                                    CONid:p.CONid,\r\n                                                    CONEmail:p.CONEmail,\r\n                                                }\r\n                                                this.CurrentParticipantList.push(tempCurrentList);\r\n                                            }\r\n                                        });\r\n\r\n                                });\r\n\r\n                                this.selectedParticipantList = (resp.Table)? resp.Table:[];\r\n                            }\r\n                        });\r\n\r\n                        if (m.EventFullDay === 'Yes') {\r\n                            this.optFullDayEvent = true;\r\n                        };\r\n                        if (m.EventParentSignUp === 'Yes') {\r\n                            this.optParentSignUp = true;\r\n                        };\r\n                    });\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async BindParticipantList(){\r\n                try {\r\n                    const response = await DataSource.shared.getAllStaffListBySchool();\r\n                    if (response) {\r\n                        if (response.code === '88') {\r\n                            window.location.replace('/');\r\n                        } else {\r\n                            this.MasterParticipantList = response.Table;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async editEvent(eventID){\r\n                try{\r\n                    //capture EventID\r\n                    this.selectedEventID = eventID;\r\n                    const response = await DataSource.shared.getEvent(eventID);\r\n                    if(response==='88') {\r\n                        window.location.replace('/');\r\n                    }else if(response==='99'){\r\n                        console.log('Cannot get event');\r\n                    }else if(response==='2'){\r\n                        console.log('invalid ID');\r\n                        window.location.replace('/');\r\n                    }\r\n                    else{\r\n                        this.BindEventFields(response.Table);\r\n                        this.$refs['EventShowModal'].show();\r\n                        console.log(eventID);\r\n                    }\r\n                    this.eventNewEdit('Edit');\r\n\r\n                }catch(e){\r\n                    alert(e);\r\n                    console.log(e);\r\n                }\r\n\r\n            },\r\n            AddParticipantList(){\r\n                try{\r\n                    if (this.ddlParticipant !== '') {\r\n                        let addNewRowList = {\r\n                            participantConID: this.ddlParticipant,\r\n                        };\r\n                        this.selectedParticipantList.push(addNewRowList);\r\n\r\n                        const filterParticipantList = this.CurrentParticipantList.filter(d => {\r\n                            return d.CONid === this.ddlParticipant;\r\n                        });\r\n                        let name=filterParticipantList[0].CONname;\r\n                        let conID=filterParticipantList[0].CONid;\r\n                        let conEmail=filterParticipantList[0].CONEmail;\r\n                        let addNameList={\r\n                            StAllItem: name,\r\n                            SelectedConID:conID,\r\n                            SelectedConEmail:conEmail,\r\n                        };\r\n                        this.ParticipantNameListInt.push(addNameList);\r\n                        console.log(this.ParticipantNameListInt);\r\n\r\n                        this.CurrentParticipantList.forEach(m => {\r\n                            if (m.CONid === this.ddlParticipant) {\r\n                                this.CurrentParticipantList.splice(this.CurrentParticipantList.indexOf(m), 1);\r\n                            }\r\n                        });\r\n\r\n                        this.ddlParticipant = '';\r\n                    }\r\n                    else {\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'Please select.'\r\n                        });\r\n                    }\r\n                }\r\n                catch(e){\r\n                    alert(e);\r\n                    console.log(e);\r\n                }\r\n            },\r\n            async getLevelSpecificSchool() {\r\n                try {\r\n                   console.log(Cookies.get('schoolSession')) ;\r\n                    const response = await DataSource.shared.getLevelSpecificSchool(Cookies.get('schoolSession'));\r\n                    if (response) {\r\n                        if (response.code === '88') {\r\n                            window.location.replace('/');\r\n                        } else {\r\n                            this.levelList = response.Table;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            getEventTime(startValue,endValue){\r\n                try{\r\n                    let startTime = new Date(startValue);\r\n                    let endTime = new Date(endValue);\r\n                    let timeDiff = Math.abs(endTime.getTime()-startTime.getTime());\r\n                    let diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\r\n                    let starthour = new Date(startValue).getHours();\r\n                    let startminute = new Date(startValue).getMinutes();\r\n                    let endhour = new Date(endValue).getHours();\r\n                    let endminute = new Date(endValue).getMinutes();\r\n                    let Time;\r\n                    if(diffDays>1)\r\n                    {\r\n                        return \"All Day\";\r\n                    }\r\n                    else{\r\n                        Time = starthour + \":\"+startminute+ \"AM to \" +endhour+\":\"+endminute+\"PM\";\r\n                        return Time;\r\n                    }\r\n                }catch(e){\r\n                    alert(e);\r\n                }\r\n            },\r\n            convertToDate(startTime){\r\n                let day = new Date(startTime).getDate();\r\n                let month = new Date(startTime).getMonth() + 1;\r\n                let year = new Date(startTime).getFullYear();\r\n                let date;\r\n\r\n                let monthValue = new Array();\r\n                monthValue[0] = \"January\";\r\n                monthValue[1] = \"February\";\r\n                monthValue[2] = \"March\";\r\n                monthValue[3] = \"April\";\r\n                monthValue[4] = \"May\";\r\n                monthValue[5] = \"June\";\r\n                monthValue[6] = \"July\";\r\n                monthValue[7] = \"August\";\r\n                monthValue[8] = \"September\";\r\n                monthValue[9] = \"October\";\r\n                monthValue[10] = \"November\";\r\n                monthValue[11] = \"December\";\r\n\r\n                let m = monthValue[month-1];\r\n                date = day + \"th \" + m + \" \" + year;\r\n                return date;\r\n            },\r\n            async btnCreateEvent(){\r\n                try\r\n                {\r\n                    if(this.optFullDayEvent===true){\r\n                        this.optFullDayEvent=\"Yes\";\r\n                    }\r\n                    else{\r\n                        this.optFullDayEvent=\"No\";\r\n                    }\r\n                    if(this.optParentSignUp===true){\r\n                        this.optParentSignUp = \"Yes\";\r\n                    }\r\n                    else{\r\n                        this.optParentSignUp = \"No\";\r\n                    }\r\n                    let participantList=[];\r\n                    var Obj = {\r\n                        EventTitle:this.inputEventTitle,\r\n                        EventType:this.rdEventType,\r\n                        EventStartTime:this.inputEventStartTime,\r\n                        EventEndTime:this.inputEventEndTime,\r\n                        EventFullDay:this.optFullDayEvent,\r\n                        EventParentSignUp: this.optParentSignUp,\r\n                        EventRegCutOffDay:this.inputEventRegCutOffDay,\r\n                        EventRegLimit:this.inputEventRegLimit,\r\n                        EventLocation: this.inputEventLocation,\r\n                        // EventDesc:this:inputEventDesc\r\n                    };\r\n\r\n                    if(this.selectedParticipantList!==''|| this.selectedParticipantList !== null || this.selectedParticipantList !==undefined){\r\n                        this.selectedParticipantList.forEach(item => {\r\n                            let participantListDetail = {\r\n                                Type: 'EventParConID',\r\n                                value: item.participantConID,\r\n                            };\r\n                            participantList.push(participantListDetail);\r\n                        });\r\n                    }\r\n\r\n                    if(this.inputEventTitle=== '' || this.inputEventTitle === null || this.inputEventTitle === undefined){\r\n                        alert('Please insert event title.');\r\n                    }\r\n                    else if(this.inputEventStartTime === '' || this.inputEventStartTime === null || this.inputEventStartTime === undefined){\r\n                        alert('Please select date from.');\r\n                    }\r\n                    else if(this.inputEventEndTime === '' || this.inputEventEndTime === null || this.inputEventEndTime === undefined){\r\n                        alert('Please select date to');\r\n                    }\r\n                    else{\r\n\r\n                        const response = await DataSource.shared.saveEvent(JSON.stringify(Obj),JSON.stringify(participantList));\r\n\r\n                        if(response.code==='88'){\r\n                            console.log('88');\r\n                        }\r\n                        else if(response.code===\"99\"){\r\n                            console.log('99');\r\n                        }\r\n                        else if(response.code==='1'){\r\n                            alert('Event edit Successful');\r\n                            window.location.replace('/Event');\r\n                        }\r\n                    }\r\n                }\r\n                catch(e){\r\n                    alert(e);\r\n                }\r\n            },\r\n            async btnAddToCalendar(){\r\n\r\n            },\r\n            async LoadEventDetails() {\r\n                try{\r\n                    const response = DataSource.shared.getEvent();\r\n                    response.then((response)=>{\r\n\r\n                        if(response.Table.length < 1){\r\n                            alert('No record found');\r\n                            console.log('No record found');\r\n                        }\r\n                        else {\r\n                            this.eventList = (response.Table)? response.Table:[];\r\n                        }\r\n                    });\r\n                }catch(e){\r\n                    alert(e);\r\n                    console.log(e);\r\n                }\r\n            },\r\n            eventNewEdit (value) {\r\n                if(value==='New'){\r\n                    this.lblNewEditCalendar = value;\r\n                    this.refreshBModalValue();\r\n                }\r\n                else{\r\n                    this.lblNewEditCalendar = value;\r\n                }\r\n                this.$refs.EventShowModal.show();\r\n            },\r\n            refreshBModalValue(){\r\n                let getCurrentDateTime = new Date();\r\n                this.inputEventTitle = '';\r\n                this.rdEventType = 'Event';\r\n                this.inputEventStartTime = getCurrentDateTime;\r\n                this.inputEventEndTime = getCurrentDateTime;\r\n                this.inputEventRegLimit = '0';\r\n                this.inputEventRegCutOffDay = '0';\r\n                this.inputEventLocation = '';\r\n                this.optFullDayEvent = false;\r\n                this.optParentSignUp = false;\r\n                this.ParticipantNameListInt=[];\r\n                this.ddlParticipant='';\r\n\r\n                this.CurrentParticipantList=[];\r\n                this.MasterParticipantList.forEach(m => {\r\n                    this.CurrentParticipantList.push(m);\r\n                });\r\n            },\r\n            async filterSelectedParticipant(filterValue, allOptions) {\r\n                return allOptions.filter(option => option.includes(filterValue));\r\n            },\r\n\r\n            async btnEditEvent(){\r\n                try\r\n                {\r\n                    let participantList=[];\r\n                    console.log(this.selectedEventID);\r\n                    var Obj = {\r\n                        EventID:this.selectedEventID,\r\n                        EventTitle:this.inputEventTitle,\r\n                        EventType:this.rdEventType,\r\n                        EventStartTime:this.inputEventStartTime,\r\n                        EventEndTime:this.inputEventEndTime,\r\n                        EventFullDay:this.optFullDayEvent,\r\n                        EventParentSignUp: this.optParentSignUp,\r\n                        EventRegCutOffDay:this.inputEventRegCutOffDay,\r\n                        EventRegLimit:this.inputEventRegLimit,\r\n                        EventLocation: this.inputEventLocation,\r\n                        // EventDesc:this:inputEventDesc\r\n                    };\r\n\r\n                    if(this.selectedParticipantList!==''|| this.selectedParticipantList !== null || this.selectedParticipantList !==undefined){\r\n                        this.selectedParticipantList.forEach(item => {\r\n                            let participantListDetail = {\r\n                                Type: 'EventParConID',\r\n                                value: item.participantConID,\r\n                            };\r\n                            participantList.push(participantListDetail);\r\n                        });\r\n                    }\r\n\r\n                    if(this.inputEventTitle=== '' || this.inputEventTitle === null || this.inputEventTitle === undefined){\r\n                        alert('Please insert event title.');\r\n                    }\r\n                    else if(this.inputEventStartTime === '' || this.inputEventStartTime === null || this.inputEventStartTime === undefined){\r\n                        alert('Please select date from.');\r\n                    }\r\n                    else if(this.inputEventEndTime === '' || this.inputEventEndTime === null || this.inputEventEndTime === undefined){\r\n                        alert('Please select date to');\r\n                    }\r\n                    else{\r\n\r\n                        const response = await DataSource.shared.updateEvent(JSON.stringify(Obj),JSON.stringify(participantList));\r\n\r\n                        if(response.code==='88'){\r\n                            console.log('88');\r\n                        }\r\n                        else if(response.code===\"99\"){\r\n                            console.log('99');\r\n                        }\r\n                        else if(response.code==='1'){\r\n                            alert('Event update successful');\r\n                            window.location.replace('/Event');\r\n                        }\r\n                    }\r\n                }\r\n                catch(e){\r\n                    alert(e);\r\n                }\r\n            },\r\n            async btnAddClasses(){\r\n                console.log(this.ddlClassLevel);\r\n            },\r\n        },\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}