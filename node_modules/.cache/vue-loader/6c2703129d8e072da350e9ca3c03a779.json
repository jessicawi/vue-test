{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\Gallery.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\Gallery.vue","mtime":1552229263259},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\"use strict\";\nimport DataSource from \"../data/datasource\";\nimport $ from 'jquery';\nimport portfolio from \"../components/Post_Portfolio_Component\";\nimport updates from \"../components/Post_Updates_Component.vue\";\n\nexport default {\n    name: \"Gallery\",\n    data() {\n        return {\n            arrobj_Folders: [],\n            arrobj_Files: [],\n            arrobj_FolderPath: [{GalFolder: \"Home\", GalID: \"PRIMARY\", GalType: \"Folder\"}],\n            arrobj_SelectedItem: [],\n            arrobj_MoveModalFolders: [],\n            arrobj_MoveModalFolderPath: [],\n            arrstr_Whitelist: [],\n            int_StartRowNo: 1,\n            int_EndRowNo: 10,\n            obj_ContextTarget: {},\n            obj_SelectedComponent: \"\",\n            obj_ComponentProperties: {},\n            slide: 0,\n            sliding: null,\n            str_NewFolderName: \"\",\n            str_PostComponentTitle: \"\",\n            str_Result: \"\",\n            systemmsgError: false,\n            int_SelectLimit: 30,\n            selectall: false,\n        }\n    },\n    methods: {\n        loadWhitelist() {\n            DataSource.shared.getWhitelist().then((result) => {\n                this.arrstr_Whitelist = result.Table;\n            });\n        },\n        isWhitelist(file) {\n            let temparrstr = file.name.split(\".\");\n            let str_Ext = (\".\" + temparrstr[temparrstr.length - 1]).toUpperCase();\n            let isWhitelisted = this.arrstr_Whitelist.findIndex(x => x.type.toUpperCase() === str_Ext) !== -1;\n            let isValidFile = file.size > 0;\n\n            return (isWhitelisted && isValidFile);\n        },\n        initFolder(obj_Folder) {\n            this.arrobj_Files = [];\n            this.arrobj_Folders = [];\n            this.arrobj_SelectedItem = [];\n            this.int_StartRowNo = 1;\n            this.int_EndRowNo = 10;\n\n            this.getFolders(obj_Folder).then((result) => {\n                this.arrobj_Folders = result;\n            });\n            this.loadFiles(obj_Folder);\n        },\n        changeDirectory(obj_Folder) {\n            this.arrobj_FolderPath.push(obj_Folder);\n\n            this.initFolder(obj_Folder)\n        },\n        getFolders(obj_Folder) {\n            this.showLoading();\n            return new Promise((resolve, reject) => {\n                DataSource.shared.getFolders(obj_Folder.GalID).then((result) => {\n                    let temp = [];\n                    if (result.code != 2 && result.code != 99)\n                        temp = result.Table;\n\n                    resolve(temp);\n                });\n            });\n        },\n        loadFiles(obj_Folder) {\n            /*RECURSIVE FUNCTION ONLY ON FIRST ENTRY*/\n            this.getFiles(obj_Folder).then((result) => {\n                this.arrobj_Files.push.apply(this.arrobj_Files, result);\n\n                if (!this.isScrollable() && result != null)\n                    this.loadFiles(obj_Folder);\n            }).then(() => {\n                this.hideLoading();\n            });\n        },\n        getFiles(obj_Folder) {\n            this.showLoading();\n            return new Promise((resolve, reject) => {\n                DataSource.shared.getFiles(obj_Folder.GalID, this.int_StartRowNo, this.int_EndRowNo).then((result) => {\n                    let arr_Result\n\n                    if (result.code != 2 && result.code != 99) {\n                        arr_Result = result.Table;\n\n                        this.int_StartRowNo = this.int_EndRowNo + 1;\n                        this.int_EndRowNo = this.int_EndRowNo + 10;\n                    }\n\n                    resolve(arr_Result);\n                });\n            });\n        },\n        goBack() {\n            if (this.arrobj_FolderPath.length >= 1)\n                this.arrobj_FolderPath.pop();\n\n            let obj_PreviousFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1];\n\n            this.initFolder(obj_PreviousFolder);\n        },\n        isImage(obj_File) {\n            let ext = String(obj_File.GalFileExt).toUpperCase();\n            let isImage = false;\n\n            switch (ext) {\n                case \".PNG\":\n                case \".JPG\":\n                case \".BMP\":\n                case \".GIF\":\n                    isImage = true;\n                    break;\n                default:\n                    isImage = false;\n                    break;\n            }\n\n            return isImage;\n        },\n        getLowSource(file) {\n            if (this.isImage(file))\n                return \"data:\" + file.GalFileType + \";base64,\" + file.GalFileLow;\n            else\n                return \"\";\n        },\n        getMidSource(file) {\n            if (this.isImage(file))\n                return \"data:\" + file.GalFileType + \";base64,\" + file.GalFileMedium;\n            else\n                return \"\";\n        },\n        showPortfolioModal() {\n            this.obj_SelectedComponent = portfolio;\n            this.str_PostComponentTitle = \"Portfolio\";\n            this.showComponentModal();\n        },\n        showUpdateModal() {\n            this.obj_SelectedComponent = updates;\n            this.str_PostComponentTitle = \"Updates\";\n            this.showComponentModal();\n        },\n        displayResult(value) {\n            switch (value) {\n                case \"TRUE\":\n                    this.$notify({\n                        title: 'Success',\n                        message: 'Successfully posted!',\n                        type: 'success'\n                    });\n                    // this.str_Result = \"Successfully posted!\";\n                    break;\n                case \"FALSE\":\n                    this.$notify.error({\n                        title: 'Error',\n                        message: 'Whoops. Something went wrong. Please check your fields and try again.'\n                    });\n                    // this.str_Result = \"Whoops. Something went wrong. Please check your fields and try again.\";\n                    break;\n            }\n\n            this.hideComponentModal();\n        },\n        showComponentModal() {\n            this.obj_ComponentProperties = {images: this.arrobj_SelectedItem};\n            this.$refs.modal_PostComponent.show();\n        },\n        hideComponentModal() {\n            this.obj_SelectedComponent = false;\n            this.$refs.modal_PostComponent.hide();\n        },\n        isNull(obj) {\n            return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\n        },\n\n        /*#region Download Item Functions*/\n        downloadItem() {\n            let arr_Promises = [];\n            this.showLoading();\n\n            for (let obj_SelectedItem of this.arrobj_SelectedItem) {\n                let downloadPromise = new Promise((resolve, reject) => {\n                    DataSource.shared.downloadFile(obj_SelectedItem.GalID).then((result) => {\n                        let file = (result.Table)[0];\n                        let a = document.createElement(\"a\");\n                        let contentType = this.getContentType(file);\n                        let b64Data = file.GalFile;\n                        let blob = this.b64toBlob(b64Data, contentType);\n\n                        a.href = URL.createObjectURL(blob);\n                        a.download = (file.GalFileName + file.GalFileExt).toString();\n                        a.style.display = \"none\";\n                        document.body.appendChild(a);\n                        a.click();\n                        a.remove();\n                        resolve(result);\n                    });\n                });\n\n                arr_Promises.push(downloadPromise);\n            }\n\n            Promise.all(arr_Promises).then((result) => {\n                this.hideLoading();\n            });\n        }\n        ,\n        getContentType(e) {\n            let contentType = \"\";\n\n            switch (e.GalFileExt.toUpperCase()) {\n                case \".PDF\":\n                    contentType += \"application/octet-stream\";\n                    break;\n                default:\n                    contentType += e.GalFileType;\n                    break;\n            }\n\n            return contentType;\n        }\n        ,\n        b64toBlob(b64Data, contentType, sliceSize) {\n            //Credit to Jeremy Banks @ stackoverflow\n            contentType = contentType || '';\n            sliceSize = sliceSize || 512;\n\n            let byteCharacters = atob(b64Data);\n            let byteArrays = [];\n\n            for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n                let slice = byteCharacters.slice(offset, offset + sliceSize);\n\n                let byteNumbers = new Array(slice.length);\n                for (let i = 0; i < slice.length; i++) {\n                    byteNumbers[i] = slice.charCodeAt(i);\n                }\n\n                let byteArray = new Uint8Array(byteNumbers);\n\n                byteArrays.push(byteArray);\n            }\n\n            return new Blob(byteArrays, {type: contentType});\n        }\n        ,\n        /*#endregion*/\n\n        /*#region Create Folder Functions*/\n        showCreateModal() {\n            this.$refs.modal_NewFolder.show();\n        }\n        ,\n        hideCreateModal() {\n\n            this.$refs.modal_NewFolder.hide();\n        }\n        ,\n        createFolder() {\n            if (this.str_NewFolderName == null)\n                return;\n\n            let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1],\n                str_NewFolderName = this.str_NewFolderName;\n\n            this.showLoading();\n            DataSource.shared.createFolder(obj_CurrentFolder.GalID, str_NewFolderName).then((result) => {\n                this.initFolder(obj_CurrentFolder);\n                this.str_NewFolderName = \"\";\n                this.hideLoading();\n                this.hideCreateModal();\n            });\n        }\n        ,\n        /*#endregion*/\n\n        /*#region Rename Item Functions*/\n        showRenameModal() {\n            this.$refs.modal_RenameFolder.show();\n        }\n        ,\n        hideRenameModal() {\n            this.$refs.modal_RenameFolder.hide();\n        }\n        ,\n        renameFolder() {\n            if (this.str_NewFolderName == null)\n                return;\n\n            let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1],\n                obj_TargetFolder = this.obj_ContextTarget,\n                str_NewFolderName = this.str_NewFolderName;\n\n            DataSource.shared.renameFile(obj_TargetFolder.id, str_NewFolderName).then((result) => {\n                this.showLoading();\n            }).then(() => {\n                this.initFolder(obj_CurrentFolder);\n                this.str_NewFolderName = \"\";\n                this.obj_ContextTarget = {};\n                this.hideLoading();\n            });\n        }\n        ,\n        /*#endregion*/\n\n        /*#region Upload Item Functions*/\n        /*#region Drop Zone Functions*/\n        showDropZone() {\n            $(\"#div_DropZone\").css({\n                \"visibility\": \"visible\",\n                \"opacity\": \"1\"\n            });\n        }\n        ,\n        hideDropZone() {\n            $(\"#div_DropZone\").css({\n                \"visibility\": \"hidden\",\n                \"opacity\": 0\n            });\n        }\n        ,\n        /*#endregion*/\n\n        uploadFiles(filesUploaded) {\n            this.showLoading();\n            let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1];\n\n            let arrobj_AcceptedFiles = [];\n\n            for (let file of filesUploaded) {\n                if (this.isWhitelist(file))\n                    arrobj_AcceptedFiles.push(file);\n            }\n\n            DataSource.shared.saveFile(arrobj_AcceptedFiles, obj_CurrentFolder.GalID).then((result) => {\n                this.hideLoading();\n                this.initFolder(obj_CurrentFolder);\n            });\n        }\n        ,\n        /*#endregion*/\n\n        /*#region View Item Functions*/\n        showViewModal() {\n            this.$refs.modal_ViewItem.show();\n        }\n        ,\n        hideViewModal() {\n            this.$refs.modal_ViewItem.show();\n        }\n        ,\n        /*#endregion*/\n\n        /*#region Move Item Functions*/\n        showMoveModal() {\n            this.$refs.modal_MoveItem.show();\n            this.arrobj_MoveModalFolderPath = [];\n            this.arrobj_MoveModalFolderPath.push.apply(this.arrobj_MoveModalFolderPath, this.arrobj_FolderPath);\n\n            let obj_CurrentFolder = this.arrobj_MoveModalFolderPath[this.arrobj_MoveModalFolderPath.length - 1];\n\n            this.MoveModalInitFolder(obj_CurrentFolder);\n        }\n        ,\n        hideMoveModal() {\n            this.$refs.modal_MoveItem.hide();\n        }\n        ,\n        MoveModalGoBack() {\n            if (this.arrobj_MoveModalFolderPath.length >= 1)\n                this.arrobj_MoveModalFolderPath.pop();\n\n            let obj_PreviousFolder = this.arrobj_MoveModalFolderPath[this.arrobj_MoveModalFolderPath.length - 1];\n\n            this.MoveModalInitFolder(obj_PreviousFolder);\n        }\n        ,\n        MoveModalChangeDirectory(obj_Folder) {\n            this.arrobj_MoveModalFolderPath.push(obj_Folder);\n\n            this.MoveModalInitFolder(obj_Folder)\n        }\n        ,\n\n        MoveModalInitFolder(obj_Folder) {\n            this.arrobj_MoveModalFolders = [];\n\n            this.getFolders(obj_Folder).then((result) => {\n                this.arrobj_MoveModalFolders = result;\n                this.hideLoading();\n            });\n        }\n        ,\n\n        MoveItems() {\n            this.showLoading();\n\n            let arr_Promises = [];\n            let obj_TargetFolder = this.arrobj_MoveModalFolderPath[this.arrobj_MoveModalFolderPath.length - 1];\n\n            for (let obj_ItemToMove of this.arrobj_SelectedItem)\n                arr_Promises.push(DataSource.shared.moveFile(obj_ItemToMove.GalID, obj_TargetFolder.GalID));\n\n            Promise.all(arr_Promises).then(() => {\n                this.hideLoading();\n                this.initFolder(this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1]);\n            });\n        }\n        ,\n        /*#endregion*/\n\n        /*#region Remove Item Functions*/\n        showRemoveModal() {\n            this.$refs.modal_RemoveItem.show();\n        }\n        ,\n        hideRemoveModal() {\n            this.$refs.modal_RemoveItem.hide();\n        }\n        ,\n        removeItems() {\n            this.showLoading();\n\n            let arrstr_IDToRemove = [];\n            let arr_Promises = [];\n\n            if (this.obj_ContextTarget != null)\n                arrstr_IDToRemove.push(this.obj_ContextTarget.id);\n\n            for (let obj_SelectedItem of this.arrobj_SelectedItem)\n                arrstr_IDToRemove.push(obj_SelectedItem.GalID);\n\n            for (let str_IDToRemove of arrstr_IDToRemove) {\n                arr_Promises.push(DataSource.shared.removeFile(str_IDToRemove))\n            }\n\n            Promise.all(arr_Promises).then(() => {\n                this.hideLoading();\n                this.initFolder(this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1]);\n            });\n\n            /*if (i === itemsToRemove.length)\n                this.initFolder(this.filteredFolderPath[this.filteredFolderPath - 1]);*/\n        }\n        ,\n        /*#endregion*/\n\n        /*#region Custom Context Menu Functions*/\n        showContextMenu(e) {\n            e.preventDefault();\n            this.obj_ContextTarget = null;\n            let div_ContextMenu = $(\"#div_ContextMenu\");\n\n            div_ContextMenu.css(\"display\", \"block\");\n\n            console.log(e.clientY)\n            console.log(e)\n            console.log(e.screenY)\n            console.log(div_ContextMenu.outerHeight())\n\n            if((e.clientX + div_ContextMenu.outerWidth()) >= $(document).innerWidth())\n                div_ContextMenu.css(\"left\", (e.clientX - div_ContextMenu.outerWidth()) + \"px\");\n            else\n                div_ContextMenu.css(\"left\", e.clientX + \"px\");\n\n            if((e.screenY + div_ContextMenu.outerHeight()) >= $(document).innerHeight())\n                div_ContextMenu.css(\"top\", (e.clientY - div_ContextMenu.outerHeight()) + \"px\");\n            else if (e.screenY < div_ContextMenu.outerHeight())\n                div_ContextMenu.css(\"top\", 0 + \"px\");\n            else\n                div_ContextMenu.css(\"top\", e.clientY + \"px\");\n\n            if ($(e.target).closest(\"div\").data(\"type\") != null && $(e.target).closest(\"div\").data(\"type\").toUpperCase() === \"FOLDER\")\n                this.obj_ContextTarget = e.target.closest(\"button\");\n        }\n        ,\n        hideContextMenu() {\n            $(\"#div_ContextMenu\").css(\"display\", \"none\");\n        }\n        ,\n        /*#endregion*/\n\n        /*#region Loader Functions*/\n        showLoading() {\n            this.$vs.loading();\n        }\n        ,\n        hideLoading() {\n            this.$vs.loading.close();\n        }\n        ,\n        /*#endregion*/\n\n        /*#region Carousel Slider*/\n        onSlideStart(slide) {\n            this.sliding = true\n        }\n        ,\n        onSlideEnd(slide) {\n            this.sliding = false\n        }\n        ,\n        /*endregion*/\n\n        /*#region Scroll Loader Functions*/\n        getScrollPercent() {\n            //Credits to Phil Ricketts @ stackoverflow\n            let height = document.documentElement,\n                body = document.body,\n                scrollTop = 'scrollTop',\n                scrollHeight = 'scrollHeight';\n\n            return (height[scrollTop] || body[scrollTop]) / ((height[scrollHeight] || body[scrollHeight]) - height.clientHeight) * 100;\n        }\n        ,\n\n        isScrollable() {\n            return $(document).height() > $(window).height();\n        }\n        ,\n\n        debounce(func, wait, immediate) {\n            // Returns a function, that, as long as it continues to be invoked, will not\n            // be triggered. The function will be called after it stops being called for\n            // N milliseconds. If `immediate` is passed, trigger the function on the\n            // leading edge, instead of the trailing.\n            let timeout, result;\n            let self = this;\n\n            let later = function (context, args) {\n                timeout = null;\n                if (args) result = func.apply(context, args);\n            };\n\n            let debounced = self.restArguments(function (args) {\n                if (timeout) clearTimeout(timeout);\n                if (immediate) {\n                    let callNow = !timeout;\n                    timeout = setTimeout(later, wait);\n                    if (callNow) result = func.apply(this, args);\n                } else {\n                    timeout = self.delay(later, wait, this, args);\n                }\n\n                return result;\n            });\n\n            debounced.cancel = function () {\n                clearTimeout(timeout);\n                timeout = null;\n            };\n\n            return debounced;\n        }\n        ,\n        delay(func, wait, ...args) {\n            // Lodash Delay\n            /**\n             * Invokes `func` after `wait` milliseconds. Any additional arguments are\n             * provided to `func` when it's invoked.\n             *\n             * @since 0.1.0\n             * @category Function\n             * @param {Function} func The function to delay.\n             * @param {number} wait The number of milliseconds to delay invocation.\n             * @param {...*} [args] The arguments to invoke `func` with.\n             * @returns {number} Returns the timer id.\n             * @example\n             *\n             * delay(text => console.log(text), 1000, 'later')\n             * // => Logs 'later' after one second.\n             */\n            if (typeof func != 'function') {\n                throw new TypeError('Expected a function')\n            }\n            return setTimeout(func, +wait || 0, ...args)\n        }\n        ,\n        restArguments(func, startIndex) {\n            // Some functions take a variable number of arguments, or a few expected\n            // arguments at the beginning and then a variable number of values to operate\n            // on. This helper accumulates all remaining arguments past the function?s\n            // argument length (or an explicit `startIndex`), into an array that becomes\n            // the last argument. Similar to ES6?s \"rest parameter\".\n            startIndex = startIndex == null ? func.length - 1 : +startIndex;\n            return function () {\n                let length = Math.max(arguments.length - startIndex, 0),\n                    rest = Array(length),\n                    index = 0;\n                for (; index < length; index++) {\n                    rest[index] = arguments[index + startIndex];\n                }\n                switch (startIndex) {\n                    case 0:\n                        return func.call(this, rest);\n                    case 1:\n                        return func.call(this, arguments[0], rest);\n                    case 2:\n                        return func.call(this, arguments[0], arguments[1], rest);\n                }\n                let args = Array(startIndex + 1);\n                for (index = 0; index < startIndex; index++) {\n                    args[index] = arguments[index];\n                }\n                args[startIndex] = rest;\n                return func.apply(this, args);\n            };\n        }\n        ,\n        /*#endregion*/\n\n        /*#region Custom check functions*/\n        isCheck(id) {\n            if (this.isNull(id))\n                return;\n\n            let checkbox = $(\"#\" + id);\n            if (checkbox.prop(\"checked\")) {\n                checkbox.closest(\"div\").addClass(\"check\");\n                checkbox.closest(\"div\").removeClass(\"uncheck\");\n            } else {\n                checkbox.closest(\"div\").addClass(\"uncheck\");\n                checkbox.closest(\"div\").removeClass(\"check\");\n            }\n        }\n        ,\n        /*#endregion*/\n    },\n    mounted() {\n        const self = this;\n        self.initFolder(this.arrobj_FolderPath[0]);\n        self.loadWhitelist();\n\n        /*#region Menu Functions*/\n        $(document).on(\"click\", \".create-item\", () => {\n            self.showCreateModal();\n        });\n        $(document).on(\"click\", \".rename-item\", () => {\n            self.showRenameModal();\n        });\n        $(document).on(\"click\", \".download-item\", () => {\n            self.downloadItem();\n        });\n        $(document).on(\"click\", \".upload-item\", () => {\n            $(\"#fileUpload\").click();\n        });\n        $(document).on(\"click\", \".view-item\", () => {\n            self.showViewModal();\n        });\n        $(document).on(\"click\", \".move-item\", () => {\n            self.showMoveModal();\n        });\n        $(document).on(\"click\", \".remove-item\", () => {\n            self.showRemoveModal();\n        });\n        /*#endregion*/\n\n        /*#region Custom Context Functions*/\n        $(document).on(\"contextmenu\", \".div_ItemContainer\", (e) => {\n            self.showContextMenu(e);\n        });\n\n        $(document).on(\"contextmenu\", \"#div_ContextMenu\", (e) => {\n            e.preventDefault();\n        });\n\n        $(window).click(() => {\n            self.hideContextMenu();\n        });\n        /*#endregion*/\n\n        $(\"#btn_Previous\").click(() => {\n            if (this.arrobj_FolderPath.length > 1)\n                self.goBack();\n        });\n\n        $(\"#btn_MoveModalPrevious\").click(() => {\n            if (this.arrobj_MoveModalFolderPath.length > 1)\n                self.MoveModalGoBack();\n        });\n\n        /*#region Upload Functions*/\n        $(window).on(\"dragenter\", () => {\n            self.showDropZone();\n        });\n\n        $(window).on(\"dragover\", (e) => {\n            e.preventDefault();\n            self.showDropZone();\n        });\n\n        $(window).on(\"dragleave\", (e) => {\n            self.hideDropZone();\n        });\n\n        $(\"#div_DropZone\").on(\"drop\", (e) => {\n            e.preventDefault();\n            self.showLoading();\n            self.hideDropZone();\n\n            self.uploadFiles(e.originalEvent.dataTransfer.files);\n        });\n\n        $(\"#fileUpload\").on(\"change\", (e) => {\n            self.uploadFiles(e.target.files);\n        });\n        /*#endregion*/\n\n        /*#region Scroll/Resize Loader Functions*/\n        $(window).scroll(self.debounce(() => {\n            if (self.getScrollPercent() >= 60) {\n\n                let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1];\n                self.getFiles(obj_CurrentFolder).then((result) => {\n                    this.arrobj_Files.push.apply(this.arrobj_Files, result)\n                }).then(() => {\n                    this.hideLoading();\n                });\n            }\n        }, 250));\n        $(window).resize(self.debounce(() => {\n            let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1];\n            if (!self.isScrollable)\n                self.getFiles(obj_CurrentFolder).then((result) => {\n                    this.arrobj_Files.push.apply(this.arrobj_Files, result)\n                }).then(() => {\n                    this.hideLoading();\n                });\n        }, 250));\n        /*#endregion*/\n\n        /*#region Select/Unselect All Functions*/\n        $(\"#btn_SelectAll\").click(() => {\n            this.selectall = true;\n            let cb_All = $(\"input[type='checkbox']\");\n\n            cb_All.each(function () {\n                $(this).prop(\"checked\", true);\n\n                self.isCheck($(this).attr(\"id\"));\n                $(this)[0].dispatchEvent(new Event('change'));\n            });\n        });\n\n        $(\"#btn_UnselectAll\").click(() => {\n            this.selectall = false;\n            let cb_All = $(\"input[type='checkbox']\");\n\n            cb_All.each(function () {\n                if ($(this).prop(\"checked\"))\n                    $(this).prop(\"checked\", false);\n\n                self.isCheck($(this).attr(\"id\"));\n                $(this)[0].dispatchEvent(new Event('change'));\n            });\n        });\n        /*#endregion*/\n    },\n    updated() {\n        const self = this;\n\n        $(\"input[type='checkbox']\").each(function () {\n            self.isCheck($(this).attr(\"id\"));\n        });\n    },\n    computed: {\n        filteredSelectedItem: function () {\n            return this.arrobj_SelectedItem.filter(x => this.isImage(x));\n        }\n    },\n    components: {\n        portfolio,\n        updates\n    },\n}\n",{"version":3,"sources":["Gallery.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"Gallery.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n    <div class=\"container-fluid\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"system-msg\">\r\n                    <p v-if=\"str_Result\" style=\"color: red\">{{str_Result}}</p></div>\r\n            </div>\r\n            <div class=\"row gallery-action\">\r\n                <div class=\"col-md-4 \">\r\n                    <button @click=\"showCreateModal\" class=\"gallery-createFolder btn btn-secondary\"\r\n                            title=\"Create new folder\"><i\r\n                            class=\"fa fa-folder-open-o\"></i>\r\n                        <span class=\"ml-2\">Create new folder</span>\r\n                    </button>\r\n\r\n                    <button class=\"upload-item btn btn-secondary\" title=\"Upload\">\r\n                        <i class=\"fa fa-upload\"></i>\r\n                        <span class=\"ml-2\">Upload</span>\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-md-8\">\r\n\r\n                    <el-button-group>\r\n                        <el-button id=\"btn_SelectAll\" type=\"primary\" icon=\"el-icon-arrow-left\"\r\n                                   :class=\"{'d-none':selectall===true}\">Select All\r\n                        </el-button>\r\n                        <el-button id=\"btn_UnselectAll\" type=\"primary\" :class=\"{'d-none':arrobj_SelectedItem.length === 0}\">Unselect\r\n                            All<i class=\"el-icon-arrow-right el-icon-right\"></i></el-button>\r\n                    </el-button-group>\r\n                    <el-button-group class=\"gallery-action__item\">\r\n                        <el-button type=\"primary\" icon=\"el-icon-download\" class=\"download-item\"\r\n                                   v-if=\"arrobj_SelectedItem.length > 0\">Download\r\n                        </el-button>\r\n                        <el-button type=\"primary\" icon=\"el-icon-view\" v-if=\"arrobj_SelectedItem.length > 0\"\r\n                                   @click=\"showViewModal\">View\r\n                        </el-button>\r\n                        <el-button type=\"primary\" icon=\"el-icon-rank\" @click=\"showMoveModal\"\r\n                                   v-if=\"arrobj_SelectedItem.length > 0\">Move\r\n                        </el-button>\r\n                        <el-button type=\"primary\" icon=\"el-icon-picture\" @click=\"showPortfolioModal\"\r\n                                   v-if=\"arrobj_SelectedItem.length > 0\">Post as portfolio\r\n                        </el-button>\r\n                        <el-button type=\"primary\" icon=\"el-icon-edit\" @click=\"showUpdateModal\"\r\n                                   v-if=\"arrobj_SelectedItem.length > 0\">Post as Updates\r\n                        </el-button>\r\n                        <el-button type=\"primary\" icon=\"el-icon-delete\" @click=\"showRemoveModal\"\r\n                                   v-if=\"obj_ContextTarget != null || arrobj_SelectedItem.length > 0\">Remove\r\n                        </el-button>\r\n                    </el-button-group>\r\n                </div>\r\n            </div>\r\n            <div class=\"row gallery-folder__top mt-4 \">\r\n                <div class=\"col-md-9 text-left\">\r\n                    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n                        <i class=\"fa fa-home\" aria-hidden=\"true\"></i>\r\n                        <el-breadcrumb-item :to=\"{ path: '/' }\" v-for=\"obj_Folder of arrobj_FolderPath\"\r\n                                            :key=\"obj_Folder.GalID\"> {{obj_Folder.GalFolder}}\r\n                        </el-breadcrumb-item>\r\n                    </el-breadcrumb>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n\r\n                    <el-button type=\"primary\" size=\"mini\" icon=\"el-icon-download\" class=\"float-right\" id=\"btn_Previous\">\r\n                        Back\r\n                    </el-button>\r\n                    <!--<h5>-->\r\n                    <!--<i class=\"fa fa-folder\" aria-hidden=\"true\"></i>-->\r\n                    <!--{{obj_Folder.GalFolder}} >-->\r\n                    <!--</h5>-->\r\n                </div>\r\n            </div>\r\n            <div class=\"row \">\r\n                <div class=\"col-md-3  div_ItemContainer gallery-folder__bottom\">\r\n                    <div class=\"\">\r\n                        <div class=\"\" v-for=\"obj_Folder of arrobj_Folders\" :key=\"obj_Folder.GalID\"\r\n                             :data-type=\"obj_Folder.GalType\">\r\n                            <button class=\"btn btn-light\" :id=\"obj_Folder.GalID\" @click=\"changeDirectory(obj_Folder)\">\r\n                                <i class=\"material-icons\">\r\n                                    perm_media\r\n                                </i>\r\n                                {{obj_Folder.GalFolder}}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-md-9 bg-white div_ItemContainer\">\r\n                    <div class=\" gallery-album\">\r\n                        <div class=\"\" v-for=\"obj_File of arrobj_Files\" :key=\"obj_File.GalID\"\r\n                        >\r\n                            <label :for=\"obj_File.GalID\" class=\"gallery-album__image\">\r\n                                <img v-if=\"isImage(obj_File)\" :src=\"getLowSource(obj_File)\" :alt=\"obj_File.GalFileName\"\r\n                                     draggable=\"false\"/>\r\n                            </label>\r\n                            <input class=\"limited\" type=\"checkbox\" :id=\"obj_File.GalID\" :value=\"obj_File\"\r\n                                   v-model=\"arrobj_SelectedItem\"\r\n                                   :disabled=\"isNull(arrobj_SelectedItem.find(x=>x.GalID === obj_File.GalID)) && arrobj_SelectedItem.length >= int_SelectLimit\"/>\r\n                            <label for=\"obj_File.GalID\"></label>\r\n                            <!--<div v-if=\"isImage(obj_File)\" :data-type=\"obj_File.GalType\">\r\n                                <label :for=\"obj_File.GalID\">\r\n                                    <img :src=\"getLowSource(obj_File)\" :alt=\"obj_File.GalFileName\" draggable=\"false\"/>\r\n                                </label>\r\n                                <input type=\"checkbox\" :id=\"obj_File.GalID\" :value=\"obj_File\"\r\n                                       v-model=\"arrobj_SelectedItem\"/>\r\n                            </div>\r\n                            <div v-else :data-type=\"obj_File.GalType\">\r\n                                <label :for=\"obj_File.GalID\">\r\n                                    <i class=\"fa fa-file-text-o\" aria-hidden=\"true\"></i>\r\n                                </label>\r\n                                <input type=\"checkbox\" :id=\"obj_File.GalID\" :value=\"obj_File\"\r\n                                       v-model=\"arrobj_SelectedItem\"/>\r\n                            </div>-->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <input type=\"file\" id=\"fileUpload\" multiple/>\r\n\r\n            <div id=\"div_ContextMenu\" class=\"border border-secondary bg-white rounded-right rounded-bottom text-left\">\r\n                <ul id=\"ul_ContextMenuOptions\">\r\n                    <li class=\"li_MenuOption\" @click=\"showCreateModal\"><i class=\"fa fa-folder-open-o\"></i><span\r\n                            class=\"menu-text\">Create New folder</span></li>\r\n                    <li class=\"li_MenuOption\" @click=\"showRenameModal\" v-if=\"obj_ContextTarget != null\"><i\r\n                            class=\"fa fa-pencil-square-o\"></i><span\r\n                            class=\"menu-text\">Rename folder</span></li>\r\n                    <li class=\"li_MenuOption download-item\" v-if=\"arrobj_SelectedItem.length > 0\">\r\n                        <i class=\"fa fa-download\"></i>\r\n                        <span class=\"menu-text\">Download</span>\r\n                    </li>\r\n                    <li class=\"li_MenuOption upload-item\">\r\n                        <i class=\"fa fa-upload\"></i>\r\n                        <span class=\"menu-text\">Upload</span>\r\n                    </li>\r\n                    <li class=\"li_MenuOption\" @click=\"showViewModal\" v-if=\"arrobj_SelectedItem.length > 0\">\r\n                        <i\r\n                                class=\"fa fa-eye\"></i><span\r\n                            class=\"menu-text\">View</span></li>\r\n                    <li class=\"li_MenuOption\" @click=\"showMoveModal\" v-if=\"arrobj_SelectedItem.length > 0\"><i\r\n                            class=\"fa fa-arrows\"></i><span\r\n                            class=\"menu-text\">Move</span>\r\n                    </li>\r\n                    <li class=\"li_MenuOption\" @click=\"showRemoveModal\"\r\n                        v-if=\"obj_ContextTarget != null || arrobj_SelectedItem.length > 0\"><i\r\n                            class=\"fa fa-trash-o\"></i><span\r\n                            class=\"menu-text\">Remove</span></li>\r\n                    <li class=\"li_MenuOption\" @click=\"showPortfolioModal\" v-if=\"arrobj_SelectedItem.length > 0\">\r\n                        <i class=\"fa fa-eye\"></i>\r\n                        <span class=\"menu-text\">Portfolio</span>\r\n                    </li>\r\n                    <li class=\"li_MenuOption\" @click=\"showUpdateModal\" v-if=\"arrobj_SelectedItem.length > 0\">\r\n                        <i class=\"fa fa-eye\"></i>\r\n                        <span class=\"menu-text\">Updates</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n        </div>\r\n        <b-modal id=\"modal_ViewItem\" title=\"View\" ref=\"modal_ViewItem\" centered ok-only ok-title=\"Close\">\r\n            <b-carousel id=\"carousel1\"\r\n                        style=\"text-shadow: 1px 1px 2px #333;\"\r\n                        controls\r\n                        indicators\r\n                        background=\"#ababab\"\r\n                        :interval=\"4000\"\r\n                        v-model=\"slide\"\r\n                        @sliding-start=\"onSlideStart\"\r\n                        @sliding-end=\"onSlideEnd\"\r\n            >\r\n                <b-carousel-slide v-for=\"obj_Item of filteredSelectedItem\" :key=\"obj_Item.FileID\">\r\n                    <img slot=\"img\" class=\"d-block img-fluid w-100\" :src=\"getMidSource(obj_Item)\"\r\n                         :alt=\"obj_Item.GalFileName\"/>\r\n                    <span>{{obj_Item.GalFileName}}</span>\r\n                </b-carousel-slide>\r\n            </b-carousel>\r\n        </b-modal>\r\n        <b-modal id=\"modal_NewFolder\" title=\"New Folder\" ref=\"modal_NewFolder\" centered ok-title=\"Create\"\r\n                 @ok=\"createFolder\" @keyup.enter.native=\"createFolder\">\r\n            <div class=\"form-group\">\r\n                <input type=\"text\" maxlength=\"10\" ref=\"tb_FolderName\" class=\"form-control\" id=\"tb_FolderName\"\r\n                       v-model=\"str_NewFolderName\"\r\n                       placeholder=\"Folder Name\" autocomplete=\"off\" autofocus/>\r\n            </div>\r\n        </b-modal>\r\n        <b-modal id=\"modal_RenameFolder\" title=\"Rename Folder\" ref=\"modal_RenameFolder\" centered ok-title=\"Rename\"\r\n                 @ok=\"renameFolder\" @keyup.enter.native=\"renameFolder\">\r\n            <div class=\"form-group\">\r\n                <input type=\"text\" maxlength=\"10\" ref=\"tb_RenameFolder\" class=\"form-control\" id=\"tb_RenameFolder\"\r\n                       v-model=\"str_NewFolderName\"\r\n                       placeholder=\"New Folder Name\" autocomplete=\"off\" autofocus/>\r\n            </div>\r\n        </b-modal>\r\n        <b-modal id=\"modal_RemoveItem\" title=\"Remove Item\" ref=\"modal_RemoveItem\" centered ok-title=\"Confirm\"\r\n                 @ok=\"removeItems\">\r\n            <div class=\"form-group\">\r\n                <div v-if=\"obj_ContextTarget != null && arrobj_SelectedItem.length > 0\">\r\n                    Are you sure you want to delete the folder and the selected image(s)?\r\n                </div>\r\n                <div v-else-if=\"obj_ContextTarget == null && arrobj_SelectedItem.length > 0\">\r\n                    Are you sure you want to delete the selected image(s)?\r\n                </div>\r\n                <div v-else-if=\"obj_ContextTarget != null && arrobj_SelectedItem.length === 0\">\r\n                    Are you sure you want to remove the folder?\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n        <b-modal id=\"modal_MoveItem\" title=\"Move item(s) to?\" ref=\"modal_MoveItem\" centered @ok=\"MoveItems\">\r\n            <div class=\"row\">\r\n                <b-carousel id=\"carousel2\"\r\n                            style=\"text-shadow: 1px 1px 2px #333;\"\r\n                            controls\r\n                            indicators\r\n                            background=\"#ababab\"\r\n                            :interval=\"0\"\r\n                >\r\n                    <b-carousel-slide v-for=\"obj_Item of arrobj_SelectedItem\" :key=\"obj_Item.FileID\">\r\n                        <img slot=\"img\" :src=\"getLowSource(obj_Item)\"\r\n                             :alt=\"obj_Item.GalFileName\"/>\r\n                    </b-carousel-slide>\r\n                </b-carousel>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-\">\r\n                    <button class=\"btn btn-light\" id=\"btn_MoveModalPrevious\">\r\n                        <i class=\"fa fa-folder\" aria-hidden=\"true\"></i>Go Back\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-\" v-for=\"obj_MoveModalFolder of arrobj_MoveModalFolders\"\r\n                     :key=\"obj_MoveModalFolder.GalID\"\r\n                     :data-type=\"obj_MoveModalFolder.GalType\">\r\n                    <button class=\"btn btn-light\" @click=\"MoveModalChangeDirectory(obj_MoveModalFolder)\">\r\n                        <i class=\"fa fa-folder\" aria-hidden=\"true\"></i>\r\n                        {{obj_MoveModalFolder.GalFolder}}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n        <b-modal id=\"modal_PostComponents\" hide-footer size=\"lg\" @hidden=\"hideComponentModal\"\r\n                 :title=\"str_PostComponentTitle\" ref=\"modal_PostComponent\">\r\n            <component @result=\"displayResult\" :is=\"obj_SelectedComponent\" :images=\"arrobj_SelectedItem\"></component>\r\n        </b-modal>\r\n        <div id=\"div_DropZone\" class=\"hideDropZone\">\r\n            <h1>Drop file(s) here to upload</h1>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    \"use strict\";\r\n    import DataSource from \"../data/datasource\";\r\n    import $ from 'jquery';\r\n    import portfolio from \"../components/Post_Portfolio_Component\";\r\n    import updates from \"../components/Post_Updates_Component.vue\";\r\n\r\n    export default {\r\n        name: \"Gallery\",\r\n        data() {\r\n            return {\r\n                arrobj_Folders: [],\r\n                arrobj_Files: [],\r\n                arrobj_FolderPath: [{GalFolder: \"Home\", GalID: \"PRIMARY\", GalType: \"Folder\"}],\r\n                arrobj_SelectedItem: [],\r\n                arrobj_MoveModalFolders: [],\r\n                arrobj_MoveModalFolderPath: [],\r\n                arrstr_Whitelist: [],\r\n                int_StartRowNo: 1,\r\n                int_EndRowNo: 10,\r\n                obj_ContextTarget: {},\r\n                obj_SelectedComponent: \"\",\r\n                obj_ComponentProperties: {},\r\n                slide: 0,\r\n                sliding: null,\r\n                str_NewFolderName: \"\",\r\n                str_PostComponentTitle: \"\",\r\n                str_Result: \"\",\r\n                systemmsgError: false,\r\n                int_SelectLimit: 30,\r\n                selectall: false,\r\n            }\r\n        },\r\n        methods: {\r\n            loadWhitelist() {\r\n                DataSource.shared.getWhitelist().then((result) => {\r\n                    this.arrstr_Whitelist = result.Table;\r\n                });\r\n            },\r\n            isWhitelist(file) {\r\n                let temparrstr = file.name.split(\".\");\r\n                let str_Ext = (\".\" + temparrstr[temparrstr.length - 1]).toUpperCase();\r\n                let isWhitelisted = this.arrstr_Whitelist.findIndex(x => x.type.toUpperCase() === str_Ext) !== -1;\r\n                let isValidFile = file.size > 0;\r\n\r\n                return (isWhitelisted && isValidFile);\r\n            },\r\n            initFolder(obj_Folder) {\r\n                this.arrobj_Files = [];\r\n                this.arrobj_Folders = [];\r\n                this.arrobj_SelectedItem = [];\r\n                this.int_StartRowNo = 1;\r\n                this.int_EndRowNo = 10;\r\n\r\n                this.getFolders(obj_Folder).then((result) => {\r\n                    this.arrobj_Folders = result;\r\n                });\r\n                this.loadFiles(obj_Folder);\r\n            },\r\n            changeDirectory(obj_Folder) {\r\n                this.arrobj_FolderPath.push(obj_Folder);\r\n\r\n                this.initFolder(obj_Folder)\r\n            },\r\n            getFolders(obj_Folder) {\r\n                this.showLoading();\r\n                return new Promise((resolve, reject) => {\r\n                    DataSource.shared.getFolders(obj_Folder.GalID).then((result) => {\r\n                        let temp = [];\r\n                        if (result.code != 2 && result.code != 99)\r\n                            temp = result.Table;\r\n\r\n                        resolve(temp);\r\n                    });\r\n                });\r\n            },\r\n            loadFiles(obj_Folder) {\r\n                /*RECURSIVE FUNCTION ONLY ON FIRST ENTRY*/\r\n                this.getFiles(obj_Folder).then((result) => {\r\n                    this.arrobj_Files.push.apply(this.arrobj_Files, result);\r\n\r\n                    if (!this.isScrollable() && result != null)\r\n                        this.loadFiles(obj_Folder);\r\n                }).then(() => {\r\n                    this.hideLoading();\r\n                });\r\n            },\r\n            getFiles(obj_Folder) {\r\n                this.showLoading();\r\n                return new Promise((resolve, reject) => {\r\n                    DataSource.shared.getFiles(obj_Folder.GalID, this.int_StartRowNo, this.int_EndRowNo).then((result) => {\r\n                        let arr_Result\r\n\r\n                        if (result.code != 2 && result.code != 99) {\r\n                            arr_Result = result.Table;\r\n\r\n                            this.int_StartRowNo = this.int_EndRowNo + 1;\r\n                            this.int_EndRowNo = this.int_EndRowNo + 10;\r\n                        }\r\n\r\n                        resolve(arr_Result);\r\n                    });\r\n                });\r\n            },\r\n            goBack() {\r\n                if (this.arrobj_FolderPath.length >= 1)\r\n                    this.arrobj_FolderPath.pop();\r\n\r\n                let obj_PreviousFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1];\r\n\r\n                this.initFolder(obj_PreviousFolder);\r\n            },\r\n            isImage(obj_File) {\r\n                let ext = String(obj_File.GalFileExt).toUpperCase();\r\n                let isImage = false;\r\n\r\n                switch (ext) {\r\n                    case \".PNG\":\r\n                    case \".JPG\":\r\n                    case \".BMP\":\r\n                    case \".GIF\":\r\n                        isImage = true;\r\n                        break;\r\n                    default:\r\n                        isImage = false;\r\n                        break;\r\n                }\r\n\r\n                return isImage;\r\n            },\r\n            getLowSource(file) {\r\n                if (this.isImage(file))\r\n                    return \"data:\" + file.GalFileType + \";base64,\" + file.GalFileLow;\r\n                else\r\n                    return \"\";\r\n            },\r\n            getMidSource(file) {\r\n                if (this.isImage(file))\r\n                    return \"data:\" + file.GalFileType + \";base64,\" + file.GalFileMedium;\r\n                else\r\n                    return \"\";\r\n            },\r\n            showPortfolioModal() {\r\n                this.obj_SelectedComponent = portfolio;\r\n                this.str_PostComponentTitle = \"Portfolio\";\r\n                this.showComponentModal();\r\n            },\r\n            showUpdateModal() {\r\n                this.obj_SelectedComponent = updates;\r\n                this.str_PostComponentTitle = \"Updates\";\r\n                this.showComponentModal();\r\n            },\r\n            displayResult(value) {\r\n                switch (value) {\r\n                    case \"TRUE\":\r\n                        this.$notify({\r\n                            title: 'Success',\r\n                            message: 'Successfully posted!',\r\n                            type: 'success'\r\n                        });\r\n                        // this.str_Result = \"Successfully posted!\";\r\n                        break;\r\n                    case \"FALSE\":\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'Whoops. Something went wrong. Please check your fields and try again.'\r\n                        });\r\n                        // this.str_Result = \"Whoops. Something went wrong. Please check your fields and try again.\";\r\n                        break;\r\n                }\r\n\r\n                this.hideComponentModal();\r\n            },\r\n            showComponentModal() {\r\n                this.obj_ComponentProperties = {images: this.arrobj_SelectedItem};\r\n                this.$refs.modal_PostComponent.show();\r\n            },\r\n            hideComponentModal() {\r\n                this.obj_SelectedComponent = false;\r\n                this.$refs.modal_PostComponent.hide();\r\n            },\r\n            isNull(obj) {\r\n                return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\r\n            },\r\n\r\n            /*#region Download Item Functions*/\r\n            downloadItem() {\r\n                let arr_Promises = [];\r\n                this.showLoading();\r\n\r\n                for (let obj_SelectedItem of this.arrobj_SelectedItem) {\r\n                    let downloadPromise = new Promise((resolve, reject) => {\r\n                        DataSource.shared.downloadFile(obj_SelectedItem.GalID).then((result) => {\r\n                            let file = (result.Table)[0];\r\n                            let a = document.createElement(\"a\");\r\n                            let contentType = this.getContentType(file);\r\n                            let b64Data = file.GalFile;\r\n                            let blob = this.b64toBlob(b64Data, contentType);\r\n\r\n                            a.href = URL.createObjectURL(blob);\r\n                            a.download = (file.GalFileName + file.GalFileExt).toString();\r\n                            a.style.display = \"none\";\r\n                            document.body.appendChild(a);\r\n                            a.click();\r\n                            a.remove();\r\n                            resolve(result);\r\n                        });\r\n                    });\r\n\r\n                    arr_Promises.push(downloadPromise);\r\n                }\r\n\r\n                Promise.all(arr_Promises).then((result) => {\r\n                    this.hideLoading();\r\n                });\r\n            }\r\n            ,\r\n            getContentType(e) {\r\n                let contentType = \"\";\r\n\r\n                switch (e.GalFileExt.toUpperCase()) {\r\n                    case \".PDF\":\r\n                        contentType += \"application/octet-stream\";\r\n                        break;\r\n                    default:\r\n                        contentType += e.GalFileType;\r\n                        break;\r\n                }\r\n\r\n                return contentType;\r\n            }\r\n            ,\r\n            b64toBlob(b64Data, contentType, sliceSize) {\r\n                //Credit to Jeremy Banks @ stackoverflow\r\n                contentType = contentType || '';\r\n                sliceSize = sliceSize || 512;\r\n\r\n                let byteCharacters = atob(b64Data);\r\n                let byteArrays = [];\r\n\r\n                for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n                    let slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n                    let byteNumbers = new Array(slice.length);\r\n                    for (let i = 0; i < slice.length; i++) {\r\n                        byteNumbers[i] = slice.charCodeAt(i);\r\n                    }\r\n\r\n                    let byteArray = new Uint8Array(byteNumbers);\r\n\r\n                    byteArrays.push(byteArray);\r\n                }\r\n\r\n                return new Blob(byteArrays, {type: contentType});\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region Create Folder Functions*/\r\n            showCreateModal() {\r\n                this.$refs.modal_NewFolder.show();\r\n            }\r\n            ,\r\n            hideCreateModal() {\r\n\r\n                this.$refs.modal_NewFolder.hide();\r\n            }\r\n            ,\r\n            createFolder() {\r\n                if (this.str_NewFolderName == null)\r\n                    return;\r\n\r\n                let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1],\r\n                    str_NewFolderName = this.str_NewFolderName;\r\n\r\n                this.showLoading();\r\n                DataSource.shared.createFolder(obj_CurrentFolder.GalID, str_NewFolderName).then((result) => {\r\n                    this.initFolder(obj_CurrentFolder);\r\n                    this.str_NewFolderName = \"\";\r\n                    this.hideLoading();\r\n                    this.hideCreateModal();\r\n                });\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region Rename Item Functions*/\r\n            showRenameModal() {\r\n                this.$refs.modal_RenameFolder.show();\r\n            }\r\n            ,\r\n            hideRenameModal() {\r\n                this.$refs.modal_RenameFolder.hide();\r\n            }\r\n            ,\r\n            renameFolder() {\r\n                if (this.str_NewFolderName == null)\r\n                    return;\r\n\r\n                let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1],\r\n                    obj_TargetFolder = this.obj_ContextTarget,\r\n                    str_NewFolderName = this.str_NewFolderName;\r\n\r\n                DataSource.shared.renameFile(obj_TargetFolder.id, str_NewFolderName).then((result) => {\r\n                    this.showLoading();\r\n                }).then(() => {\r\n                    this.initFolder(obj_CurrentFolder);\r\n                    this.str_NewFolderName = \"\";\r\n                    this.obj_ContextTarget = {};\r\n                    this.hideLoading();\r\n                });\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region Upload Item Functions*/\r\n            /*#region Drop Zone Functions*/\r\n            showDropZone() {\r\n                $(\"#div_DropZone\").css({\r\n                    \"visibility\": \"visible\",\r\n                    \"opacity\": \"1\"\r\n                });\r\n            }\r\n            ,\r\n            hideDropZone() {\r\n                $(\"#div_DropZone\").css({\r\n                    \"visibility\": \"hidden\",\r\n                    \"opacity\": 0\r\n                });\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            uploadFiles(filesUploaded) {\r\n                this.showLoading();\r\n                let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1];\r\n\r\n                let arrobj_AcceptedFiles = [];\r\n\r\n                for (let file of filesUploaded) {\r\n                    if (this.isWhitelist(file))\r\n                        arrobj_AcceptedFiles.push(file);\r\n                }\r\n\r\n                DataSource.shared.saveFile(arrobj_AcceptedFiles, obj_CurrentFolder.GalID).then((result) => {\r\n                    this.hideLoading();\r\n                    this.initFolder(obj_CurrentFolder);\r\n                });\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region View Item Functions*/\r\n            showViewModal() {\r\n                this.$refs.modal_ViewItem.show();\r\n            }\r\n            ,\r\n            hideViewModal() {\r\n                this.$refs.modal_ViewItem.show();\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region Move Item Functions*/\r\n            showMoveModal() {\r\n                this.$refs.modal_MoveItem.show();\r\n                this.arrobj_MoveModalFolderPath = [];\r\n                this.arrobj_MoveModalFolderPath.push.apply(this.arrobj_MoveModalFolderPath, this.arrobj_FolderPath);\r\n\r\n                let obj_CurrentFolder = this.arrobj_MoveModalFolderPath[this.arrobj_MoveModalFolderPath.length - 1];\r\n\r\n                this.MoveModalInitFolder(obj_CurrentFolder);\r\n            }\r\n            ,\r\n            hideMoveModal() {\r\n                this.$refs.modal_MoveItem.hide();\r\n            }\r\n            ,\r\n            MoveModalGoBack() {\r\n                if (this.arrobj_MoveModalFolderPath.length >= 1)\r\n                    this.arrobj_MoveModalFolderPath.pop();\r\n\r\n                let obj_PreviousFolder = this.arrobj_MoveModalFolderPath[this.arrobj_MoveModalFolderPath.length - 1];\r\n\r\n                this.MoveModalInitFolder(obj_PreviousFolder);\r\n            }\r\n            ,\r\n            MoveModalChangeDirectory(obj_Folder) {\r\n                this.arrobj_MoveModalFolderPath.push(obj_Folder);\r\n\r\n                this.MoveModalInitFolder(obj_Folder)\r\n            }\r\n            ,\r\n\r\n            MoveModalInitFolder(obj_Folder) {\r\n                this.arrobj_MoveModalFolders = [];\r\n\r\n                this.getFolders(obj_Folder).then((result) => {\r\n                    this.arrobj_MoveModalFolders = result;\r\n                    this.hideLoading();\r\n                });\r\n            }\r\n            ,\r\n\r\n            MoveItems() {\r\n                this.showLoading();\r\n\r\n                let arr_Promises = [];\r\n                let obj_TargetFolder = this.arrobj_MoveModalFolderPath[this.arrobj_MoveModalFolderPath.length - 1];\r\n\r\n                for (let obj_ItemToMove of this.arrobj_SelectedItem)\r\n                    arr_Promises.push(DataSource.shared.moveFile(obj_ItemToMove.GalID, obj_TargetFolder.GalID));\r\n\r\n                Promise.all(arr_Promises).then(() => {\r\n                    this.hideLoading();\r\n                    this.initFolder(this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1]);\r\n                });\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region Remove Item Functions*/\r\n            showRemoveModal() {\r\n                this.$refs.modal_RemoveItem.show();\r\n            }\r\n            ,\r\n            hideRemoveModal() {\r\n                this.$refs.modal_RemoveItem.hide();\r\n            }\r\n            ,\r\n            removeItems() {\r\n                this.showLoading();\r\n\r\n                let arrstr_IDToRemove = [];\r\n                let arr_Promises = [];\r\n\r\n                if (this.obj_ContextTarget != null)\r\n                    arrstr_IDToRemove.push(this.obj_ContextTarget.id);\r\n\r\n                for (let obj_SelectedItem of this.arrobj_SelectedItem)\r\n                    arrstr_IDToRemove.push(obj_SelectedItem.GalID);\r\n\r\n                for (let str_IDToRemove of arrstr_IDToRemove) {\r\n                    arr_Promises.push(DataSource.shared.removeFile(str_IDToRemove))\r\n                }\r\n\r\n                Promise.all(arr_Promises).then(() => {\r\n                    this.hideLoading();\r\n                    this.initFolder(this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1]);\r\n                });\r\n\r\n                /*if (i === itemsToRemove.length)\r\n                    this.initFolder(this.filteredFolderPath[this.filteredFolderPath - 1]);*/\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region Custom Context Menu Functions*/\r\n            showContextMenu(e) {\r\n                e.preventDefault();\r\n                this.obj_ContextTarget = null;\r\n                let div_ContextMenu = $(\"#div_ContextMenu\");\r\n\r\n                div_ContextMenu.css(\"display\", \"block\");\r\n\r\n                console.log(e.clientY)\r\n                console.log(e)\r\n                console.log(e.screenY)\r\n                console.log(div_ContextMenu.outerHeight())\r\n\r\n                if((e.clientX + div_ContextMenu.outerWidth()) >= $(document).innerWidth())\r\n                    div_ContextMenu.css(\"left\", (e.clientX - div_ContextMenu.outerWidth()) + \"px\");\r\n                else\r\n                    div_ContextMenu.css(\"left\", e.clientX + \"px\");\r\n\r\n                if((e.screenY + div_ContextMenu.outerHeight()) >= $(document).innerHeight())\r\n                    div_ContextMenu.css(\"top\", (e.clientY - div_ContextMenu.outerHeight()) + \"px\");\r\n                else if (e.screenY < div_ContextMenu.outerHeight())\r\n                    div_ContextMenu.css(\"top\", 0 + \"px\");\r\n                else\r\n                    div_ContextMenu.css(\"top\", e.clientY + \"px\");\r\n\r\n                if ($(e.target).closest(\"div\").data(\"type\") != null && $(e.target).closest(\"div\").data(\"type\").toUpperCase() === \"FOLDER\")\r\n                    this.obj_ContextTarget = e.target.closest(\"button\");\r\n            }\r\n            ,\r\n            hideContextMenu() {\r\n                $(\"#div_ContextMenu\").css(\"display\", \"none\");\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region Loader Functions*/\r\n            showLoading() {\r\n                this.$vs.loading();\r\n            }\r\n            ,\r\n            hideLoading() {\r\n                this.$vs.loading.close();\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region Carousel Slider*/\r\n            onSlideStart(slide) {\r\n                this.sliding = true\r\n            }\r\n            ,\r\n            onSlideEnd(slide) {\r\n                this.sliding = false\r\n            }\r\n            ,\r\n            /*endregion*/\r\n\r\n            /*#region Scroll Loader Functions*/\r\n            getScrollPercent() {\r\n                //Credits to Phil Ricketts @ stackoverflow\r\n                let height = document.documentElement,\r\n                    body = document.body,\r\n                    scrollTop = 'scrollTop',\r\n                    scrollHeight = 'scrollHeight';\r\n\r\n                return (height[scrollTop] || body[scrollTop]) / ((height[scrollHeight] || body[scrollHeight]) - height.clientHeight) * 100;\r\n            }\r\n            ,\r\n\r\n            isScrollable() {\r\n                return $(document).height() > $(window).height();\r\n            }\r\n            ,\r\n\r\n            debounce(func, wait, immediate) {\r\n                // Returns a function, that, as long as it continues to be invoked, will not\r\n                // be triggered. The function will be called after it stops being called for\r\n                // N milliseconds. If `immediate` is passed, trigger the function on the\r\n                // leading edge, instead of the trailing.\r\n                let timeout, result;\r\n                let self = this;\r\n\r\n                let later = function (context, args) {\r\n                    timeout = null;\r\n                    if (args) result = func.apply(context, args);\r\n                };\r\n\r\n                let debounced = self.restArguments(function (args) {\r\n                    if (timeout) clearTimeout(timeout);\r\n                    if (immediate) {\r\n                        let callNow = !timeout;\r\n                        timeout = setTimeout(later, wait);\r\n                        if (callNow) result = func.apply(this, args);\r\n                    } else {\r\n                        timeout = self.delay(later, wait, this, args);\r\n                    }\r\n\r\n                    return result;\r\n                });\r\n\r\n                debounced.cancel = function () {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                };\r\n\r\n                return debounced;\r\n            }\r\n            ,\r\n            delay(func, wait, ...args) {\r\n                // Lodash Delay\r\n                /**\r\n                 * Invokes `func` after `wait` milliseconds. Any additional arguments are\r\n                 * provided to `func` when it's invoked.\r\n                 *\r\n                 * @since 0.1.0\r\n                 * @category Function\r\n                 * @param {Function} func The function to delay.\r\n                 * @param {number} wait The number of milliseconds to delay invocation.\r\n                 * @param {...*} [args] The arguments to invoke `func` with.\r\n                 * @returns {number} Returns the timer id.\r\n                 * @example\r\n                 *\r\n                 * delay(text => console.log(text), 1000, 'later')\r\n                 * // => Logs 'later' after one second.\r\n                 */\r\n                if (typeof func != 'function') {\r\n                    throw new TypeError('Expected a function')\r\n                }\r\n                return setTimeout(func, +wait || 0, ...args)\r\n            }\r\n            ,\r\n            restArguments(func, startIndex) {\r\n                // Some functions take a variable number of arguments, or a few expected\r\n                // arguments at the beginning and then a variable number of values to operate\r\n                // on. This helper accumulates all remaining arguments past the function?s\r\n                // argument length (or an explicit `startIndex`), into an array that becomes\r\n                // the last argument. Similar to ES6?s \"rest parameter\".\r\n                startIndex = startIndex == null ? func.length - 1 : +startIndex;\r\n                return function () {\r\n                    let length = Math.max(arguments.length - startIndex, 0),\r\n                        rest = Array(length),\r\n                        index = 0;\r\n                    for (; index < length; index++) {\r\n                        rest[index] = arguments[index + startIndex];\r\n                    }\r\n                    switch (startIndex) {\r\n                        case 0:\r\n                            return func.call(this, rest);\r\n                        case 1:\r\n                            return func.call(this, arguments[0], rest);\r\n                        case 2:\r\n                            return func.call(this, arguments[0], arguments[1], rest);\r\n                    }\r\n                    let args = Array(startIndex + 1);\r\n                    for (index = 0; index < startIndex; index++) {\r\n                        args[index] = arguments[index];\r\n                    }\r\n                    args[startIndex] = rest;\r\n                    return func.apply(this, args);\r\n                };\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n\r\n            /*#region Custom check functions*/\r\n            isCheck(id) {\r\n                if (this.isNull(id))\r\n                    return;\r\n\r\n                let checkbox = $(\"#\" + id);\r\n                if (checkbox.prop(\"checked\")) {\r\n                    checkbox.closest(\"div\").addClass(\"check\");\r\n                    checkbox.closest(\"div\").removeClass(\"uncheck\");\r\n                } else {\r\n                    checkbox.closest(\"div\").addClass(\"uncheck\");\r\n                    checkbox.closest(\"div\").removeClass(\"check\");\r\n                }\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n        },\r\n        mounted() {\r\n            const self = this;\r\n            self.initFolder(this.arrobj_FolderPath[0]);\r\n            self.loadWhitelist();\r\n\r\n            /*#region Menu Functions*/\r\n            $(document).on(\"click\", \".create-item\", () => {\r\n                self.showCreateModal();\r\n            });\r\n            $(document).on(\"click\", \".rename-item\", () => {\r\n                self.showRenameModal();\r\n            });\r\n            $(document).on(\"click\", \".download-item\", () => {\r\n                self.downloadItem();\r\n            });\r\n            $(document).on(\"click\", \".upload-item\", () => {\r\n                $(\"#fileUpload\").click();\r\n            });\r\n            $(document).on(\"click\", \".view-item\", () => {\r\n                self.showViewModal();\r\n            });\r\n            $(document).on(\"click\", \".move-item\", () => {\r\n                self.showMoveModal();\r\n            });\r\n            $(document).on(\"click\", \".remove-item\", () => {\r\n                self.showRemoveModal();\r\n            });\r\n            /*#endregion*/\r\n\r\n            /*#region Custom Context Functions*/\r\n            $(document).on(\"contextmenu\", \".div_ItemContainer\", (e) => {\r\n                self.showContextMenu(e);\r\n            });\r\n\r\n            $(document).on(\"contextmenu\", \"#div_ContextMenu\", (e) => {\r\n                e.preventDefault();\r\n            });\r\n\r\n            $(window).click(() => {\r\n                self.hideContextMenu();\r\n            });\r\n            /*#endregion*/\r\n\r\n            $(\"#btn_Previous\").click(() => {\r\n                if (this.arrobj_FolderPath.length > 1)\r\n                    self.goBack();\r\n            });\r\n\r\n            $(\"#btn_MoveModalPrevious\").click(() => {\r\n                if (this.arrobj_MoveModalFolderPath.length > 1)\r\n                    self.MoveModalGoBack();\r\n            });\r\n\r\n            /*#region Upload Functions*/\r\n            $(window).on(\"dragenter\", () => {\r\n                self.showDropZone();\r\n            });\r\n\r\n            $(window).on(\"dragover\", (e) => {\r\n                e.preventDefault();\r\n                self.showDropZone();\r\n            });\r\n\r\n            $(window).on(\"dragleave\", (e) => {\r\n                self.hideDropZone();\r\n            });\r\n\r\n            $(\"#div_DropZone\").on(\"drop\", (e) => {\r\n                e.preventDefault();\r\n                self.showLoading();\r\n                self.hideDropZone();\r\n\r\n                self.uploadFiles(e.originalEvent.dataTransfer.files);\r\n            });\r\n\r\n            $(\"#fileUpload\").on(\"change\", (e) => {\r\n                self.uploadFiles(e.target.files);\r\n            });\r\n            /*#endregion*/\r\n\r\n            /*#region Scroll/Resize Loader Functions*/\r\n            $(window).scroll(self.debounce(() => {\r\n                if (self.getScrollPercent() >= 60) {\r\n\r\n                    let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1];\r\n                    self.getFiles(obj_CurrentFolder).then((result) => {\r\n                        this.arrobj_Files.push.apply(this.arrobj_Files, result)\r\n                    }).then(() => {\r\n                        this.hideLoading();\r\n                    });\r\n                }\r\n            }, 250));\r\n            $(window).resize(self.debounce(() => {\r\n                let obj_CurrentFolder = this.arrobj_FolderPath[this.arrobj_FolderPath.length - 1];\r\n                if (!self.isScrollable)\r\n                    self.getFiles(obj_CurrentFolder).then((result) => {\r\n                        this.arrobj_Files.push.apply(this.arrobj_Files, result)\r\n                    }).then(() => {\r\n                        this.hideLoading();\r\n                    });\r\n            }, 250));\r\n            /*#endregion*/\r\n\r\n            /*#region Select/Unselect All Functions*/\r\n            $(\"#btn_SelectAll\").click(() => {\r\n                this.selectall = true;\r\n                let cb_All = $(\"input[type='checkbox']\");\r\n\r\n                cb_All.each(function () {\r\n                    $(this).prop(\"checked\", true);\r\n\r\n                    self.isCheck($(this).attr(\"id\"));\r\n                    $(this)[0].dispatchEvent(new Event('change'));\r\n                });\r\n            });\r\n\r\n            $(\"#btn_UnselectAll\").click(() => {\r\n                this.selectall = false;\r\n                let cb_All = $(\"input[type='checkbox']\");\r\n\r\n                cb_All.each(function () {\r\n                    if ($(this).prop(\"checked\"))\r\n                        $(this).prop(\"checked\", false);\r\n\r\n                    self.isCheck($(this).attr(\"id\"));\r\n                    $(this)[0].dispatchEvent(new Event('change'));\r\n                });\r\n            });\r\n            /*#endregion*/\r\n        },\r\n        updated() {\r\n            const self = this;\r\n\r\n            $(\"input[type='checkbox']\").each(function () {\r\n                self.isCheck($(this).attr(\"id\"));\r\n            });\r\n        },\r\n        computed: {\r\n            filteredSelectedItem: function () {\r\n                return this.arrobj_SelectedItem.filter(x => this.isImage(x));\r\n            }\r\n        },\r\n        components: {\r\n            portfolio,\r\n            updates\r\n        },\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    /*#region Full page drop area */\r\n    #div_DropZone {\r\n        visibility: hidden;\r\n        opacity: 0;\r\n        position: fixed;\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        z-index: 9999999999;\r\n        /*background-color: rgba(0, 0, 0, 0.5);*/\r\n        background: rgba(0, 0, 0, 0.45);\r\n        transition: visibility 175ms, opacity 175ms;\r\n        display: table;\r\n        text-shadow: 1px 1px 2px #000;\r\n        color: #fff;\r\n        font: bold 42px Oswald, DejaVu Sans, Tahoma, sans-serif;\r\n    }\r\n\r\n    #div_DropZone h1 {\r\n        display: table-cell;\r\n        text-align: center;\r\n        vertical-align: middle;\r\n    }\r\n\r\n    /*#endregion*/\r\n\r\n    input[type=\"file\"] {\r\n        visibility: hidden;\r\n        position: fixed;\r\n        display: none;\r\n    }\r\n\r\n    /*#region Custom context menu*/\r\n    #div_ContextMenu {\r\n        width: auto;\r\n        -webkit-box-shadow: 0 4px 5px 3px rgba(0, 0, 0, 0.2);\r\n        box-shadow: 0 0px 10px -1px rgba(0, 0, 0, 0.2);\r\n        position: fixed;\r\n        display: none;\r\n        border-color: #ccc0 !important;\r\n        border-radius: 4px !important;\r\n    }\r\n\r\n    #div_ContextMenu #ul_ContextMenuOptions {\r\n        padding: 0;\r\n        list-style: none;\r\n        margin: 0px;\r\n    }\r\n\r\n    #div_ContextMenu .li_MenuOption {\r\n        font-weight: 500;\r\n        font-size: 12px;\r\n        padding: 10px 20px 10px 17px;\r\n        cursor: pointer;\r\n        border-bottom: 1px solid #eee;\r\n\r\n    }\r\n\r\n    #div_ContextMenu .li_MenuOption .menu-text {\r\n        margin-left: 10px;\r\n    }\r\n\r\n    #div_ContextMenu .li_MenuOption:hover {\r\n        background: rgb(237, 240, 244);\r\n    }\r\n\r\n    div#div_ContextMenu:before {\r\n        content: \"\";\r\n        background: transparent;\r\n        width: 20px;\r\n        height: 20px;\r\n        width: 0;\r\n        height: 0;\r\n        border-top: 10px solid white;\r\n        border-left: 10px solid transparent;\r\n        position: absolute;\r\n        left: -22px;\r\n        top: 13px;\r\n        /* box-shadow: 0 0px 11px -5px rgba(0, 0, 0, 0.9); */\r\n        border-top: 8px solid transparent;\r\n        border-right: 11px solid white;\r\n        border-bottom: 8px solid transparent;\r\n    }\r\n\r\n    #div_ContextMenu .li_MenuOption:last-child {\r\n        border: 0px;\r\n    }\r\n\r\n    /*#endregion*/\r\n\r\n    /*#region Custom Tooltip */\r\n    .custom-tooltip {\r\n        position: relative;\r\n        display: inline-block;\r\n    }\r\n\r\n    /* Tooltip text */\r\n    .custom-tooltip .custom-tooltiptext {\r\n        /*visibility: hidden;*/\r\n        /*default width:120px*/\r\n        width: auto;\r\n        /*background-color: black;*/\r\n        /*color: #fff;*/\r\n        /*text-align: center;*/\r\n        /*padding: 5px 12px;*/\r\n        /*border-radius: 6px;*/\r\n        /* Position the tooltip text */\r\n        /*position: absolute;*/\r\n        /*z-index: 1;*/\r\n        /*top: 6px;*/\r\n        /*right: 115%;*/\r\n        /*opacity: 0;*/\r\n        /*transition: opacity 0.5s;*/\r\n    }\r\n\r\n    /* Show the tooltip text when you mouse over the tooltip container */\r\n    .custom-tooltip:hover .custom-tooltiptext {\r\n        visibility: visible;\r\n        opacity: 1;\r\n        cursor: default;\r\n    }\r\n\r\n    .custom-tooltip .custom-tooltiptext::after {\r\n        /*content: \" \";*/\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 100%; /* point to the right of the tooltip */\r\n        margin-top: -5px;\r\n        border-width: 5px;\r\n        border-style: solid;\r\n        border-color: transparent transparent transparent black;\r\n    }\r\n\r\n    /*#endregion*/\r\n\r\n    /*#region Menu*/\r\n    /*.menu:hover .menu-item:not(.show-menu), .show-menu {\r\n        margin-top: 10px;\r\n        max-height: 232px;\r\n        overflow: visible;\r\n        opacity: 1;\r\n        transition: max-height 1s, opacity 1s;\r\n    }*/\r\n\r\n    .menu .menu-item:not(.show-menu) {\r\n        margin-top: 0px;\r\n        /* max-height: 0px; */\r\n        overflow: hidden;\r\n        opacity: 1;\r\n        -webkit-transition: max-height 1s, opacity 0.5s, margin-top 2.0s;\r\n        transition: max-height 1s, opacity 0.5s, margin-top 2.0s;\r\n        display: inline-block;\r\n        float: right;\r\n        margin: 0px;\r\n    }\r\n\r\n    .menu button {\r\n        width: 35px;\r\n        height: 35px;\r\n        display: block;\r\n        border-width: 1px 1px 1px 0px;\r\n        border-style: solid;\r\n        border-color: #cdd3d8;\r\n        padding: 6px;\r\n    }\r\n\r\n    .menu i {\r\n        font-size: 20px;\r\n    }\r\n\r\n    /*#endregion*/\r\n\r\n    .row #carousel2 {\r\n        margin: 0 auto !important;\r\n        width: 100%;\r\n    }\r\n\r\n    .div_ItemContainer {\r\n        padding: 0 15px;\r\n    }\r\n\r\n    .div_ItemContainer\r\n        /*#region On checkbox check transition*/\r\n    label {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .check {\r\n        -webkit-transform: scale(0.8);\r\n        -moz-transform: scale(0.8);\r\n        -ms-transform: scale(0.8);\r\n        -o-transform: scale(0.8);\r\n        transform: scale(0.8);\r\n        opacity: 0.5;\r\n        background-color: lightgray;\r\n        transition: all 0.3s;\r\n        /*border: 2px solid black;*/\r\n    }\r\n\r\n    .uncheck {\r\n        -webkit-transform: scale(1);\r\n        -moz-transform: scale(1);\r\n        -ms-transform: scale(1);\r\n        -o-transform: scale(1);\r\n        transform: scale(1);\r\n        opacity: 1;\r\n        background-color: revert;\r\n        transition: all 0.3s;\r\n    }\r\n\r\n    /*#endregion*/\r\n</style>\r\n<style>\r\n    #modal_PostComponents .modal-lg {\r\n        /*max-width: 95% !important;*/\r\n    }\r\n</style>"]}]}