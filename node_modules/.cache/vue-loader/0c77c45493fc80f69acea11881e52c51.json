{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\Post_Updates_Component.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\Post_Updates_Component.vue","mtime":1556559872499},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VueTagsInput from '@johmun/vue-tags-input';\nimport isImage from \"is-image\";\nimport DataSource from \"../data/datasource\";\nimport tagsComponent from \"./Post_Tags_Component\";\nimport $ from \"jquery\";\nimport {removeElementFromArray} from \"../helper/utily\";\n\nexport default {\n    name: \"updatesComponent\",\n    data() {\n        return {\n            PostID: \"\",\n            addPostContent: \"\",\n            tagClassID: \"\",\n            tagLevelID: \"\",\n            classesTable: [],\n            levelsTable: [],\n            tag: '',\n            tags: [],\n            selectedFile: [],\n            systemmsgError: false,\n            error: \"\",\n            results: \"\",\n            academicYearTable: [],\n            studentTable: [],\n            loading: false,\n            uploadedFiles: []\n        };\n    },\n    methods: {\n        sleep(milliseconds) {\n            return new Promise(resolve => setTimeout(resolve, milliseconds));\n        },\n        //return a promise that resolves with a File instance\n        urltoFile(url, filename, mimeType) {\n            return (fetch(url)\n                    .then(function (res) {\n                        return res.arrayBuffer();\n                    })\n                    .then(function (buf) {\n                        return new File([buf], filename, {type: mimeType});\n                    })\n            );\n        },\n        isNull(obj) {\n            return (obj === null || obj === undefined || obj === \"undefined\");\n        },\n        resetAll() {\n            this.clearPreview();\n            this.$emit(\"result\", \"CANCEL\");\n        },\n        init() {\n            DataSource.shared.getPostDropdown().then((tagResponse) => {\n                if (tagResponse.AcademicYearTable && tagResponse.AcademicYearTable.Table) {\n                    let uniqueYears = [];\n                    tagResponse.AcademicYearTable.Table.forEach(object => {\n                        const isExist = uniqueYears.find(year => year.SMT_Code === object.SMT_Code);\n                        if (!isExist) {\n                            uniqueYears.push(object);\n                        }\n                    });\n                    this.academicYearTable = uniqueYears;\n                }\n                if (tagResponse.ClassesTable && tagResponse.ClassesTable.Table) {\n                    let uniqueClass = [];\n                    tagResponse.ClassesTable.Table.forEach(object => {\n                        const isExist = uniqueClass.find(year => year.PK_Class_ID === object.PK_Class_ID);\n                        if (!isExist) {\n                            uniqueClass.push(object);\n                        }\n                    });\n                    this.classesTable = uniqueClass;\n                }\n                if (tagResponse.LevelsTable && tagResponse.LevelsTable.Table) {\n\n                    let uniqueLevel = [];\n                    tagResponse.LevelsTable.Table.forEach(object => {\n                        const isExist = uniqueLevel.find(level => level.SC_FK_CourseID === object.SC_FK_CourseID);\n                        if (!isExist) {\n                            uniqueLevel.push(object);\n                        }\n                    });\n\n                    this.levelsTable = uniqueLevel;\n                }\n                if (tagResponse.StudentTable && tagResponse.StudentTable.Table) {\n                    let uniqueStudent = [];\n                    tagResponse.StudentTable.Table.forEach(object => {\n                        const isExist = uniqueStudent.find(student => student.Student_ID === object.Student_ID);\n                        if (!isExist) {\n                            const selectedValue = {\n                                Student_ID: object.Student_ID,\n                                text: object.Full_Name,\n                                Sex: object.Sex,\n                                // email: object.email,\n                                Status: object.Status\n                            };\n                            uniqueStudent.push(selectedValue);\n                        }\n                    });\n                    // this.studentTable = tagResponse.StudentTable.Table;\n                    this.studentTable = uniqueStudent;\n                }\n            });\n        },\n        onFileChanged(event) {\n            // this.selectedFile = event.target.files;\n            for (let file of event.target.files) {\n                if (file.size > 10048576) {\n                    this.$notify.error({\n                        title: 'Error',\n                        message: 'File limit exceeded 10MB!'\n                    });\n                } else {\n                    this.selectedFile.push(file);\n                }\n            }\n            // if (this.selectedFile.size > 5048576) {\n            //     alert(\"File is too big!\");\n            //     this.selectedFile = \"\";\n            // }\n            this.getImagePreviews();\n        },\n        inputChange(input) {\n            this.postContent = input;\n        },\n        checkIfImage(file) {\n            const fileType = file.type.toLowerCase();\n            switch (fileType) {\n                case \"image/jpeg\":\n                case \"image/png\":\n                case \"image/jpg\":\n                    return true;\n                default:\n                    return false;\n            }\n        },\n        isImageByExt(obj_File) {\n            let ext = String(obj_File.PostItemFileExt).toUpperCase();\n            let isImage = false;\n\n            switch (ext) {\n                case \".PNG\":\n                case \".JPG\":\n                case \".BMP\":\n                case \".GIF\":\n                    isImage = true;\n                    break;\n                default:\n                    isImage = false;\n                    break;\n            }\n\n            return isImage;\n        },\n        successMsg() {\n\n        },\n        errorMsg() {\n\n        },\n        async onSubmit() {\n            this.error = \"\";\n            this.$vs.loading();\n            await this.sleep(500);\n            //this.results = \"<< Requesting.. >>\";\n            try {\n                /*const studentsIds = this.tags.map(d => d.Student_ID);*/\n\n\n                const saveResponse = await DataSource.shared.savePostUpdate(this.selectedFile, this.addPostContent, this.tags, this.tagClassID, this.tagLevelID, this.PostID);\n                if (saveResponse) {\n\n                    if (saveResponse.code == \"1\")\n                        this.$emit(\"result\", \"TRUE\");\n                    else\n                        this.$emit(\"result\", \"FALSE\");\n                    switch (saveResponse.code) {\n                        case \"1\":\n                            this.$emit(\"loadPosts\");\n                            this.isModalOpen = false;\n                            // reset all input filed to blank\n                            this.selectedFile = [];\n                            this.$refs.fileupload.value = \"\";\n                            this.addPostContent = \"\";\n                            this.tagAcademicYearID = null;\n\n                            this.tagLevelID = null;\n                            this.tagClassID = null;\n                            this.results = `Post Submitted`;\n                            // this.success = '';\n                            this.$notify({\n                                title: 'Success',\n                                message: 'Post Submitted, activity will be active in a while',\n                                type: 'success'\n                            });\n                            await DataSource.shared.softDeletePost(this.PostID);\n\n                            this.$vs.loading.close();\n                            break;\n                        case \"88\":\n                            this.$vs.loading.close();\n                            this.$notify.error({\n                                title: 'Error',\n                                message: 'Please Login to submit post'\n                            });\n                            this.systemmsgError = true;\n                            break;\n                        case \"99\":\n                            this.$vs.loading.close();\n                            this.$notify.error({\n                                title: 'Error',\n                                message: 'Please fill in content'\n                            });\n                            this.systemmsgError = true;\n                            break;\n                        // default:\n                        //     alert(\"Please try again later\");\n                        //     this.results = JSON.stringify(response);\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n                this.error = e;\n            }\n        },\n        getImagePreviews() {\n            /*\n              Iterate over all of the files and generate an image preview for each one.\n            */\n            for (let i = 0; i < this.selectedFile.length; i++) {\n                /*\n                  Ensure the file is an image file\n                */\n                if (/\\.(jpe?g|png|gif)$/i.test(this.selectedFile[i].name)) {\n                    /*\n                      Create a new FileReader object\n                    */\n                    let reader = new FileReader();\n\n                    /*\n                      Add an event listener for when the file has been loaded\n                      to update the src on the file preview.\n                    */\n                    reader.addEventListener(\"load\", function () {\n                        this.$refs['image' + parseInt(i)][0].src = reader.result;\n                    }.bind(this), false);\n\n                    /*\n                      Read the data for the file in through the reader. When it has\n                      been loaded, we listen to the event propagated and set the image\n                      src to what was loaded from the reader.\n                    */\n                    reader.readAsDataURL(this.selectedFile[i]);\n                }\n            }\n        },\n        clearPreview() {\n            $(\"#inputfile\").val(\"\");\n            this.selectedFile = [];\n        },\n        removePreviewImg(fileName) {\n\n            this.selectedFile = this.selectedFile.filter(d => {\n                return d.name !== fileName;\n            });\n\n            this.getImagePreviews()\n        },\n        setTags(value) {\n            this.tags = value;\n        },\n    },\n    mounted() {\n        this.init();\n\n        if (!this.isNull(this.post)) {\n            this.addPostContent = this.post.PostContent;\n            this.PostID = this.post.PostID;\n            /*this.selectedFile = ()=>{\n                let tempselectedFile = [];\n                for (let image of this.post.postFiles) {\n                    let url = \"data:\" + image.GalFileType + \";base64,\" + image.GalFileLow;\n                    let fileName = image.GalFileName + image.GalFileExt;\n                    let mimeType = image.GalFileType;\n                    this.urltoFile(url, fileName, mimeType).then((file) => {\n                        tempselectedFile.push(file)\n                    }).finally(() => {\n                        return tempselectedFile;\n                    });\n                }\n            };*/\n        }\n\n        if (!this.isNull(this.images)) {\n            this.selectedFile = [];\n            for (let image of this.images) {\n                let url = \"data:\" + image.GalFileType + \";base64,\" + image.GalFileLow;\n                let fileName = image.GalFileName + image.GalFileExt;\n                let mimeType = image.GalFileType;\n                this.urltoFile(url, fileName, mimeType).then((file) => {\n                    this.selectedFile.push(file);\n                }).finally(() => {\n                    this.getImagePreviews();\n                });\n            }\n        }\n    },\n    computed: {\n        items() {\n            return this.studentTable.filter(i => {\n                return i.text.toLowerCase().indexOf(this.tag.toLowerCase()) !== -1;\n            });\n        },\n    },\n    components: {\n        /*VueTagsInput,*/\n        tagsComponent\n    },\n    props: [\"images\", \"post\"],\n};\n",{"version":3,"sources":["Post_Updates_Component.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Post_Updates_Component.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div class=\"container-fluid\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-12\">\r\n                <form class=\"needs-validation form-style vs-con-loading__container\" novalidate\r\n                      @submit.prevent=\"onSubmit\" id=\"div-with-loading\">\r\n                    <div class=\"mb-3 form-group\">\r\n                        <!--<label for=\"username\">Username</label>-->\r\n                        <textarea type=\"text\" class=\"form-control\" id=\"postContent\" v-model=\"addPostContent\"\r\n                                  placeholder=\"CONTENT\"></textarea>\r\n                    </div>\r\n                    <!--<div class=\"row\">\r\n                        <div class=\"col-md-6 \">\r\n                            <label :for=\"tagClassID\">Class</label>\r\n                            <select class=\"form-control\" id=\"tagClassID\" v-model=\"tagClassID\">\r\n                                <option v-for=\"object in classesTable\" :key=\"object.PK_Class_ID\"\r\n                                        :value=\"object.PK_Class_ID\">{{object.CLS_ClassName}}\r\n                                </option>\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <label for=\"tagLevelID\">Level</label>\r\n                            <select class=\"form-control\" id=\"tagLevelID\" v-model=\"tagLevelID\">\r\n                                <option v-for=\"object in levelsTable\" :key=\"object.PK_Class_ID\"\r\n                                        :value=\"object.SC_FK_CourseID\">{{object.CRS_Course_Name}}\r\n                                </option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-12\">\r\n                            <label>Student</label>\r\n                            <vue-tags-input\r\n                                    v-model=\"tag\"\r\n                                    :tags=\"tags\"\r\n                                    :allow-edit-tags=\"true\"\r\n                                    :autocomplete-items=\"items\"\r\n                                    :add-only-from-autocomplete=\"true\"\r\n                                    :autocomplete-min-length=\"3\"\r\n                                    placeholder=\"Min 3 Character\"\r\n                                    class=\"tags-input\"\r\n                                    @tags-changed=\"newTags => tags = newTags\"\r\n                            />\r\n                        </div>\r\n                    </div>-->\r\n                    <tags-component @tags=\"setTags\" :parent_Post=\"post\"></tags-component>\r\n                    <div class=\"row inputFile-box\">\r\n                        <div class=\"col-md-12\">\r\n                            <input type=\"file\" multiple @change=\"onFileChanged\" ref=\"fileupload\" class=\"inputfile\"\r\n                                   id=\"inputfile\"\r\n                                   data-multiple-caption=\"{count} files selected\">\r\n                            <label for=\"inputfile\">Choose a file</label>\r\n\r\n                            <div class=\"btn btn-primary\" v-if=\"selectedFile\" @click=\"clearPreview()\"><strong>X</strong>\r\n                                REMOVE ALL\r\n                            </div>\r\n                            <div class=\"uploadFile-image\">\r\n                                <div v-for=\"(file, key) in selectedFile\" class=\"col-md-3 file-listing\"\r\n                                     :key=\"(file, key).id\"\r\n                                     v-if=\"checkIfImage(file)\">\r\n                                    <img class=\"preview\" v-bind:ref=\"'image'+parseInt( key )\"/>\r\n                                    <span @click=\"removePreviewImg(file.name)\" class=\"clearFile-single\"><i class=\"el-icon-error\"></i></span>\r\n                                </div>\r\n                                <div v-for=\"(file, key) in selectedFile\" class=\"col-md-3 file-listing nonimg-uploadFile\"\r\n                                     :key=\"(file, key).id\"\r\n                                     v-if=\"!checkIfImage(file)\">\r\n                                    <i class=\"el-icon-tickets\"></i> {{ file.name }}\r\n                                    <span @click=\"removePreviewImg(file)\" class=\"clearFile-single\"><i class=\"el-icon-error\"></i> </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mb-2\">\r\n\r\n                    </div>\r\n                    <!--<div class=\"system-msg\" v-bind:class=\"{'bg-danger': systemmsgError===true}\">{{results}}-->\r\n                    <!--<p v-if=\"error\" style=\"color: red\">{{error}}</p></div>-->\r\n                    <div class=\"row d-flex  form-footer\">\r\n                        <div class=\"col-md-6\">\r\n                            <b-btn @click=\"resetAll\" class=\"float-left btn-secondary\">Cancel</b-btn>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <button class=\"btn btn-primary \" type=\"submit\">Submit\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import VueTagsInput from '@johmun/vue-tags-input';\r\n    import isImage from \"is-image\";\r\n    import DataSource from \"../data/datasource\";\r\n    import tagsComponent from \"./Post_Tags_Component\";\r\n    import $ from \"jquery\";\r\n    import {removeElementFromArray} from \"../helper/utily\";\r\n\r\n    export default {\r\n        name: \"updatesComponent\",\r\n        data() {\r\n            return {\r\n                PostID: \"\",\r\n                addPostContent: \"\",\r\n                tagClassID: \"\",\r\n                tagLevelID: \"\",\r\n                classesTable: [],\r\n                levelsTable: [],\r\n                tag: '',\r\n                tags: [],\r\n                selectedFile: [],\r\n                systemmsgError: false,\r\n                error: \"\",\r\n                results: \"\",\r\n                academicYearTable: [],\r\n                studentTable: [],\r\n                loading: false,\r\n                uploadedFiles: []\r\n            };\r\n        },\r\n        methods: {\r\n            sleep(milliseconds) {\r\n                return new Promise(resolve => setTimeout(resolve, milliseconds));\r\n            },\r\n            //return a promise that resolves with a File instance\r\n            urltoFile(url, filename, mimeType) {\r\n                return (fetch(url)\r\n                        .then(function (res) {\r\n                            return res.arrayBuffer();\r\n                        })\r\n                        .then(function (buf) {\r\n                            return new File([buf], filename, {type: mimeType});\r\n                        })\r\n                );\r\n            },\r\n            isNull(obj) {\r\n                return (obj === null || obj === undefined || obj === \"undefined\");\r\n            },\r\n            resetAll() {\r\n                this.clearPreview();\r\n                this.$emit(\"result\", \"CANCEL\");\r\n            },\r\n            init() {\r\n                DataSource.shared.getPostDropdown().then((tagResponse) => {\r\n                    if (tagResponse.AcademicYearTable && tagResponse.AcademicYearTable.Table) {\r\n                        let uniqueYears = [];\r\n                        tagResponse.AcademicYearTable.Table.forEach(object => {\r\n                            const isExist = uniqueYears.find(year => year.SMT_Code === object.SMT_Code);\r\n                            if (!isExist) {\r\n                                uniqueYears.push(object);\r\n                            }\r\n                        });\r\n                        this.academicYearTable = uniqueYears;\r\n                    }\r\n                    if (tagResponse.ClassesTable && tagResponse.ClassesTable.Table) {\r\n                        let uniqueClass = [];\r\n                        tagResponse.ClassesTable.Table.forEach(object => {\r\n                            const isExist = uniqueClass.find(year => year.PK_Class_ID === object.PK_Class_ID);\r\n                            if (!isExist) {\r\n                                uniqueClass.push(object);\r\n                            }\r\n                        });\r\n                        this.classesTable = uniqueClass;\r\n                    }\r\n                    if (tagResponse.LevelsTable && tagResponse.LevelsTable.Table) {\r\n\r\n                        let uniqueLevel = [];\r\n                        tagResponse.LevelsTable.Table.forEach(object => {\r\n                            const isExist = uniqueLevel.find(level => level.SC_FK_CourseID === object.SC_FK_CourseID);\r\n                            if (!isExist) {\r\n                                uniqueLevel.push(object);\r\n                            }\r\n                        });\r\n\r\n                        this.levelsTable = uniqueLevel;\r\n                    }\r\n                    if (tagResponse.StudentTable && tagResponse.StudentTable.Table) {\r\n                        let uniqueStudent = [];\r\n                        tagResponse.StudentTable.Table.forEach(object => {\r\n                            const isExist = uniqueStudent.find(student => student.Student_ID === object.Student_ID);\r\n                            if (!isExist) {\r\n                                const selectedValue = {\r\n                                    Student_ID: object.Student_ID,\r\n                                    text: object.Full_Name,\r\n                                    Sex: object.Sex,\r\n                                    // email: object.email,\r\n                                    Status: object.Status\r\n                                };\r\n                                uniqueStudent.push(selectedValue);\r\n                            }\r\n                        });\r\n                        // this.studentTable = tagResponse.StudentTable.Table;\r\n                        this.studentTable = uniqueStudent;\r\n                    }\r\n                });\r\n            },\r\n            onFileChanged(event) {\r\n                // this.selectedFile = event.target.files;\r\n                for (let file of event.target.files) {\r\n                    if (file.size > 10048576) {\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'File limit exceeded 10MB!'\r\n                        });\r\n                    } else {\r\n                        this.selectedFile.push(file);\r\n                    }\r\n                }\r\n                // if (this.selectedFile.size > 5048576) {\r\n                //     alert(\"File is too big!\");\r\n                //     this.selectedFile = \"\";\r\n                // }\r\n                this.getImagePreviews();\r\n            },\r\n            inputChange(input) {\r\n                this.postContent = input;\r\n            },\r\n            checkIfImage(file) {\r\n                const fileType = file.type.toLowerCase();\r\n                switch (fileType) {\r\n                    case \"image/jpeg\":\r\n                    case \"image/png\":\r\n                    case \"image/jpg\":\r\n                        return true;\r\n                    default:\r\n                        return false;\r\n                }\r\n            },\r\n            isImageByExt(obj_File) {\r\n                let ext = String(obj_File.PostItemFileExt).toUpperCase();\r\n                let isImage = false;\r\n\r\n                switch (ext) {\r\n                    case \".PNG\":\r\n                    case \".JPG\":\r\n                    case \".BMP\":\r\n                    case \".GIF\":\r\n                        isImage = true;\r\n                        break;\r\n                    default:\r\n                        isImage = false;\r\n                        break;\r\n                }\r\n\r\n                return isImage;\r\n            },\r\n            successMsg() {\r\n\r\n            },\r\n            errorMsg() {\r\n\r\n            },\r\n            async onSubmit() {\r\n                this.error = \"\";\r\n                this.$vs.loading();\r\n                await this.sleep(500);\r\n                //this.results = \"<< Requesting.. >>\";\r\n                try {\r\n                    /*const studentsIds = this.tags.map(d => d.Student_ID);*/\r\n\r\n\r\n                    const saveResponse = await DataSource.shared.savePostUpdate(this.selectedFile, this.addPostContent, this.tags, this.tagClassID, this.tagLevelID, this.PostID);\r\n                    if (saveResponse) {\r\n\r\n                        if (saveResponse.code == \"1\")\r\n                            this.$emit(\"result\", \"TRUE\");\r\n                        else\r\n                            this.$emit(\"result\", \"FALSE\");\r\n                        switch (saveResponse.code) {\r\n                            case \"1\":\r\n                                this.$emit(\"loadPosts\");\r\n                                this.isModalOpen = false;\r\n                                // reset all input filed to blank\r\n                                this.selectedFile = [];\r\n                                this.$refs.fileupload.value = \"\";\r\n                                this.addPostContent = \"\";\r\n                                this.tagAcademicYearID = null;\r\n\r\n                                this.tagLevelID = null;\r\n                                this.tagClassID = null;\r\n                                this.results = `Post Submitted`;\r\n                                // this.success = '';\r\n                                this.$notify({\r\n                                    title: 'Success',\r\n                                    message: 'Post Submitted, activity will be active in a while',\r\n                                    type: 'success'\r\n                                });\r\n                                await DataSource.shared.softDeletePost(this.PostID);\r\n\r\n                                this.$vs.loading.close();\r\n                                break;\r\n                            case \"88\":\r\n                                this.$vs.loading.close();\r\n                                this.$notify.error({\r\n                                    title: 'Error',\r\n                                    message: 'Please Login to submit post'\r\n                                });\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            case \"99\":\r\n                                this.$vs.loading.close();\r\n                                this.$notify.error({\r\n                                    title: 'Error',\r\n                                    message: 'Please fill in content'\r\n                                });\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            // default:\r\n                            //     alert(\"Please try again later\");\r\n                            //     this.results = JSON.stringify(response);\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.log(e);\r\n                    this.error = e;\r\n                }\r\n            },\r\n            getImagePreviews() {\r\n                /*\r\n                  Iterate over all of the files and generate an image preview for each one.\r\n                */\r\n                for (let i = 0; i < this.selectedFile.length; i++) {\r\n                    /*\r\n                      Ensure the file is an image file\r\n                    */\r\n                    if (/\\.(jpe?g|png|gif)$/i.test(this.selectedFile[i].name)) {\r\n                        /*\r\n                          Create a new FileReader object\r\n                        */\r\n                        let reader = new FileReader();\r\n\r\n                        /*\r\n                          Add an event listener for when the file has been loaded\r\n                          to update the src on the file preview.\r\n                        */\r\n                        reader.addEventListener(\"load\", function () {\r\n                            this.$refs['image' + parseInt(i)][0].src = reader.result;\r\n                        }.bind(this), false);\r\n\r\n                        /*\r\n                          Read the data for the file in through the reader. When it has\r\n                          been loaded, we listen to the event propagated and set the image\r\n                          src to what was loaded from the reader.\r\n                        */\r\n                        reader.readAsDataURL(this.selectedFile[i]);\r\n                    }\r\n                }\r\n            },\r\n            clearPreview() {\r\n                $(\"#inputfile\").val(\"\");\r\n                this.selectedFile = [];\r\n            },\r\n            removePreviewImg(fileName) {\r\n\r\n                this.selectedFile = this.selectedFile.filter(d => {\r\n                    return d.name !== fileName;\r\n                });\r\n\r\n                this.getImagePreviews()\r\n            },\r\n            setTags(value) {\r\n                this.tags = value;\r\n            },\r\n        },\r\n        mounted() {\r\n            this.init();\r\n\r\n            if (!this.isNull(this.post)) {\r\n                this.addPostContent = this.post.PostContent;\r\n                this.PostID = this.post.PostID;\r\n                /*this.selectedFile = ()=>{\r\n                    let tempselectedFile = [];\r\n                    for (let image of this.post.postFiles) {\r\n                        let url = \"data:\" + image.GalFileType + \";base64,\" + image.GalFileLow;\r\n                        let fileName = image.GalFileName + image.GalFileExt;\r\n                        let mimeType = image.GalFileType;\r\n                        this.urltoFile(url, fileName, mimeType).then((file) => {\r\n                            tempselectedFile.push(file)\r\n                        }).finally(() => {\r\n                            return tempselectedFile;\r\n                        });\r\n                    }\r\n                };*/\r\n            }\r\n\r\n            if (!this.isNull(this.images)) {\r\n                this.selectedFile = [];\r\n                for (let image of this.images) {\r\n                    let url = \"data:\" + image.GalFileType + \";base64,\" + image.GalFileLow;\r\n                    let fileName = image.GalFileName + image.GalFileExt;\r\n                    let mimeType = image.GalFileType;\r\n                    this.urltoFile(url, fileName, mimeType).then((file) => {\r\n                        this.selectedFile.push(file);\r\n                    }).finally(() => {\r\n                        this.getImagePreviews();\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        computed: {\r\n            items() {\r\n                return this.studentTable.filter(i => {\r\n                    return i.text.toLowerCase().indexOf(this.tag.toLowerCase()) !== -1;\r\n                });\r\n            },\r\n        },\r\n        components: {\r\n            /*VueTagsInput,*/\r\n            tagsComponent\r\n        },\r\n        props: [\"images\", \"post\"],\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}