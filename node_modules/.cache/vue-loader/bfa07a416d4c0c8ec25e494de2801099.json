{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\StudentEditLevel.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\StudentEditLevel.vue","mtime":1550255386258},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DataSource from \"../data/datasource\";\n\nexport default {\n    name: \"StudentEditLevel\",\n    async created() {\n        this.lblStudentID = this.$route.query.id;\n        await this.BindStudentInfo();\n        //await this.BindStudentLevel();\n        await this.BindAcademicYear();\n        await this.BindStudentIntakeYear();\n    },\n    async mounted() {\n        await this.GetStudentLevelList();\n    },\n    data() {\n        return {\n            levelList: [],\n            academicYearList: [],\n            studentIntakeYearList: [],\n\n            lblStudentID: '',\n            lblStudentName: '',\n            lblStudentStatus: '',\n\n            list: [],\n            studentLevelList: [{\n                prop: \"CRS_Course_Name\",\n                label: \"Level\",\n            }, {\n                prop: \"SCH_Short_Name\",\n                label: \"School Name\"\n            }, {\n                prop: \"SMT_Code\",\n                label: \"Academic Year Code\"\n            }, {\n                prop: \"SCRS_From_Date_convert\",\n                label: \"Level Start Date\"\n            }, {\n                prop: \"SCRS_To_Date_convert\",\n                label: \"Level End Date\"\n            }, {\n                prop: \"SCRS_Status\",\n                label: \"Status\"\n            }],\n            actionCol: {\n                label: 'Class',\n                props: {\n                    align: 'center',\n                },\n                buttons: [{\n                    props: {\n                        type: 'primary',\n                        icon: 'el-icon-edit'\n                    },\n                    handler: row => {\n                        window.location.replace('/student-edit-class?courseid=' + row.PK_Student_Course_ID + '&id=' + this.lblStudentID + '&semid=' + row.PK_Semester_ID + '&subjectcourseid=' + row.SCRS_FK_Course_ID);\n                    },\n                    label: 'Class'\n                }]\n            },\n            selectedRow: null,\n        };\n    },\n    methods: {\n        backToPrevious(){\n            window.location.replace(\"/student-list?mode=Course\");\n        },\n        handleSelectionChange(val) {\n            this.selectedRow = val;\n        },\n        async BindStudentInfo() {\n            try {\n                const response = await DataSource.shared.getStudent(this.lblStudentID, '', '', '', '');\n                if (response) {\n                    this.studentInfoResponse = response.Table;\n                    this.studentInfoResponse.forEach(m => {\n                        this.lblStudentName = m.Full_Name + ' ' + m.Last_name;\n                        this.lblStudentStatus = m.Status;\n                    });\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async BindStudentLevel(customLevelNotEqual) {\n            try {\n                const response = await DataSource.shared.getLevel(customLevelNotEqual);\n                if (response) {\n                    this.levelListResponse = response.Table;\n                    this.levelListResponse.forEach(m => {\n                        this.levelList.push(m);\n                    });\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async BindAcademicYear() {\n            try {\n                const response = await DataSource.shared.getAcademicYear();\n                if (response) {\n                    this.academicYearListResponse = response.Table;\n                    this.academicYearListResponse.forEach(m => {\n                        this.academicYearList.push(m);\n                    });\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async BindStudentIntakeYear() {\n            try {\n                const response = await DataSource.shared.getIntakeYear();\n                if (response) {\n                    this.studentIntakeYearListResponse = response.Table;\n                    this.studentIntakeYearListResponse.forEach(m => {\n                        this.studentIntakeYearList.push(m);\n                    });\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async GetStudentLevelList() {\n            this.$vs.loading();\n            try {\n                const response = await DataSource.shared.getStudentLevel(this.lblStudentID);\n                if (response) {\n                    if (response.code == 2) {\n                        alert('No record found');\n                    } else if (response.code == 99) {\n                        alert('Please try again later');\n                    } else {\n                        this.list = response.Table;\n\n                        //filter the added level to BindStudentLevel\n                        let customLevelNotEqual = '';\n                        this.GetStudentLevelListResponse = response.Table;\n                        this.GetStudentLevelListResponse.forEach(m => {\n                            if (customLevelNotEqual == '') {\n                                customLevelNotEqual = m.PK_Course_ID;\n                            } else {\n                                customLevelNotEqual = customLevelNotEqual + \",\" + m.PK_Course_ID;\n                            }\n                        });\n\n                        this.BindStudentLevel(customLevelNotEqual);\n                        //filter the added level to BindStudentLevel\n\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n            this.$vs.loading.close();\n        },\n        studentLevelListActivate(row) {\n            return [{\n                name: 'Activate',\n                handler: _ => {\n                    this.updateLevel(row.PK_Student_Course_ID, \"Activate\");\n                }\n            }];\n        },\n        studentLevelListDeactivate(row) {\n            return [{\n                name: 'Deactivate',\n                handler: _ => {\n                    this.updateLevel(row.PK_Student_Course_ID, \"Deactivate\");\n                }\n            }];\n        },\n        async updateLevel(courseID, mode) {\n            try {\n                const response = await DataSource.shared.updateLevel(this.lblStudentID, courseID, mode);\n                if (response) {\n                    if (response.code == 1) {\n                        alert('Edit Successfully!');\n                        window.location.replace('/student-edit-level?id=' + this.lblStudentID);\n                    } else if (response.code == 2) {\n                        alert('Cannot have multiple active level');\n                    } else {\n                        alert('Error! Please try again later.');\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async AddLevel() {\n            try {\n                if (this.lblStudentID != \"\" && this.$refs.ddlStudentSelectLevel.value != \"\" && this.$refs.ddlStudentFirstAcademicYear.value != \"\" && this.$refs.ddlStudentIntakeYear.value != \"\") {\n                    const getAcaYearRes = await DataSource.shared.getAcademicYearDateRange(this.$refs.ddlStudentFirstAcademicYear.value);\n\n                    if (getAcaYearRes) {\n                        if (getAcaYearRes.code == \"99\") {\n                            alert('Get Academic Year Error - Please try again later');\n                        } else {\n                            let academicYearFromDate, academicYearToDate;\n\n                            this.getAcaYearResTemp = getAcaYearRes.Table;\n                            this.getAcaYearResTemp.forEach(m => {\n                                academicYearFromDate = m.SMT_From;\n                                academicYearToDate = m.SMT_To;\n                            });\n\n                            const getSetLvlRes = await DataSource.shared.setLevel(this.lblStudentID, this.$refs.ddlStudentSelectLevel.value, academicYearFromDate, academicYearToDate, this.$refs.ddlStudentFirstAcademicYear.value, this.$refs.ddlStudentIntakeYear.value);\n\n                            if (getSetLvlRes) {\n                                if (getSetLvlRes.code == \"1\") {\n                                    alert('Records Successfully Saved');\n                                    window.location.replace('/student-edit-level?id=' + this.lblStudentID);\n                                } else if (getSetLvlRes.code == \"2\") {\n                                    alert('cannot have multiple active level');\n                                } else {\n                                    alert('Save Student Level Error - Please try again later');\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    alert('Please fill in all the information');\n                }\n\n            } catch (e) {\n                this.results = e;\n            }\n        },\n    },\n};\n",{"version":3,"sources":["StudentEditLevel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"StudentEditLevel.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n    <div id=\"student-edit-level\" >\r\n        <div class=\"datatable-edit__header\">\r\n            <div class=\"container\">\r\n                <h3>Student Level</h3>\r\n                <a href=\"StudentList.vue\">Student List</a> > Student Level\r\n            </div>\r\n        </div>\r\n        <div class=\"mt-3 container\">\r\n        <label style=\"display:none !important;\">{{lblStudentID}}</label>\r\n        <div class=\"form-wrap\">\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label class=\"withoutInput\">Student Name: {{lblStudentName}}</label>\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label class=\"withoutInput\">Student Status: {{lblStudentStatus}}</label>\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Select Level</label>\r\n                    <select ref=\"ddlStudentSelectLevel\" class=\"form-control pro-edt-select form-control-primary\">\r\n                        <option v-for=\"item in levelList\" v-bind:value=\"item.PK_Course_ID.trim()\">{{\r\n                            item.CRS_Course_Name.trim() }}\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>First Academic Year</label>\r\n                    <select ref=\"ddlStudentFirstAcademicYear\"\r\n                            class=\"form-control pro-edt-select form-control-primary\">\r\n                        <option v-for=\"item in academicYearList\" v-bind:value=\"item.PK_Semester_ID.trim()\">{{\r\n                            item.SMT_Code.trim() }}\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Intake Year</label>\r\n                    <select ref=\"ddlStudentIntakeYear\" class=\"form-control pro-edt-select form-control-primary\">\r\n                        <option v-for=\"item in studentIntakeYearList\" v-bind:value=\"item.PK_PAI_ID.trim()\">{{\r\n                            item.PAI_Intake_No.trim() }}\r\n                        </option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12 buttonArea\">\r\n                    <button class=\"btn btn-primary waves-effect waves-light m-r-10\" v-on:click=\"AddLevel\">Add\r\n                        Level\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <div v-if=\"list.length>0\">\r\n                <data-tables :data=\"list\" :actionCol=\"actionCol\" @selection-change=\"handleSelectionChange\">\r\n                    <el-table-column v-for=\"studentLevelListInfo in studentLevelList\"\r\n                                     :prop=\"studentLevelListInfo.prop\" :label=\"studentLevelListInfo.label\"\r\n                                     :key=\"studentLevelListInfo.prop\"\r\n                                     sortable=\"custom\">\r\n                    </el-table-column>\r\n\r\n                    <el-table-column label=\"Activate\" min-width=\"100px\">\r\n                        <template slot-scope=\"scope\">\r\n                            <el-button v-for=\"studentLevelListActivateButton in studentLevelListActivate(scope.row)\"\r\n                                       :key=\"studentLevelListActivateButton.name\" type=\"primary\"\r\n                                       @click=\"studentLevelListActivateButton.handler\">\r\n                                {{studentLevelListActivateButton.name}}\r\n                            </el-button>\r\n                        </template>\r\n                    </el-table-column>\r\n\r\n                    <el-table-column label=\"Deactivate\" min-width=\"100px\">\r\n                        <template slot-scope=\"scope\">\r\n                            <el-button\r\n                                    v-for=\"studentLevelListDeactivateButton in studentLevelListDeactivate(scope.row)\"\r\n                                    :key=\"studentLevelListDeactivateButton.name\" type=\"primary\"\r\n                                    @click=\"studentLevelListDeactivateButton.handler\">\r\n                                {{studentLevelListDeactivateButton.name}}\r\n                            </el-button>\r\n                        </template>\r\n                    </el-table-column>\r\n\r\n                </data-tables>\r\n            </div>\r\n        </div>\r\n            <div class=\"pt-2\">\r\n                <button v-on:click=\"backToPrevious\" type=\"button\"\r\n                        class=\"btn btn-primary waves-effect waves-light m-r-10 mr-auto \">Cancel\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import DataSource from \"../data/datasource\";\r\n\r\n    export default {\r\n        name: \"StudentEditLevel\",\r\n        async created() {\r\n            this.lblStudentID = this.$route.query.id;\r\n            await this.BindStudentInfo();\r\n            //await this.BindStudentLevel();\r\n            await this.BindAcademicYear();\r\n            await this.BindStudentIntakeYear();\r\n        },\r\n        async mounted() {\r\n            await this.GetStudentLevelList();\r\n        },\r\n        data() {\r\n            return {\r\n                levelList: [],\r\n                academicYearList: [],\r\n                studentIntakeYearList: [],\r\n\r\n                lblStudentID: '',\r\n                lblStudentName: '',\r\n                lblStudentStatus: '',\r\n\r\n                list: [],\r\n                studentLevelList: [{\r\n                    prop: \"CRS_Course_Name\",\r\n                    label: \"Level\",\r\n                }, {\r\n                    prop: \"SCH_Short_Name\",\r\n                    label: \"School Name\"\r\n                }, {\r\n                    prop: \"SMT_Code\",\r\n                    label: \"Academic Year Code\"\r\n                }, {\r\n                    prop: \"SCRS_From_Date_convert\",\r\n                    label: \"Level Start Date\"\r\n                }, {\r\n                    prop: \"SCRS_To_Date_convert\",\r\n                    label: \"Level End Date\"\r\n                }, {\r\n                    prop: \"SCRS_Status\",\r\n                    label: \"Status\"\r\n                }],\r\n                actionCol: {\r\n                    label: 'Class',\r\n                    props: {\r\n                        align: 'center',\r\n                    },\r\n                    buttons: [{\r\n                        props: {\r\n                            type: 'primary',\r\n                            icon: 'el-icon-edit'\r\n                        },\r\n                        handler: row => {\r\n                            window.location.replace('/student-edit-class?courseid=' + row.PK_Student_Course_ID + '&id=' + this.lblStudentID + '&semid=' + row.PK_Semester_ID + '&subjectcourseid=' + row.SCRS_FK_Course_ID);\r\n                        },\r\n                        label: 'Class'\r\n                    }]\r\n                },\r\n                selectedRow: null,\r\n            };\r\n        },\r\n        methods: {\r\n            backToPrevious(){\r\n                window.location.replace(\"/student-list?mode=Course\");\r\n            },\r\n            handleSelectionChange(val) {\r\n                this.selectedRow = val;\r\n            },\r\n            async BindStudentInfo() {\r\n                try {\r\n                    const response = await DataSource.shared.getStudent(this.lblStudentID, '', '', '', '');\r\n                    if (response) {\r\n                        this.studentInfoResponse = response.Table;\r\n                        this.studentInfoResponse.forEach(m => {\r\n                            this.lblStudentName = m.Full_Name + ' ' + m.Last_name;\r\n                            this.lblStudentStatus = m.Status;\r\n                        });\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async BindStudentLevel(customLevelNotEqual) {\r\n                try {\r\n                    const response = await DataSource.shared.getLevel(customLevelNotEqual);\r\n                    if (response) {\r\n                        this.levelListResponse = response.Table;\r\n                        this.levelListResponse.forEach(m => {\r\n                            this.levelList.push(m);\r\n                        });\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async BindAcademicYear() {\r\n                try {\r\n                    const response = await DataSource.shared.getAcademicYear();\r\n                    if (response) {\r\n                        this.academicYearListResponse = response.Table;\r\n                        this.academicYearListResponse.forEach(m => {\r\n                            this.academicYearList.push(m);\r\n                        });\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async BindStudentIntakeYear() {\r\n                try {\r\n                    const response = await DataSource.shared.getIntakeYear();\r\n                    if (response) {\r\n                        this.studentIntakeYearListResponse = response.Table;\r\n                        this.studentIntakeYearListResponse.forEach(m => {\r\n                            this.studentIntakeYearList.push(m);\r\n                        });\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async GetStudentLevelList() {\r\n                this.$vs.loading();\r\n                try {\r\n                    const response = await DataSource.shared.getStudentLevel(this.lblStudentID);\r\n                    if (response) {\r\n                        if (response.code == 2) {\r\n                            alert('No record found');\r\n                        } else if (response.code == 99) {\r\n                            alert('Please try again later');\r\n                        } else {\r\n                            this.list = response.Table;\r\n\r\n                            //filter the added level to BindStudentLevel\r\n                            let customLevelNotEqual = '';\r\n                            this.GetStudentLevelListResponse = response.Table;\r\n                            this.GetStudentLevelListResponse.forEach(m => {\r\n                                if (customLevelNotEqual == '') {\r\n                                    customLevelNotEqual = m.PK_Course_ID;\r\n                                } else {\r\n                                    customLevelNotEqual = customLevelNotEqual + \",\" + m.PK_Course_ID;\r\n                                }\r\n                            });\r\n\r\n                            this.BindStudentLevel(customLevelNotEqual);\r\n                            //filter the added level to BindStudentLevel\r\n\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n                this.$vs.loading.close();\r\n            },\r\n            studentLevelListActivate(row) {\r\n                return [{\r\n                    name: 'Activate',\r\n                    handler: _ => {\r\n                        this.updateLevel(row.PK_Student_Course_ID, \"Activate\");\r\n                    }\r\n                }];\r\n            },\r\n            studentLevelListDeactivate(row) {\r\n                return [{\r\n                    name: 'Deactivate',\r\n                    handler: _ => {\r\n                        this.updateLevel(row.PK_Student_Course_ID, \"Deactivate\");\r\n                    }\r\n                }];\r\n            },\r\n            async updateLevel(courseID, mode) {\r\n                try {\r\n                    const response = await DataSource.shared.updateLevel(this.lblStudentID, courseID, mode);\r\n                    if (response) {\r\n                        if (response.code == 1) {\r\n                            alert('Edit Successfully!');\r\n                            window.location.replace('/student-edit-level?id=' + this.lblStudentID);\r\n                        } else if (response.code == 2) {\r\n                            alert('Cannot have multiple active level');\r\n                        } else {\r\n                            alert('Error! Please try again later.');\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async AddLevel() {\r\n                try {\r\n                    if (this.lblStudentID != \"\" && this.$refs.ddlStudentSelectLevel.value != \"\" && this.$refs.ddlStudentFirstAcademicYear.value != \"\" && this.$refs.ddlStudentIntakeYear.value != \"\") {\r\n                        const getAcaYearRes = await DataSource.shared.getAcademicYearDateRange(this.$refs.ddlStudentFirstAcademicYear.value);\r\n\r\n                        if (getAcaYearRes) {\r\n                            if (getAcaYearRes.code == \"99\") {\r\n                                alert('Get Academic Year Error - Please try again later');\r\n                            } else {\r\n                                let academicYearFromDate, academicYearToDate;\r\n\r\n                                this.getAcaYearResTemp = getAcaYearRes.Table;\r\n                                this.getAcaYearResTemp.forEach(m => {\r\n                                    academicYearFromDate = m.SMT_From;\r\n                                    academicYearToDate = m.SMT_To;\r\n                                });\r\n\r\n                                const getSetLvlRes = await DataSource.shared.setLevel(this.lblStudentID, this.$refs.ddlStudentSelectLevel.value, academicYearFromDate, academicYearToDate, this.$refs.ddlStudentFirstAcademicYear.value, this.$refs.ddlStudentIntakeYear.value);\r\n\r\n                                if (getSetLvlRes) {\r\n                                    if (getSetLvlRes.code == \"1\") {\r\n                                        alert('Records Successfully Saved');\r\n                                        window.location.replace('/student-edit-level?id=' + this.lblStudentID);\r\n                                    } else if (getSetLvlRes.code == \"2\") {\r\n                                        alert('cannot have multiple active level');\r\n                                    } else {\r\n                                        alert('Save Student Level Error - Please try again later');\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        alert('Please fill in all the information');\r\n                    }\r\n\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n        },\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n    .buttonArea button {\r\n        display: inline;\r\n    }\r\n</style>"]}]}