{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\PendingPost.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\PendingPost.vue","mtime":1555250088323},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DataSource from \"../data/datasource\";\n\nexport default {\n    name: 'PendingPost',\n    data() {\n        return {\n            error: null,\n            selectedRows: [],\n            isModalOpen: false,\n            list: [],\n            currentFiles: [],\n            fileRes: \"\",\n            postID: \"\",\n            titles: [{\n                prop: \"ID\",\n                label: \"ID\"\n            }, {\n                prop: \"PostID\",\n                label: \"Post ID\"\n            }, {\n                prop: \"PostCreatedDate\",\n                label: \"Created At\"\n            }, {\n                prop: \"PostStatus\",\n                label: \"Post Status\"\n            }],\n            actionCol: {\n                label: '',\n                class: 'actions',\n                props: {\n                    align: 'center',\n                },\n                buttons: [{\n                    props: {\n                        type: 'text',\n                        // icon: 'el-icon-edit'\n                    },\n                    handler: async row => {\n                        try {\n                            // console.log(\"clicked row data: \", row);\n                            // this will call when modal open right?\n                            // await this.getPostFile();\n\n\n                            // call approve post api\n                            const response = await DataSource.shared.approvePost(row.PostApproverID, \"Approved\");\n                            // console.log('approve response: ', response);\n\n                            // update pending post view on success\n                            if (response && response.code===\"1\"){\n                                this.getPendingPost();\n\n\n                            }\n                        } catch (error) {\n                            // log error\n                            console.log(error);\n                        }\n\n                    },\n                    label: 'Approve'\n                }, {\n                    props: {\n                        type: 'text',\n                        icon: 'el-icon-edit'\n                    },\n                    handler: async row => {\n                        // console.log(row, ' ss');\n                        try {\n\n                            const fileRes = await DataSource.shared.getPostFile(row.PostID);\n                            // console.log(fileRes);\n                            if (fileRes.Table) {\n                                this.currentFiles = fileRes.Table;\n                            } else {\n                                this.currentFiles = null;\n                            }\n\n                            this.isModalOpen = true;\n                            this.postID = row.PostID;\n                            this.UpdateContent = row.PostContent;\n                            this.profolio = row.PostProfolio;\n                            this.tagUserID = row.tagUserID;\n                            this.PostSchoolID = row.PostSchoolID;\n                            this.PostCreatedDate = row.PostCreatedDate;\n                            this.PostCreatedBy = row.PostCreatedBy;\n                        } catch (error) {\n                            // log error\n                            console.log(error);\n                        }\n\n                    },\n                    label: ''\n                }\n                ]\n            },\n            tableProps: {\n                defaultSort: {\n                    prop: 'PostID',\n                    order: 'descending'\n                }\n            },\n            selectedRow: null,\n            results: null,\n            actionStatus: \"\",\n            UpdateContent: \"\",\n            profolio: \"\",\n            PostSchoolID: \"\",\n            PostCreatedDate: \"\",\n            PostCreatedBy: \"\",\n            systemmsgError: false,\n            tagLevelID: \"\",\n            tagUserID: \"\",\n            tagClassID: \"\",\n            PostItemPath: \"\",\n            showDeleteModal: false,\n            showConfirmModal: false,\n        };\n    },\n    methods: {\n        handleImageRemove(fileId) {\n            // console.log(fileId);\n            this.currentFiles = this.currentFiles.filter(d => d.ID !== fileId);\n        },\n        handleSelectionChange(rows) {\n            // console.log(rows);\n            this.selectedRows = rows;\n        },\n        showModal() {\n            this.isModalOpen = true;\n        },\n        async getPendingPost() {\n            try {\n                const response = await DataSource.shared.pendingPost();\n                // console.log(response);\n                if (response) {\n                    this.list = response.Table;\n                    switch (response.code) {\n                        case \"2\":\n                            this.results = `No Record Found`;\n                            //this.results = `Invalid User Name - sample 1:${JSON.stringify(response)}`;\n                            break;\n                        case \"88\":\n                            this.results = `Please login`;\n                            //this.results = `Invalid password - sample 2: code: ${response.code}`;\n                            break;\n                        case \"99\":\n                            this.results = `Please try again later`;\n                            //this.results = `Please fill in all field - sample 3: code: ${response.code}`;\n                            break;\n                    }\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        },\n        async onSubmit() {\n            this.error = \"\";\n            //this.results = \"<< Requesting.. >>\";\n            try {\n                const saveResponse = await DataSource.shared.updatePost(this.currentFiles, this.actionStatus, this.postID, this.postContent, this.profolio, this.tagUserID, this.tagClassID, this.tagLevelID,);\n                // console.log(saveResponse);\n                if (saveResponse) {\n                    switch (saveResponse.code) {\n                        case \"1\":\n                            this.results = `Post updated`;\n                            this.getPendingPost();\n                            break;\n                        case \"88\":\n                            this.results = `Request Rejected / Post has been approved`;\n                            this.systemmsgError = true;\n                            break;\n                        case \"99\":\n                            this.results = `Please try again later`;\n                            this.systemmsgError = true;\n                            break;\n                        // default:\n                        //     alert(\"Please try again later\");\n                        //     this.results = JSON.stringify(response);\n                    }\n                }\n            } catch (e) {\n                this.error = e;\n            }\n\n        },\n        async handleClick(command) {\n\n            // if clicked dropdown button is approve\n            if (command === \"approve\") {\n                try {\n                    if (this.selectedRows.length !== 0) {\n                        this.showConfirmModal = true;\n                    }\n                } catch (error) {\n                    // log error\n                    console.log(error);\n                }\n            }\n\n            if (command === \"delete\") {\n                try {\n                    if (this.selectedRows.length !== 0) {\n                        this.showDeleteModal = true;\n                    }\n                } catch (error) {\n                    // log error\n                    console.log(error);\n                }\n            }\n        },\n        async cancelClick() {\n            this.showDeleteModal = false;\n        },\n        async okClick() {\n            try {\n                let deleteResponse;\n                for (const row of this.selectedRows) {\n                    deleteResponse = await DataSource.shared.softDeletePost(row.PostID, row.profolio);\n                }\n                if (deleteResponse && deleteResponse.code === \"1\") {\n                    this.showDeleteModal = false;\n                    this.getPendingPost();\n                }\n            } catch (e) {\n                console.log(\"error \", e);\n            }\n        },\n        async approveCancelClick() {\n            this.showConfirmModal = false;\n        },\n        async approveOkClick() {\n            try {\n                let response;\n                // loop selected rows and call approve api one by one, lol\n                for (const row of this.selectedRows) {\n                    response = await DataSource.shared.approvePost(row.PostApproverID, \"Approved\");\n                }\n                // update pending post view on success\n                if (response && response.code === \"1\") {\n                    this.showConfirmModal = false;\n                    this.getPendingPost();\n                }\n            } catch (e) {\n                console.log(\"error \", e);\n            }\n        },\n    },\n    async mounted() {\n        this.getPendingPost();\n    },\n};\n",{"version":3,"sources":["PendingPost.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8KA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PendingPost.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n    <div id=\"staff-post\" class=\"mt-3 container\">\r\n        <div>\r\n            <h4 class=\"title\">Pending Post</h4>\r\n            <div v-if=\"list && list.length>0\" class=\"datatable_group\">\r\n                <el-row style=\"margin-bottom: 10px\" class=\"data-top\">\r\n                    <el-dropdown @command=\"handleClick\" class=\"float-right\">\r\n                        <el-button type=\"primary\">Actions<i class=\"el-icon-caret-bottom el-icon--right\"></i>\r\n                        </el-button>\r\n                        <el-dropdown-menu slot=\"dropdown\">\r\n                            <el-dropdown-item command=\"approve\">Approve</el-dropdown-item>\r\n                            <el-dropdown-item command=\"delete\">Delete</el-dropdown-item>\r\n                        </el-dropdown-menu>\r\n                    </el-dropdown>\r\n                </el-row>\r\n                <data-tables :data=\"list\" @selection-change=\"handleSelectionChange\" :fit=\"false\"\r\n                             :action-col=\"actionCol\" :table-props=\"tableProps.defaultSort\">\r\n                    <el-table-column type=\"selection\" width=\"55\"></el-table-column>\r\n\r\n                    <el-table-column v-for=\"title in titles\" :prop=\"title.prop\" :label=\"title.label\" :key=\"title.prop\"\r\n                                     :width=\"title.width\"\r\n                                     sortable=\"custom\">\r\n                    </el-table-column>\r\n\r\n                </data-tables>\r\n            </div>\r\n            <div v-else-if=\"results==='No Record Found'\">\r\n                No Record Found\r\n            </div>\r\n            <div v-else>\r\n                {{results}}\r\n                Loading...\r\n            </div>\r\n\r\n        </div>\r\n        <b-modal id=\"viewMoreModal\" hide-footer title=\"Post Details\" v-model=\"isModalOpen\">\r\n            <form class=\"needs-validation form-style\" novalidate @submit.prevent=\"onSubmit\">\r\n\r\n\r\n                <div class=\"mb-2\">\r\n                    <label for=\"actionStatus\">Status</label>\r\n                    <select class=\"form-control\" id=\"actionStatus\" v-model=\"actionStatus\">\r\n                        <option selected value=\"Void\">Disable</option>\r\n                        <option value=\"Edit\">Edit</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"mb-2 d-none\">\r\n                    <input type=\"text\" class=\"form-control\" id=\"postID\" v-model=\"postID\"\r\n                           placeholder=\"Post ID\"\r\n                           required>\r\n                    <div class=\"invalid-feedback\" style=\"width: 100%;\">\r\n                        Your Post ID is required.\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label for=\"UpdateContent\">Content</label>\r\n                    <!--<label for=\"username\">Username</label>-->\r\n                    <textarea type=\"text\" class=\"form-control\" id=\"UpdateContent\" v-model=\"UpdateContent\"\r\n                              placeholder=\"CONTENT\"\r\n                              required></textarea>\r\n                    <div class=\"invalid-feedback\" style=\"width: 100%;\">\r\n                        Your content is required.\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div class=\"mb-2\">\r\n                    <label for=\"profolio\">Profolio</label>\r\n                    <select class=\"form-control\" id=\"profolio\" v-model=\"profolio\">\r\n                        <option selected value=\"Yes\">Yes</option>\r\n                        <option value=\"No\">No</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"mb-2\">\r\n                    <label for=\"tagUserID\">Tag User ID</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"tagUserID\" v-model=\"tagUserID\"\r\n                           placeholder=\"Tag User ID\"\r\n                           required>\r\n                    <small class=\"text-left d-blk\">separate ID by comma</small>\r\n                    <div class=\"invalid-feedback\" style=\"width: 100%;\">\r\n                        Your Tag User ID is required.\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"mb-2\">\r\n                    <label for=\"tagClassID\">Tag Class ID</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"tagClassID\" v-model=\"tagClassID\"\r\n                           placeholder=\"Tag Class ID\"\r\n                           required>\r\n                    <div class=\"invalid-feedback\" style=\"width: 100%;\">\r\n                        Your Tag Class ID is required.\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"mb-2\">\r\n                    <label for=\"tagLevelID\">Tag Level ID</label>\r\n                    <input type=\"text\" class=\"form-control\" id=\"tagLevelID\" v-model=\"tagLevelID\"\r\n                           placeholder=\"Tag Level ID\"\r\n                           required>\r\n                    <div class=\"invalid-feedback\" style=\"width: 100%;\">\r\n                        Your Tag Level ID is required.\r\n                    </div>\r\n                </div>\r\n                <div class=\"view-details text-left\">\r\n                    <table class=\"table table-striped\">\r\n                        <tr class=\"\">\r\n                            <th>PostSchoolID</th>\r\n                            <td>{{PostSchoolID}}</td>\r\n                        </tr>\r\n                        <tr class=\"\">\r\n                            <th>PostCreatedDate</th>\r\n                            <td>{{PostCreatedDate}}</td>\r\n                        </tr>\r\n                        <tr class=\"\">\r\n                            <th>PostCreatedBy</th>\r\n                            <td>{{PostCreatedBy}}</td>\r\n                        </tr>\r\n                    </table>\r\n                    <div class=\"post-image-wrapper\">\r\n                        <ul>\r\n                            <li class=\"postFile__item col-md-4\" v-for=\"postFile in currentFiles\" :key=\"postFile.ID\">\r\n                                <span @click=\"handleImageRemove(postFile.ID)\" class=\"remove\"><i class=\"fa fa-times\"\r\n                                                                                                aria-hidden=\"true\"></i></span>\r\n                                <img :src=\"postFile.PostItemPath\"\r\n                                     :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"/>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"system-msg\" v-bind:class=\"{'bg-danger': systemmsgError===true}\"><p>{{results}}</p>\r\n                    <p v-if=\"error\" style=\"color: red\">{{error}}</p></div>\r\n                <div class=\"row d-flex submit-wrap\">\r\n                    <div class=\"col-md-6\"></div>\r\n                    <div class=\"col-md-6\">\r\n                        <button class=\"btn btn-primary login-btn\" type=\"submit\">Update\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </b-modal>\r\n        <b-modal id=\"modalDelete\" hide-footer title=\"ARE YOU SURE?\" v-model=\"showDeleteModal\">\r\n            Once you delete a post, you can't undo it.\r\n            <br/>\r\n            <div class=\"row d-flex submit-wrap\">\r\n                <div class=\"col-md-6\">\r\n                    <b-btn class=\"float-left\" @click=\"cancelClick\">Cancel</b-btn>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                    <b-btn class=\"float-right\" @click=\"okClick\">OK</b-btn>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n        <b-modal id=\"modalApprove\" hide-footer title=\"CONFIRM APPROVE?\" v-model=\"showConfirmModal\">\r\n            Approve post Now?\r\n            <br/>\r\n            <div class=\"row d-flex submit-wrap\">\r\n                <div class=\"col-md-6\">\r\n                    <b-btn class=\"float-left\" @click=\"approveCancelClick\">Cancel</b-btn>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                    <b-btn class=\"float-right\" @click=\"approveOkClick\">OK</b-btn>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\n    import DataSource from \"../data/datasource\";\r\n\r\n    export default {\r\n        name: 'PendingPost',\r\n        data() {\r\n            return {\r\n                error: null,\r\n                selectedRows: [],\r\n                isModalOpen: false,\r\n                list: [],\r\n                currentFiles: [],\r\n                fileRes: \"\",\r\n                postID: \"\",\r\n                titles: [{\r\n                    prop: \"ID\",\r\n                    label: \"ID\"\r\n                }, {\r\n                    prop: \"PostID\",\r\n                    label: \"Post ID\"\r\n                }, {\r\n                    prop: \"PostCreatedDate\",\r\n                    label: \"Created At\"\r\n                }, {\r\n                    prop: \"PostStatus\",\r\n                    label: \"Post Status\"\r\n                }],\r\n                actionCol: {\r\n                    label: '',\r\n                    class: 'actions',\r\n                    props: {\r\n                        align: 'center',\r\n                    },\r\n                    buttons: [{\r\n                        props: {\r\n                            type: 'text',\r\n                            // icon: 'el-icon-edit'\r\n                        },\r\n                        handler: async row => {\r\n                            try {\r\n                                // console.log(\"clicked row data: \", row);\r\n                                // this will call when modal open right?\r\n                                // await this.getPostFile();\r\n\r\n\r\n                                // call approve post api\r\n                                const response = await DataSource.shared.approvePost(row.PostApproverID, \"Approved\");\r\n                                // console.log('approve response: ', response);\r\n\r\n                                // update pending post view on success\r\n                                if (response && response.code===\"1\"){\r\n                                    this.getPendingPost();\r\n\r\n\r\n                                }\r\n                            } catch (error) {\r\n                                // log error\r\n                                console.log(error);\r\n                            }\r\n\r\n                        },\r\n                        label: 'Approve'\r\n                    }, {\r\n                        props: {\r\n                            type: 'text',\r\n                            icon: 'el-icon-edit'\r\n                        },\r\n                        handler: async row => {\r\n                            // console.log(row, ' ss');\r\n                            try {\r\n\r\n                                const fileRes = await DataSource.shared.getPostFile(row.PostID);\r\n                                // console.log(fileRes);\r\n                                if (fileRes.Table) {\r\n                                    this.currentFiles = fileRes.Table;\r\n                                } else {\r\n                                    this.currentFiles = null;\r\n                                }\r\n\r\n                                this.isModalOpen = true;\r\n                                this.postID = row.PostID;\r\n                                this.UpdateContent = row.PostContent;\r\n                                this.profolio = row.PostProfolio;\r\n                                this.tagUserID = row.tagUserID;\r\n                                this.PostSchoolID = row.PostSchoolID;\r\n                                this.PostCreatedDate = row.PostCreatedDate;\r\n                                this.PostCreatedBy = row.PostCreatedBy;\r\n                            } catch (error) {\r\n                                // log error\r\n                                console.log(error);\r\n                            }\r\n\r\n                        },\r\n                        label: ''\r\n                    }\r\n                    ]\r\n                },\r\n                tableProps: {\r\n                    defaultSort: {\r\n                        prop: 'PostID',\r\n                        order: 'descending'\r\n                    }\r\n                },\r\n                selectedRow: null,\r\n                results: null,\r\n                actionStatus: \"\",\r\n                UpdateContent: \"\",\r\n                profolio: \"\",\r\n                PostSchoolID: \"\",\r\n                PostCreatedDate: \"\",\r\n                PostCreatedBy: \"\",\r\n                systemmsgError: false,\r\n                tagLevelID: \"\",\r\n                tagUserID: \"\",\r\n                tagClassID: \"\",\r\n                PostItemPath: \"\",\r\n                showDeleteModal: false,\r\n                showConfirmModal: false,\r\n            };\r\n        },\r\n        methods: {\r\n            handleImageRemove(fileId) {\r\n                // console.log(fileId);\r\n                this.currentFiles = this.currentFiles.filter(d => d.ID !== fileId);\r\n            },\r\n            handleSelectionChange(rows) {\r\n                // console.log(rows);\r\n                this.selectedRows = rows;\r\n            },\r\n            showModal() {\r\n                this.isModalOpen = true;\r\n            },\r\n            async getPendingPost() {\r\n                try {\r\n                    const response = await DataSource.shared.pendingPost();\r\n                    // console.log(response);\r\n                    if (response) {\r\n                        this.list = response.Table;\r\n                        switch (response.code) {\r\n                            case \"2\":\r\n                                this.results = `No Record Found`;\r\n                                //this.results = `Invalid User Name - sample 1:${JSON.stringify(response)}`;\r\n                                break;\r\n                            case \"88\":\r\n                                this.results = `Please login`;\r\n                                //this.results = `Invalid password - sample 2: code: ${response.code}`;\r\n                                break;\r\n                            case \"99\":\r\n                                this.results = `Please try again later`;\r\n                                //this.results = `Please fill in all field - sample 3: code: ${response.code}`;\r\n                                break;\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error);\r\n                }\r\n            },\r\n            async onSubmit() {\r\n                this.error = \"\";\r\n                //this.results = \"<< Requesting.. >>\";\r\n                try {\r\n                    const saveResponse = await DataSource.shared.updatePost(this.currentFiles, this.actionStatus, this.postID, this.postContent, this.profolio, this.tagUserID, this.tagClassID, this.tagLevelID,);\r\n                    // console.log(saveResponse);\r\n                    if (saveResponse) {\r\n                        switch (saveResponse.code) {\r\n                            case \"1\":\r\n                                this.results = `Post updated`;\r\n                                this.getPendingPost();\r\n                                break;\r\n                            case \"88\":\r\n                                this.results = `Request Rejected / Post has been approved`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            case \"99\":\r\n                                this.results = `Please try again later`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            // default:\r\n                            //     alert(\"Please try again later\");\r\n                            //     this.results = JSON.stringify(response);\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.error = e;\r\n                }\r\n\r\n            },\r\n            async handleClick(command) {\r\n\r\n                // if clicked dropdown button is approve\r\n                if (command === \"approve\") {\r\n                    try {\r\n                        if (this.selectedRows.length !== 0) {\r\n                            this.showConfirmModal = true;\r\n                        }\r\n                    } catch (error) {\r\n                        // log error\r\n                        console.log(error);\r\n                    }\r\n                }\r\n\r\n                if (command === \"delete\") {\r\n                    try {\r\n                        if (this.selectedRows.length !== 0) {\r\n                            this.showDeleteModal = true;\r\n                        }\r\n                    } catch (error) {\r\n                        // log error\r\n                        console.log(error);\r\n                    }\r\n                }\r\n            },\r\n            async cancelClick() {\r\n                this.showDeleteModal = false;\r\n            },\r\n            async okClick() {\r\n                try {\r\n                    let deleteResponse;\r\n                    for (const row of this.selectedRows) {\r\n                        deleteResponse = await DataSource.shared.softDeletePost(row.PostID, row.profolio);\r\n                    }\r\n                    if (deleteResponse && deleteResponse.code === \"1\") {\r\n                        this.showDeleteModal = false;\r\n                        this.getPendingPost();\r\n                    }\r\n                } catch (e) {\r\n                    console.log(\"error \", e);\r\n                }\r\n            },\r\n            async approveCancelClick() {\r\n                this.showConfirmModal = false;\r\n            },\r\n            async approveOkClick() {\r\n                try {\r\n                    let response;\r\n                    // loop selected rows and call approve api one by one, lol\r\n                    for (const row of this.selectedRows) {\r\n                        response = await DataSource.shared.approvePost(row.PostApproverID, \"Approved\");\r\n                    }\r\n                    // update pending post view on success\r\n                    if (response && response.code === \"1\") {\r\n                        this.showConfirmModal = false;\r\n                        this.getPendingPost();\r\n                    }\r\n                } catch (e) {\r\n                    console.log(\"error \", e);\r\n                }\r\n            },\r\n        },\r\n        async mounted() {\r\n            this.getPendingPost();\r\n        },\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n<style>\r\n\r\n\r\n</style>"]}]}