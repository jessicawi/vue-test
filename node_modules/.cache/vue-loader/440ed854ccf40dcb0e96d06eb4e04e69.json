{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\Promotion_Component.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\Promotion_Component.vue","mtime":1558249494604},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\"use strict\";\nimport $ from 'jquery';\nimport DataSource from \"../data/datasource\";\n\nexport default {\n    name: \"Promotion_Component\",\n    data() {\n        return {\n            arrobj_NewAcademicYears: null,\n            arrobj_NewClasses: null,\n            obj_SelectedNewYear: null,\n            obj_SelectedNewClass: null,\n            filterStudents: \"\",\n            nextlvl: null\n        };\n    },\n    props: [\"selectedStudents\", \"courseId\", \"arrobjSelectedStudentID\", \"showStudentTag\", \"isStudent\"],\n    // props: {selectedStudents: [Array], CourseId: String, arrobjSelectedStudentID: [Array]},\n    methods: {\n        clearSelection() {\n            if (this.isStudent === true) {\n                this.obj_SelectedNewYear = \"\";\n                this.obj_SelectedNewClass = \"\";\n            }\n        },\n        sleep(milliseconds) {\n            return new Promise(resolve => setTimeout(resolve, milliseconds));\n        },\n        isNull(obj) {\n            return (obj === null || obj === undefined || obj === \"undefined\");\n        },\n        RemoveSelectedStudent(student) {\n            this.selectedStudents = this.selectedStudents.filter(d => {\n                return d.Student_ID !== student;\n            });\n            this.arrobjSelectedStudentID = this.arrobjSelectedStudentID.filter(d => {\n                return d !== student;\n            });\n        },\n        async promoteStudents() {\n            let str_StudentIDs = \"\";\n            for (let i of this.arrobjSelectedStudentID) {\n                str_StudentIDs += i + \",\";\n            }\n\n\n            str_StudentIDs = str_StudentIDs.substr(0, str_StudentIDs.length - 1);\n            if (this.obj_SelectedNewYear === null || this.obj_SelectedNewClass === null) {\n\n                this.$notify.error({\n                    title: 'Error',\n                    message: 'Please fill in content'\n                });\n            } else {\n\n                this.showLoading();\n            }\n            await DataSource.shared.saveStudentPromotions(str_StudentIDs, this.obj_SelectedNewYear.PK_Semester_ID, this.obj_SelectedNewClass.PK_Course_ID, this.obj_SelectedNewClass.PK_Class_ID).then((result) => {\n\n                this.hideLoading();\n                if (!this.isNull(result) && result.code === \"1\") {\n                    this.$notify({\n                        title: 'Success',\n                        message: 'Students Promoted',\n                        type: 'success'\n                    });\n                } else if (!this.isNull(result) && result.code === \"2\") {\n                    this.$notify({\n                        title: 'Student Exceeded',\n                        message: 'Number of students assign to this class have excceded max number of class',\n                        type: 'success'\n                    });\n                }\n                this.$emit(\"result\", true);\n            });\n            // this.filterStudents = this.selectedStudents;\n\n            this.hideLoading();\n        },\n        emitclasslevel() {\n            if (this.isStudent === true) {\n                console.log(\"isstudent\");\n                this.$emit('studentPromoteAction', this.obj_SelectedNewYear.PK_Semester_ID, this.obj_SelectedNewClass.PK_Course_ID, this.obj_SelectedNewClass.PK_Class_ID);\n            }\n        },\n        loadNewYears() {\n            DataSource.shared.getAcademicYear().then((result) => {\n                this.arrobj_NewAcademicYears = result.Table;\n            });\n        },\n        loadNewClasses() {\n            if (this.isNull(this.obj_SelectedNewYear))\n                return;\n\n            this.arrobj_NewClasses = null;\n\n            let promise_NextLevel = new Promise((resolve) => {\n                DataSource.shared.getNextLevel(this.courseId).then((result) => {\n                    resolve(result.Table[0]);\n                    this.nextlvl = result.Table;\n                });\n            });\n\n            let promise_Classes = new Promise((resolve) => {\n                DataSource.shared.getClassByAcademicYear(this.obj_SelectedNewYear.PK_Semester_ID).then((result) => {\n                    resolve(this.groupBy(result.Table, \"CRS_Course_Name\"));\n                });\n            });\n\n            Promise.all([promise_NextLevel, promise_Classes]).then((result) => {\n                let obj_NextLevel = result[0];\n                let temparrobj_Classes = result[1];\n                let index = temparrobj_Classes.findIndex(x => x.Str_SortBy === obj_NextLevel.CRS_Course_Name);\n\n                // this.arrobj_NewClasses = temparrobj_Classes.splice(0, index + 1);\n                for (let obj of this.nextlvl) {\n                    this.arrobj_NewClasses = temparrobj_Classes.filter(d => {\n                        return d.Str_SortBy === obj.CRS_Course_Name;\n                    });\n                }\n            });\n\n            /*let obj_NextLevel =\n\n            let temparrobj_Classes = DataSource.shared.getClassByAcademicYear(this.obj_SelectedNewYear.PK_Semester_ID).then((result) => {\n                if (result.code == 2 || result.code == 99)\n                    return;\n\n                return this.groupBy(result.Table, \"CRS_Course_Name\");\n            });*/\n\n            /*let temparrobj_Classes = new Promise((resolve, reject) => {\n                DataSource.shared.getClassByAcademicYear(this.obj_SelectedNewYear.PK_Semester_ID).then((result) => {\n                    if (result.code == 2 || result.code == 99) {\n                        this.obj_SelectedNewClass = null;\n                        return;\n                    }\n\n                    resolve this.groupBy(result.Table, \"CRS_Course_Name\");\n                });\n            });\n\n            temparrobj_Classes.then((result) => {\n                DataSource.shared.getNextLevel(this.obj_SelectedClass.PK_Course_ID).then((result) => {\n                    console.log(result);\n                });\n            });*/\n\n\n            /*DataSource.shared.getNextLevel(this.obj_SelectedClass.PK_Course_ID).then((result) => {\n                console.log(result.Table[0].CRS_Course_Name)\n                console.log(result);\n            });*/\n        },\n        close() {\n            this.$emit(\"result\", true);\n        },\n\n        /*#region Array Grouping Function*/\n        groupBy(data, key) {\n            //Credits to Ceasar Bautista and Juan Castillo @ stackoverflow\n            /*return data.reduce(function(storage, item) {\n                let group = item[key];\n\n                storage[group] = storage[group] || [];\n                storage[group].push(item);\n                return storage;\n            }, {});*/\n\n            let ArrObj_Sorted = [];\n\n            for (let item of data) {\n                let index = ArrObj_Sorted.findIndex(x => x.Str_SortBy === item[key]);\n\n                if (index === -1) {\n                    ArrObj_Sorted.push({Str_SortBy: item[key], ArrObj_Items: [item]});\n                } else\n                    ArrObj_Sorted[index].ArrObj_Items.push(item);\n            }\n\n            return ArrObj_Sorted;\n        },\n        /*#endregion*/\n\n        /*#region Loader Functions*/\n        showLoading() {\n            this.$vs.loading();\n        }\n        ,\n        hideLoading() {\n            this.$vs.loading.close();\n        }\n        ,\n        /*#endregion*/\n    },\n    mounted() {\n        this.loadNewYears();\n        this.loadNewClasses();\n        // this.loadStudentID();\n\n        // this.filterStudents = this.selectedStudents;\n        // this.arrobjSelectedStudentID = this.selectedStudents.map(d => d.Student_ID);\n\n\n    }\n};\n",{"version":3,"sources":["Promotion_Component.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA","file":"Promotion_Component.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div class=\"container-fluid\">\r\n        <div class=\"form-group row promotion-modal-tag\" v-if=\"showStudentTag === true\">\r\n            <el-tag\r\n                    :key=\"student.Student_ID\"\r\n                    v-for=\"student in selectedStudents\"\r\n                    closable\r\n                    :disable-transitions=\"false\"\r\n                    @close=\"RemoveSelectedStudent(student.Student_ID)\">\r\n                {{student.Student_Name}}\r\n            </el-tag>\r\n        </div>\r\n\r\n\r\n        <div class=\"row promotion-clear-select\" v-if=\"isStudent === true\">\r\n            <div class=\"col-6\">\r\n            </div>\r\n            <div class=\"col-6\">\r\n                <button class=\"btn btn-secondary float-right\" @click=\"clearSelection\"><i class=\"material-icons\">\r\n                    cancel\r\n                </i> Clear\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n            <label for=\"ddl_NewYear\">Academic Year</label>\r\n            <select id=\"ddl_NewYear\" class=\"mb-3 form-control\" v-model=\"obj_SelectedNewYear\"\r\n                    @change=\"loadNewClasses\">\r\n                <option v-for=\"tempobj_AcademicYear of arrobj_NewAcademicYears\" :value=\"tempobj_AcademicYear\"\r\n                        :key=\"tempobj_AcademicYear.id\">\r\n                    {{tempobj_AcademicYear.SMT_Code + \": \" + tempobj_AcademicYear.SMT_From_convert + \" - \" +\r\n                    tempobj_AcademicYear.SMT_To_convert}}\r\n                </option>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"form-group row\">\r\n            <label for=\"ddl_NewClass\">Class </label>\r\n            <select id=\"ddl_NewClass\" class=\"mb-3 form-control\" v-model=\"obj_SelectedNewClass\" @change=\"emitclasslevel\">\r\n                <optgroup v-for=\"tempobj_Level of arrobj_NewClasses\" :label=\"tempobj_Level.Str_SortBy\"\r\n                          :key=\"tempobj_Level.id\">\r\n                    <option v-for=\"tempobj_Class of tempobj_Level.ArrObj_Items\" :value=\"tempobj_Class\"\r\n                            :key=\"tempobj_Class.id\">\r\n                        {{tempobj_Class.CLS_ClassName}} of {{tempobj_Class.CLS_Batch}}\r\n                    </option>\r\n                </optgroup>\r\n            </select>\r\n        </div>\r\n\r\n        <div class=\"row\" v-if=\"showStudentTag === true\">\r\n            <div class=\"col-6\">\r\n                <button class=\"btn btn-primary\" @click=\"promoteStudents\">OK</button>\r\n            </div>\r\n            <div class=\"col-6\">\r\n                <button class=\"btn btn-secondary\" @click=\"close\">Cancel</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    \"use strict\";\r\n    import $ from 'jquery';\r\n    import DataSource from \"../data/datasource\";\r\n\r\n    export default {\r\n        name: \"Promotion_Component\",\r\n        data() {\r\n            return {\r\n                arrobj_NewAcademicYears: null,\r\n                arrobj_NewClasses: null,\r\n                obj_SelectedNewYear: null,\r\n                obj_SelectedNewClass: null,\r\n                filterStudents: \"\",\r\n                nextlvl: null\r\n            };\r\n        },\r\n        props: [\"selectedStudents\", \"courseId\", \"arrobjSelectedStudentID\", \"showStudentTag\", \"isStudent\"],\r\n        // props: {selectedStudents: [Array], CourseId: String, arrobjSelectedStudentID: [Array]},\r\n        methods: {\r\n            clearSelection() {\r\n                if (this.isStudent === true) {\r\n                    this.obj_SelectedNewYear = \"\";\r\n                    this.obj_SelectedNewClass = \"\";\r\n                }\r\n            },\r\n            sleep(milliseconds) {\r\n                return new Promise(resolve => setTimeout(resolve, milliseconds));\r\n            },\r\n            isNull(obj) {\r\n                return (obj === null || obj === undefined || obj === \"undefined\");\r\n            },\r\n            RemoveSelectedStudent(student) {\r\n                this.selectedStudents = this.selectedStudents.filter(d => {\r\n                    return d.Student_ID !== student;\r\n                });\r\n                this.arrobjSelectedStudentID = this.arrobjSelectedStudentID.filter(d => {\r\n                    return d !== student;\r\n                });\r\n            },\r\n            async promoteStudents() {\r\n                let str_StudentIDs = \"\";\r\n                for (let i of this.arrobjSelectedStudentID) {\r\n                    str_StudentIDs += i + \",\";\r\n                }\r\n\r\n\r\n                str_StudentIDs = str_StudentIDs.substr(0, str_StudentIDs.length - 1);\r\n                if (this.obj_SelectedNewYear === null || this.obj_SelectedNewClass === null) {\r\n\r\n                    this.$notify.error({\r\n                        title: 'Error',\r\n                        message: 'Please fill in content'\r\n                    });\r\n                } else {\r\n\r\n                    this.showLoading();\r\n                }\r\n                await DataSource.shared.saveStudentPromotions(str_StudentIDs, this.obj_SelectedNewYear.PK_Semester_ID, this.obj_SelectedNewClass.PK_Course_ID, this.obj_SelectedNewClass.PK_Class_ID).then((result) => {\r\n\r\n                    this.hideLoading();\r\n                    if (!this.isNull(result) && result.code === \"1\") {\r\n                        this.$notify({\r\n                            title: 'Success',\r\n                            message: 'Students Promoted',\r\n                            type: 'success'\r\n                        });\r\n                    } else if (!this.isNull(result) && result.code === \"2\") {\r\n                        this.$notify({\r\n                            title: 'Student Exceeded',\r\n                            message: 'Number of students assign to this class have excceded max number of class',\r\n                            type: 'success'\r\n                        });\r\n                    }\r\n                    this.$emit(\"result\", true);\r\n                });\r\n                // this.filterStudents = this.selectedStudents;\r\n\r\n                this.hideLoading();\r\n            },\r\n            emitclasslevel() {\r\n                if (this.isStudent === true) {\r\n                    console.log(\"isstudent\");\r\n                    this.$emit('studentPromoteAction', this.obj_SelectedNewYear.PK_Semester_ID, this.obj_SelectedNewClass.PK_Course_ID, this.obj_SelectedNewClass.PK_Class_ID);\r\n                }\r\n            },\r\n            loadNewYears() {\r\n                DataSource.shared.getAcademicYear().then((result) => {\r\n                    this.arrobj_NewAcademicYears = result.Table;\r\n                });\r\n            },\r\n            loadNewClasses() {\r\n                if (this.isNull(this.obj_SelectedNewYear))\r\n                    return;\r\n\r\n                this.arrobj_NewClasses = null;\r\n\r\n                let promise_NextLevel = new Promise((resolve) => {\r\n                    DataSource.shared.getNextLevel(this.courseId).then((result) => {\r\n                        resolve(result.Table[0]);\r\n                        this.nextlvl = result.Table;\r\n                    });\r\n                });\r\n\r\n                let promise_Classes = new Promise((resolve) => {\r\n                    DataSource.shared.getClassByAcademicYear(this.obj_SelectedNewYear.PK_Semester_ID).then((result) => {\r\n                        resolve(this.groupBy(result.Table, \"CRS_Course_Name\"));\r\n                    });\r\n                });\r\n\r\n                Promise.all([promise_NextLevel, promise_Classes]).then((result) => {\r\n                    let obj_NextLevel = result[0];\r\n                    let temparrobj_Classes = result[1];\r\n                    let index = temparrobj_Classes.findIndex(x => x.Str_SortBy === obj_NextLevel.CRS_Course_Name);\r\n\r\n                    // this.arrobj_NewClasses = temparrobj_Classes.splice(0, index + 1);\r\n                    for (let obj of this.nextlvl) {\r\n                        this.arrobj_NewClasses = temparrobj_Classes.filter(d => {\r\n                            return d.Str_SortBy === obj.CRS_Course_Name;\r\n                        });\r\n                    }\r\n                });\r\n\r\n                /*let obj_NextLevel =\r\n\r\n                let temparrobj_Classes = DataSource.shared.getClassByAcademicYear(this.obj_SelectedNewYear.PK_Semester_ID).then((result) => {\r\n                    if (result.code == 2 || result.code == 99)\r\n                        return;\r\n\r\n                    return this.groupBy(result.Table, \"CRS_Course_Name\");\r\n                });*/\r\n\r\n                /*let temparrobj_Classes = new Promise((resolve, reject) => {\r\n                    DataSource.shared.getClassByAcademicYear(this.obj_SelectedNewYear.PK_Semester_ID).then((result) => {\r\n                        if (result.code == 2 || result.code == 99) {\r\n                            this.obj_SelectedNewClass = null;\r\n                            return;\r\n                        }\r\n\r\n                        resolve this.groupBy(result.Table, \"CRS_Course_Name\");\r\n                    });\r\n                });\r\n\r\n                temparrobj_Classes.then((result) => {\r\n                    DataSource.shared.getNextLevel(this.obj_SelectedClass.PK_Course_ID).then((result) => {\r\n                        console.log(result);\r\n                    });\r\n                });*/\r\n\r\n\r\n                /*DataSource.shared.getNextLevel(this.obj_SelectedClass.PK_Course_ID).then((result) => {\r\n                    console.log(result.Table[0].CRS_Course_Name)\r\n                    console.log(result);\r\n                });*/\r\n            },\r\n            close() {\r\n                this.$emit(\"result\", true);\r\n            },\r\n\r\n            /*#region Array Grouping Function*/\r\n            groupBy(data, key) {\r\n                //Credits to Ceasar Bautista and Juan Castillo @ stackoverflow\r\n                /*return data.reduce(function(storage, item) {\r\n                    let group = item[key];\r\n\r\n                    storage[group] = storage[group] || [];\r\n                    storage[group].push(item);\r\n                    return storage;\r\n                }, {});*/\r\n\r\n                let ArrObj_Sorted = [];\r\n\r\n                for (let item of data) {\r\n                    let index = ArrObj_Sorted.findIndex(x => x.Str_SortBy === item[key]);\r\n\r\n                    if (index === -1) {\r\n                        ArrObj_Sorted.push({Str_SortBy: item[key], ArrObj_Items: [item]});\r\n                    } else\r\n                        ArrObj_Sorted[index].ArrObj_Items.push(item);\r\n                }\r\n\r\n                return ArrObj_Sorted;\r\n            },\r\n            /*#endregion*/\r\n\r\n            /*#region Loader Functions*/\r\n            showLoading() {\r\n                this.$vs.loading();\r\n            }\r\n            ,\r\n            hideLoading() {\r\n                this.$vs.loading.close();\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n        },\r\n        mounted() {\r\n            this.loadNewYears();\r\n            this.loadNewClasses();\r\n            // this.loadStudentID();\r\n\r\n            // this.filterStudents = this.selectedStudents;\r\n            // this.arrobjSelectedStudentID = this.selectedStudents.map(d => d.Student_ID);\r\n\r\n\r\n        }\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}