{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\BroadcastListCompnent.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\BroadcastListCompnent.vue","mtime":1555608771451},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport isImage from \"is-image\";\nimport DataSource from \"../data/datasource\";\nimport AlertComponent from \"./alertComponent\";\nimport portfolio from \"../components/Post_Portfolio_Component\";\nimport updates from \"../components/Post_Updates_Component.vue\";\n\nexport default {\n    name: 'postComponent',\n    components: {AlertComponent, updates, portfolio},\n    data() {\n        return {\n            commentPostContent: \"\",\n            readonly: \"\",\n            checkidcomment: null,\n            systemmsgError: null,\n            commentPostID: '',\n            deleteModalShow: false,\n            showEdit: true,\n            deleteCmId: null,\n            deleteCmContent: null,\n            deleteCmPostId: null,\n            deletePostModalShow: false,\n\n            obj_SelectedComponent: false,\n            obj_Post: null,\n            result: \"\",\n            post: [],\n        };\n    },\n    mounted() {\n        this.initPost();\n    },\n    props: [\"parentPost\", \"checkIfImage\", \"commentitemSubmit\", \"hideComment\", \"isHome\", \"hideSubmenu\"],\n    methods: {\n        /*#region Download Item Functions*/\n        downloadItem() {\n            let arr_Promises = [];\n            this.showLoading();\n\n            for (let obj_SelectedItem of this.arrobj_SelectedItem) {\n                let downloadPromise = new Promise((resolve, reject) => {\n                    DataSource.shared.downloadFile(obj_SelectedItem.GalID).then((result) => {\n                        let file = (result.Table)[0];\n                        let a = document.createElement(\"a\");\n                        let contentType = this.getContentType(file);\n                        let b64Data = file.GalFile;\n                        let blob = this.b64toBlob(b64Data, contentType);\n\n                        a.href = URL.createObjectURL(blob);\n                        a.download = (file.GalFileName + file.GalFileExt).toString();\n                        a.style.display = \"none\";\n                        document.body.appendChild(a);\n                        a.click();\n                        a.remove();\n                        resolve(result);\n                    });\n                });\n\n                arr_Promises.push(downloadPromise);\n            }\n\n            Promise.all(arr_Promises).then((result) => {\n                this.hideLoading();\n            });\n        }\n        ,\n        getContentType(e) {\n            let contentType = \"\";\n\n            switch (e.GalFileExt.toUpperCase()) {\n                case \".PDF\":\n                    contentType += \"application/octet-stream\";\n                    break;\n                default:\n                    contentType += e.GalFileType;\n                    break;\n            }\n\n            return contentType;\n        }\n        ,\n        b64toBlob(b64Data, contentType, sliceSize) {\n            //Credit to Jeremy Banks @ stackoverflow\n            contentType = contentType || '';\n            sliceSize = sliceSize || 512;\n\n            let byteCharacters = atob(b64Data);\n            let byteArrays = [];\n\n            for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n                let slice = byteCharacters.slice(offset, offset + sliceSize);\n\n                let byteNumbers = new Array(slice.length);\n                for (let i = 0; i < slice.length; i++) {\n                    byteNumbers[i] = slice.charCodeAt(i);\n                }\n\n                let byteArray = new Uint8Array(byteNumbers);\n\n                byteArrays.push(byteArray);\n            }\n\n            return new Blob(byteArrays, {type: contentType});\n        }\n        ,\n        /*#endregion*/\n        initPost(){\n            /*let tempobj = this.parentPost;\n            let promise_GetPostFile = DataSource.shared.getPostFile(tempobj.PostID);\n            let promise_GetComment = DataSource.shared.getComment(tempobj.PostID);\n\n            Promise.all([promise_GetPostFile, promise_GetComment]).then((result) => {\n                tempobj.postFiles = result[0].Table;\n                tempobj.commentPostID = tempobj.PostID;\n                tempobj.commentItems = result[1].Table;\n                tempobj.collapsed = true;\n            })\n\n                .then(()=>{\n                    this.post=tempobj;\n                });*/\n        },\n        isNull(obj) {\n            return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\n        },\n        isImage(obj_File) {\n            let ext = String(obj_File.PostItemFileExt).toUpperCase();\n            let isImage = false;\n\n            switch (ext) {\n                case \".PNG\":\n                case \".JPG\":\n                case \".BMP\":\n                case \".GIF\":\n                    isImage = true;\n                    break;\n                default:\n                    isImage = false;\n                    break;\n            }\n\n            return isImage;\n        },\n        getLowSource(file) {\n            if (this.isImage(file))\n                return \"data:\" + file.PostItemFileType + \";base64,\" + file.PostItemFileLow;\n            else\n                return \"\";\n        },\n        submitComment(postId) {\n            this.$emit('commentitemSubmit', postId, this.commentPostContent);\n            this.commentPostContent = \"\";\n        },\n        saveClick(PoCmID, PoCmContent) {\n            this.readonly = true;\n            this.showEdit = true;\n            this.checkidcomment = null;\n            this.$emit(\"commentEdit\", PoCmID, PoCmContent);\n        },\n        showDeleteModal(deleteCmId, deleteCmContent, deleteCmPostId) {\n            this.deleteModalShow = true;\n            this.deleteCmId = deleteCmId;\n            this.deleteCmContent = deleteCmContent;\n            this.deleteCmPostId = deleteCmPostId;\n        },\n        closeDeleteModal() {\n            this.deleteModalShow = false;\n        },\n        editClick(PoCmID) {\n            this.showEdit = false;\n            this.readonly = false;\n            this.checkidcomment = PoCmID;\n        },\n        deleteComment() {\n            this.$emit(\"commentDelete\", this.deleteCmId, this.deleteCmContent, this.deleteCmPostId);\n            this.closeDeleteModal();\n        },\n        removePost() {\n            this.$refs.modal_DeletePost.show();\n        },\n        deletePost(post) {\n            DataSource.shared.softDeletePost(post.PostID).then((result) => {\n            });\n        },\n        editPost(post) {\n            DataSource.shared.getPostAllTaggingStudentsByPostID(post.PostID)\n                .then((result) => {\n                    this.post.arrobj_SelectedStudents = result.Table;\n                    this.obj_Post = this.post;\n\n                    switch (this.obj_Post.PostType.toUpperCase()) {\n                        case \"PORTFOLIO\":\n                            this.obj_SelectedComponent = portfolio;\n                            break;\n                        case \"UPDATE\":\n                            this.obj_SelectedComponent = updates;\n                            break;\n                    }\n\n                    this.showEditModal()\n                });\n\n        },\n        showEditModal() {\n            this.$refs.modal_EditComponent.show();\n        },\n        hideEditModal() {\n            this.obj_SelectedComponent = false;\n            this.$refs.modal_EditComponent.hide();\n        },\n        displayResult(value) {\n            if (value == \"TRUE\")\n                this.result = \"Successfully posted\";\n            else\n                this.result = \"Something went wrong. Please inform the adminstrator\";\n\n            this.hideEditModal();\n        },\n        // checkIfImage(file) {\n        //     return isImage(file);\n        // },\n        // async commentEdit(PoCmID, PoCmContent) {\n        //     this.error = \"\";\n        //     //this.results = \"<< Requesting.. >>\";\n        //     try {\n        //\n        //         this.commentPostID = PoCmID;\n        //         this.commentPostContent = PoCmContent;\n        //         this.actionMode = \"Edit\";\n        //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\n        //         if (commentResponse) {\n        //             switch (commentResponse.code) {\n        //                 case \"1\":\n        //                     // reset all input filed to blank\n        //                     this.commentPostID = null;\n        //                     this.commentPostContent = \"\";\n        //                     this.readonly = true;\n        //                     // this.results = `Post Submitted`;\n        //                     // this.success = 'Post Submitted, activity will be active in a while';\n        //                     break;\n        //                 case \"88\":\n        //                     this.results = `Please Login to submit post`;\n        //                     this.systemmsgError = true;\n        //                     break;\n        //                 case \"99\":\n        //                     this.results = `Please fill in content`;\n        //                     this.systemmsgError = true;\n        //                     break;\n        //                 // default:\n        //                 //     alert(\"Please try again later\");\n        //                 //     this.results = JSON.stringify(response);\n        //             }\n        //         }\n        //     } catch (e) {\n        //         console.log(e);\n        //         this.error = e;\n        //     }\n        // },\n        // async commentEdit(PoCmID, PoCmContent) {\n        //     this.error = \"\";\n        //     //this.results = \"<< Requesting.. >>\";\n        //     try {\n        //\n        //         this.commentPostID = PoCmID;\n        //         this.commentPostContent = PoCmContent;\n        //         this.actionMode = \"Edit\";\n        //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\n        //         if (commentResponse) {\n        //             switch (commentResponse.code) {\n        //                 case \"1\":\n        //                     // reset all input filed to blank\n        //                     this.commentPostID = null;\n        //                     this.commentPostContent = \"\";\n        //                     this.readonly = true;\n        //                     // this.results = `Post Submitted`;\n        //                     // this.success = 'Post Submitted, activity will be active in a while';\n        //                     break;\n        //                 case \"88\":\n        //                     this.results = `Please Login to submit post`;\n        //                     this.systemmsgError = true;\n        //                     break;\n        //                 case \"99\":\n        //                     this.results = `Please fill in content`;\n        //                     this.systemmsgError = true;\n        //                     break;\n        //                 // default:\n        //                 //     alert(\"Please try again later\");\n        //                 //     this.results = JSON.stringify(response);\n        //             }\n        //         }\n        //     } catch (e) {\n        //         console.log(e);\n        //         this.error = e;\n        //     }\n        // },\n    },\n};\n",{"version":3,"sources":["BroadcastListCompnent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BroadcastListCompnent.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div class=\"aaaa\">\r\n        <div class=\"container-fluid row\" v-if=\"result\">\r\n            {{result}}\r\n        </div>\r\n        <div class=\" broadcast-box\" v-bind:class=\"[post.PostID]\" v-if=\"!isHome\">\r\n            <el-row>\r\n                <el-col :span=\"7\" v-for=\"(o, index) in 3\" :key=\"o\" :offset=\"index > 0 ? 0 : 0\">\r\n                    <el-card :body-style=\"{ padding: '0px' }\" shadow=\"hover\">\r\n                        <div style=\"padding: 14px;\">\r\n                            <strong>{{post.CONname}}</strong><br/>\r\n                            <span>{{post.PostContent}}</span>\r\n                            <div class=\"bottom clearfix\">\r\n                                <small type=\"text\" class=\"button\">{{post.PostCreatedDate}}</small>\r\n                            </div>\r\n                        </div>\r\n                    </el-card>\r\n                </el-col>\r\n            </el-row>\r\n            <!--<div class=\"image-wrapper\" v-if=\"!isNull(post.postFiles)\">-->\r\n                <!--<b-carousel id=\"carousel1\"-->\r\n                            <!--style=\"text-shadow: 1px 1px 2px #333;\"-->\r\n                            <!--:controls=\"post.postFiles.length > 0\"-->\r\n                            <!--indicators-->\r\n                            <!--background=\"#ababab\"-->\r\n                            <!--:interval=\"0\"-->\r\n                <!--&gt;-->\r\n                    <!--<div>-->\r\n                        <!--<b-carousel-slide v-for=\"obj_Images of post.postFiles\" :key=\"obj_Images.id\">-->\r\n                            <!--<img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"-->\r\n                                 <!--:src=\"getLowSource(obj_Images)\"-->\r\n                                 <!--:alt=\"post.PostPorDtlTitle\"/>-->\r\n                        <!--</b-carousel-slide>-->\r\n                    <!--</div>-->\r\n                <!--</b-carousel>-->\r\n            <!--</div>-->\r\n            <!--<div class=\"postFile\" v-if=\"!isNull(post.postFiles)\">-->\r\n                <!--<div class=\"postFile__item\" v-for=\"postFile in post.postFiles\" :key=\"postFile.ID\">-->\r\n                    <!--&lt;!&ndash;<img :src=\"postFile.PostItemPath\" :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"/>&ndash;&gt;-->\r\n\r\n                    <!--<a v-if=\"!postFile.PostItemFileLow && !checkIfImage(postFile.PostItemPath)\"-->\r\n                       <!--v-bind:href=\"[postFile.PostItemPath]\"-->\r\n                       <!--:class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\">-->\r\n                        <!--<i class=\"fa fa-file\" aria-hidden=\"true\"></i>-->\r\n                        <!--{{postFile.PostItemPostID}}-->\r\n                    <!--</a>-->\r\n                    <!--&lt;!&ndash;{{postFile.PostItemCreatedDate}}&ndash;&gt;-->\r\n                <!--</div>-->\r\n            <!--</div>-->\r\n        </div>\r\n\r\n        <!--<div class=\"comment_wrapper\" v-if=\"!hideComment\">-->\r\n            <!--<form class=\"form-style\">-->\r\n                <!--<input type=\"text\" class=\"form-control d-none\" id=\"commentPostID\" v-model=\"commentPostID\">-->\r\n                <!--<vs-input label-placeholder=\"Write a comment\" v-model=\"commentPostContent\"-->\r\n                          <!--class=\"addComment\"/>-->\r\n                <!--<div class=\"btn btn-primary\" @click=\"submitComment(post.commentPostID)\"><i-->\r\n                        <!--class=\"fa fa-paper-plane\"-->\r\n                        <!--aria-hidden=\"true\"></i></div>-->\r\n            <!--</form>-->\r\n\r\n            <!--<div class=\"commentWrap\" v-if=\"post.commentItems\"-->\r\n                 <!--:class=\"{'is-collapsed' : post.collapsed }\">-->\r\n                <!--<div class=\"comment__item\" v-for=\"commentItem in post.commentItems\"-->\r\n                     <!--:key=\"commentItem.PoCmID\">-->\r\n                    <!--<div class=\"commentItem__header\">-->\r\n                        <!--<div class=\"comment__name\">{{commentItem.CONname}}</div>-->\r\n                        <!--<div class=\"comment__date\">{{commentItem.PoCmCreatedDate}}</div>-->\r\n                    <!--</div>-->\r\n                    <!--<div class=\"commentPostContent_show\" v-if=\"checkidcomment !== commentItem.PoCmID\">-->\r\n                        <!--{{commentItem.PoCmContent}}-->\r\n                    <!--</div>-->\r\n                    <!--<textarea v-if=\"readonly === false && checkidcomment === commentItem.PoCmID\" type=\"text\"-->\r\n                              <!--class=\"comment__content\" id=\"commentPostContent\"-->\r\n                              <!--v-model=\"commentItem.PoCmContent\" v-bind:readonly=\"readonly\"-->\r\n                              <!--:class=\"{'editable' : readonly === false && checkidcomment === commentItem.PoCmID }\"></textarea>-->\r\n                    <!--&lt;!&ndash;{{checkidcomment}} ==== {{commentItem.PoCmID}} === {{readonly}}<br/>&ndash;&gt;-->\r\n\r\n                    <!--<span class=\"edit\" @click=\"editClick(commentItem.PoCmID)\" v-if=\"showEdit\">-->\r\n                        <!--Edit .-->\r\n                    <!--</span>-->\r\n\r\n                    <!--<span class=\"save\" @click=\"saveClick(commentItem.PoCmID, commentItem.PoCmContent)\"-->\r\n                          <!--:class=\"{'d-none' : readonly === true || checkidcomment !== commentItem.PoCmID}\">Save . </span>-->\r\n                    <!--&lt;!&ndash;<span class=\"delete\"&ndash;&gt;-->\r\n                    <!--&lt;!&ndash;@click=\"deleteComment(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">Delete</span>&ndash;&gt;-->\r\n                    <!--<span class=\"delete\"-->\r\n                          <!--@click=\"showDeleteModal(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">-->\r\n                        <!--Delete-->\r\n                    <!--</span>-->\r\n                    <!--<AlertComponent :showModal=\"deleteModalShow\" @cancelClick=\"closeDeleteModal\"-->\r\n                                    <!--@okClick=\"deleteComment\"/>-->\r\n                <!--</div>-->\r\n                <!--<button v-on:click=\" post.collapsed = !post.collapsed \"-->\r\n                        <!--:class=\"{'d-none' : !post.collapsed }\" v-if=\"post.commentItems.length !== 2\">Display more-->\r\n                    <!--comments-->\r\n                <!--</button>-->\r\n            <!--</div>-->\r\n        <!--</div>-->\r\n        <b-modal class=\"alert-modal\" title=\"ARE YOU SURE?\" ref=\"modal_DeletePost\" @ok=\"deletePost(post)\">\r\n            Once you delete a post, you can't undo it.\r\n        </b-modal>\r\n        <b-modal id=\"modal_EditComponent\" ref=\"modal_EditComponent\" size=\"lg\" hide-footer title=\"Edit Post\"\r\n                 @hidden=\"hideEditModal\">\r\n            <component @result=\"displayResult\" :is=\"obj_SelectedComponent\" :post=\"obj_Post\"></component>\r\n        </b-modal>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import isImage from \"is-image\";\r\n    import DataSource from \"../data/datasource\";\r\n    import AlertComponent from \"./alertComponent\";\r\n    import portfolio from \"../components/Post_Portfolio_Component\";\r\n    import updates from \"../components/Post_Updates_Component.vue\";\r\n\r\n    export default {\r\n        name: 'postComponent',\r\n        components: {AlertComponent, updates, portfolio},\r\n        data() {\r\n            return {\r\n                commentPostContent: \"\",\r\n                readonly: \"\",\r\n                checkidcomment: null,\r\n                systemmsgError: null,\r\n                commentPostID: '',\r\n                deleteModalShow: false,\r\n                showEdit: true,\r\n                deleteCmId: null,\r\n                deleteCmContent: null,\r\n                deleteCmPostId: null,\r\n                deletePostModalShow: false,\r\n\r\n                obj_SelectedComponent: false,\r\n                obj_Post: null,\r\n                result: \"\",\r\n                post: [],\r\n            };\r\n        },\r\n        mounted() {\r\n            this.initPost();\r\n        },\r\n        props: [\"parentPost\", \"checkIfImage\", \"commentitemSubmit\", \"hideComment\", \"isHome\", \"hideSubmenu\"],\r\n        methods: {\r\n            /*#region Download Item Functions*/\r\n            downloadItem() {\r\n                let arr_Promises = [];\r\n                this.showLoading();\r\n\r\n                for (let obj_SelectedItem of this.arrobj_SelectedItem) {\r\n                    let downloadPromise = new Promise((resolve, reject) => {\r\n                        DataSource.shared.downloadFile(obj_SelectedItem.GalID).then((result) => {\r\n                            let file = (result.Table)[0];\r\n                            let a = document.createElement(\"a\");\r\n                            let contentType = this.getContentType(file);\r\n                            let b64Data = file.GalFile;\r\n                            let blob = this.b64toBlob(b64Data, contentType);\r\n\r\n                            a.href = URL.createObjectURL(blob);\r\n                            a.download = (file.GalFileName + file.GalFileExt).toString();\r\n                            a.style.display = \"none\";\r\n                            document.body.appendChild(a);\r\n                            a.click();\r\n                            a.remove();\r\n                            resolve(result);\r\n                        });\r\n                    });\r\n\r\n                    arr_Promises.push(downloadPromise);\r\n                }\r\n\r\n                Promise.all(arr_Promises).then((result) => {\r\n                    this.hideLoading();\r\n                });\r\n            }\r\n            ,\r\n            getContentType(e) {\r\n                let contentType = \"\";\r\n\r\n                switch (e.GalFileExt.toUpperCase()) {\r\n                    case \".PDF\":\r\n                        contentType += \"application/octet-stream\";\r\n                        break;\r\n                    default:\r\n                        contentType += e.GalFileType;\r\n                        break;\r\n                }\r\n\r\n                return contentType;\r\n            }\r\n            ,\r\n            b64toBlob(b64Data, contentType, sliceSize) {\r\n                //Credit to Jeremy Banks @ stackoverflow\r\n                contentType = contentType || '';\r\n                sliceSize = sliceSize || 512;\r\n\r\n                let byteCharacters = atob(b64Data);\r\n                let byteArrays = [];\r\n\r\n                for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n                    let slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n                    let byteNumbers = new Array(slice.length);\r\n                    for (let i = 0; i < slice.length; i++) {\r\n                        byteNumbers[i] = slice.charCodeAt(i);\r\n                    }\r\n\r\n                    let byteArray = new Uint8Array(byteNumbers);\r\n\r\n                    byteArrays.push(byteArray);\r\n                }\r\n\r\n                return new Blob(byteArrays, {type: contentType});\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n            initPost(){\r\n                /*let tempobj = this.parentPost;\r\n                let promise_GetPostFile = DataSource.shared.getPostFile(tempobj.PostID);\r\n                let promise_GetComment = DataSource.shared.getComment(tempobj.PostID);\r\n\r\n                Promise.all([promise_GetPostFile, promise_GetComment]).then((result) => {\r\n                    tempobj.postFiles = result[0].Table;\r\n                    tempobj.commentPostID = tempobj.PostID;\r\n                    tempobj.commentItems = result[1].Table;\r\n                    tempobj.collapsed = true;\r\n                })\r\n\r\n                    .then(()=>{\r\n                        this.post=tempobj;\r\n                    });*/\r\n            },\r\n            isNull(obj) {\r\n                return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\r\n            },\r\n            isImage(obj_File) {\r\n                let ext = String(obj_File.PostItemFileExt).toUpperCase();\r\n                let isImage = false;\r\n\r\n                switch (ext) {\r\n                    case \".PNG\":\r\n                    case \".JPG\":\r\n                    case \".BMP\":\r\n                    case \".GIF\":\r\n                        isImage = true;\r\n                        break;\r\n                    default:\r\n                        isImage = false;\r\n                        break;\r\n                }\r\n\r\n                return isImage;\r\n            },\r\n            getLowSource(file) {\r\n                if (this.isImage(file))\r\n                    return \"data:\" + file.PostItemFileType + \";base64,\" + file.PostItemFileLow;\r\n                else\r\n                    return \"\";\r\n            },\r\n            submitComment(postId) {\r\n                this.$emit('commentitemSubmit', postId, this.commentPostContent);\r\n                this.commentPostContent = \"\";\r\n            },\r\n            saveClick(PoCmID, PoCmContent) {\r\n                this.readonly = true;\r\n                this.showEdit = true;\r\n                this.checkidcomment = null;\r\n                this.$emit(\"commentEdit\", PoCmID, PoCmContent);\r\n            },\r\n            showDeleteModal(deleteCmId, deleteCmContent, deleteCmPostId) {\r\n                this.deleteModalShow = true;\r\n                this.deleteCmId = deleteCmId;\r\n                this.deleteCmContent = deleteCmContent;\r\n                this.deleteCmPostId = deleteCmPostId;\r\n            },\r\n            closeDeleteModal() {\r\n                this.deleteModalShow = false;\r\n            },\r\n            editClick(PoCmID) {\r\n                this.showEdit = false;\r\n                this.readonly = false;\r\n                this.checkidcomment = PoCmID;\r\n            },\r\n            deleteComment() {\r\n                this.$emit(\"commentDelete\", this.deleteCmId, this.deleteCmContent, this.deleteCmPostId);\r\n                this.closeDeleteModal();\r\n            },\r\n            removePost() {\r\n                this.$refs.modal_DeletePost.show();\r\n            },\r\n            deletePost(post) {\r\n                DataSource.shared.softDeletePost(post.PostID).then((result) => {\r\n                });\r\n            },\r\n            editPost(post) {\r\n                DataSource.shared.getPostAllTaggingStudentsByPostID(post.PostID)\r\n                    .then((result) => {\r\n                        this.post.arrobj_SelectedStudents = result.Table;\r\n                        this.obj_Post = this.post;\r\n\r\n                        switch (this.obj_Post.PostType.toUpperCase()) {\r\n                            case \"PORTFOLIO\":\r\n                                this.obj_SelectedComponent = portfolio;\r\n                                break;\r\n                            case \"UPDATE\":\r\n                                this.obj_SelectedComponent = updates;\r\n                                break;\r\n                        }\r\n\r\n                        this.showEditModal()\r\n                    });\r\n\r\n            },\r\n            showEditModal() {\r\n                this.$refs.modal_EditComponent.show();\r\n            },\r\n            hideEditModal() {\r\n                this.obj_SelectedComponent = false;\r\n                this.$refs.modal_EditComponent.hide();\r\n            },\r\n            displayResult(value) {\r\n                if (value == \"TRUE\")\r\n                    this.result = \"Successfully posted\";\r\n                else\r\n                    this.result = \"Something went wrong. Please inform the adminstrator\";\r\n\r\n                this.hideEditModal();\r\n            },\r\n            // checkIfImage(file) {\r\n            //     return isImage(file);\r\n            // },\r\n            // async commentEdit(PoCmID, PoCmContent) {\r\n            //     this.error = \"\";\r\n            //     //this.results = \"<< Requesting.. >>\";\r\n            //     try {\r\n            //\r\n            //         this.commentPostID = PoCmID;\r\n            //         this.commentPostContent = PoCmContent;\r\n            //         this.actionMode = \"Edit\";\r\n            //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\r\n            //         if (commentResponse) {\r\n            //             switch (commentResponse.code) {\r\n            //                 case \"1\":\r\n            //                     // reset all input filed to blank\r\n            //                     this.commentPostID = null;\r\n            //                     this.commentPostContent = \"\";\r\n            //                     this.readonly = true;\r\n            //                     // this.results = `Post Submitted`;\r\n            //                     // this.success = 'Post Submitted, activity will be active in a while';\r\n            //                     break;\r\n            //                 case \"88\":\r\n            //                     this.results = `Please Login to submit post`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 case \"99\":\r\n            //                     this.results = `Please fill in content`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 // default:\r\n            //                 //     alert(\"Please try again later\");\r\n            //                 //     this.results = JSON.stringify(response);\r\n            //             }\r\n            //         }\r\n            //     } catch (e) {\r\n            //         console.log(e);\r\n            //         this.error = e;\r\n            //     }\r\n            // },\r\n            // async commentEdit(PoCmID, PoCmContent) {\r\n            //     this.error = \"\";\r\n            //     //this.results = \"<< Requesting.. >>\";\r\n            //     try {\r\n            //\r\n            //         this.commentPostID = PoCmID;\r\n            //         this.commentPostContent = PoCmContent;\r\n            //         this.actionMode = \"Edit\";\r\n            //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\r\n            //         if (commentResponse) {\r\n            //             switch (commentResponse.code) {\r\n            //                 case \"1\":\r\n            //                     // reset all input filed to blank\r\n            //                     this.commentPostID = null;\r\n            //                     this.commentPostContent = \"\";\r\n            //                     this.readonly = true;\r\n            //                     // this.results = `Post Submitted`;\r\n            //                     // this.success = 'Post Submitted, activity will be active in a while';\r\n            //                     break;\r\n            //                 case \"88\":\r\n            //                     this.results = `Please Login to submit post`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 case \"99\":\r\n            //                     this.results = `Please fill in content`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 // default:\r\n            //                 //     alert(\"Please try again later\");\r\n            //                 //     this.results = JSON.stringify(response);\r\n            //             }\r\n            //         }\r\n            //     } catch (e) {\r\n            //         console.log(e);\r\n            //         this.error = e;\r\n            //     }\r\n            // },\r\n        },\r\n    };\r\n</script>\r\n<style scoped>\r\n</style>\r\n<style>\r\n    #modal_EditComponent .modal-lg {\r\n        /*max-width: 95% !important;*/\r\n    }\r\n</style>"]}]}