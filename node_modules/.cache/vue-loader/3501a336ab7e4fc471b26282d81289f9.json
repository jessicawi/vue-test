{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\StaffPost.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\StaffPost.vue","mtime":1555608750300},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DataSource from \"../data/datasource\";\nimport {required, minLength} from 'vuelidate/lib/validators';\nimport isImage from \"is-image\";\nimport PostComponent from \"../components/postCompnent\";\nimport BroadcastList from \"../components/BroadcastListCompnent\";\nimport VueTagsInput from '@johmun/vue-tags-input';\nimport portfolio from \"../components/Post_Portfolio_Component\";\nimport updates from \"../components/Post_Updates_Component.vue\";\nimport broadcast from \"../components/Post_Broadcast_Component.vue\";\nimport $ from 'jquery';\nimport Cookies from \"js-cookie\";\n\n\n// import RichTextEditor from \"../components/RichTextEditor/RichTextEditor\";\n\nexport default {\n    name: 'staffPost',\n    components: {\n        PostComponent,\n        VueTagsInput,\n        // At,\n        BroadcastList\n    },\n    data() {\n        return {\n            modalTitle: null,\n            files: [],\n            systemmsgError: false,\n            isModalOpen: false,\n            token: null,\n            userType: \"\",\n            list: [],\n            error: \"\",\n            staffPostResults: \"\",\n            results: \"\",\n            postContent: \"\",\n            addPostContent: \"\",\n            tagAcademicYearID: \"\",\n            profolio: \"No\",\n            tagClassID: \"\",\n            tagLevelID: \"\",\n            // files: [],\n            content: '',\n            selectedFile: null,\n            success: \"\",\n            isLoading: true,\n            saveResponse: \"\",\n            PostItemPath: \"\",\n            tagResponseText: \"123\",\n            academicYearTable: [],\n            classesTable: [],\n            levelsTable: [],\n            studentTable: [],\n\n            PostID: \"\",\n            commentPostContent: \"\",\n            commentPostID: \"\",\n            actionMode: \"\",\n            readonly: true,\n            checkidcomment: \"\",\n            showDeleteModal: false,\n            query: '',\n            tag: '',\n            tags: [],\n            isParent: \"\",\n\n            obj_SelectedComponent: false,\n            int_NumberOfPost: 3,\n\n            arrobj_BroadcastPost: [],\n            intervalCheckNew: {},\n            bool_ShowRefresh: false,\n        };\n    },\n    filters: {\n        stringify(value) {\n            return JSON.stringify(value, null, 2);\n        }\n    },\n    computed: {\n        items() {\n            return this.studentTable.filter(i => {\n                return i.text.toLowerCase().indexOf(this.tag.toLowerCase()) !== -1;\n            });\n        },\n    },\n    /*async mounted() {\n        this.loadPosts();\n    },*/\n    mounted() {\n        const self = this;\n        this.loadPosts();\n        this.loadBroadcast();\n        /*#region Scroll Loader Functions*/\n        $(window).scroll(self.debounce(() => {\n                if (self.getScrollPercent() >= 50) {\n                    this.isParent = Cookies.get('userTypeSession');\n                    let obj_LastPost = !this.isNull(this.list) ? this.list[this.list.length - 1] : \"\";\n                    let promise_GetPosts = this.isParent === \"Parent\" ? DataSource.shared.getParentPost(this.int_NumberOfPost, obj_LastPost.PostID) : DataSource.shared.getStaffPost(this.int_NumberOfPost, obj_LastPost.PostID);\n\n\n                    promise_GetPosts.then((response) => {\n                        if (response.Table) {\n                            this.list.push.apply(this.list, response.Table);\n                        }\n                    });\n\n                    /*if (this.isParent === \"Parent\") {\n                        DataSource.shared.getParentPost(this.int_NumberOfPost, str_LastPostID).then((response) => {\n                            if (response.Table) {\n                                for (let item of response.Table) {\n                                    this.list.push.apply(this.list, response.Table);\n\n                                    DataSource.shared.getPostFile(item.PostID).then((fileRes) => {\n                                        if (fileRes.Table) {\n                                            item.postFiles = fileRes.Table;\n                                        }\n                                        item.commentPostID = item.PostID;\n                                    }).then(() => {\n                                        DataSource.shared.getComment(item.PostID).then((getCommentResponse) => {\n                                            if (getCommentResponse.Table) {\n                                                item.commentItems = getCommentResponse.Table;\n                                                item.collapsed = true;\n                                            }\n                                        });\n                                    });\n                                }\n                            }\n                        });\n                    } else {\n                        DataSource.shared.getStaffPost(this.int_NumberOfPost, str_LastPostID).then((response) => {\n                            if (response.Table) {\n                                this.list.push.apply(this.list, response.Table);\n\n                                for (let item of response.Table) {\n                                    DataSource.shared.getPostFile(item.PostID).then((fileRes) => {\n                                        if (fileRes.Table) {\n                                            item.postFiles = fileRes.Table;\n                                        }\n                                        item.commentPostID = item.PostID;\n                                    }).then(() => {\n                                        DataSource.shared.getComment(item.PostID).then((getCommentResponse) => {\n                                            if (getCommentResponse.Table) {\n                                                item.commentItems = getCommentResponse.Table;\n                                                item.collapsed = true;\n                                            }\n                                        });\n                                    });\n                                }\n                            }\n                        });\n                    }*/\n                }\n            }, 250\n        ));\n        /*#endregion*/\n    },\n    methods: {\n        initIntervalCheckNew() {\n            if (!this.bool_ShowRefresh)\n                this.intervalCheckNew = setInterval(() => {\n                    this.CheckNew();\n                }, 300000);\n        },\n\n        CheckNew() {\n            this.isParent = Cookies.get('userTypeSession');\n\n            let promise_GetPosts = this.isParent === \"Parent\" ?\n                DataSource.shared.getParentPost(1, null, null)\n                : DataSource.shared.getStaffPost(1, null, null);\n\n            promise_GetPosts.then((response) => {\n                if (response.Table && (new Date(response.Table[0].PostCreatedDate)) > (new Date(this.list[0].PostCreatedDate))) {\n                    this.bool_ShowRefresh = true;\n                    clearInterval(this.intervalCheckNew);\n                }\n            });\n        },\n\n        showMoreBroadcastModal() {\n            this.$refs.modal_ShowMoreBroadcast.show();\n        },\n\n        isNull(obj) {\n            return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\n        }\n        ,\n        /*#region Scroll Loader Functions*/\n        getScrollPercent() {\n            //Credits to Phil Ricketts @ stackoverflow\n            let height = document.documentElement,\n                body = document.body,\n                scrollTop = 'scrollTop',\n                scrollHeight = 'scrollHeight';\n\n            return (height[scrollTop] || body[scrollTop]) / ((height[scrollHeight] || body[scrollHeight]) - height.clientHeight) * 100;\n        }\n        ,\n        isScrollable() {\n            return $(document).height() > $(window).height();\n        }\n        ,\n        debounce(func, wait, immediate) {\n            // Returns a function, that, as long as it continues to be invoked, will not\n            // be triggered. The function will be called after it stops being called for\n            // N milliseconds. If `immediate` is passed, trigger the function on the\n            // leading edge, instead of the trailing.\n            let timeout, result;\n            let self = this;\n\n            let later = function (context, args) {\n                timeout = null;\n                if (args) result = func.apply(context, args);\n            };\n\n            let debounced = self.restArguments(function (args) {\n                if (timeout) clearTimeout(timeout);\n                if (immediate) {\n                    let callNow = !timeout;\n                    timeout = setTimeout(later, wait);\n                    if (callNow) result = func.apply(this, args);\n                } else {\n                    timeout = self.delay(later, wait, this, args);\n                }\n\n                return result;\n            });\n\n            debounced.cancel = function () {\n                clearTimeout(timeout);\n                timeout = null;\n            };\n\n            return debounced;\n        }\n        ,\n        delay(func, wait, ...args) {\n            // Lodash Delay\n            /**\n             * Invokes `func` after `wait` milliseconds. Any additional arguments are\n             * provided to `func` when it's invoked.\n             *\n             * @since 0.1.0\n             * @category Function\n             * @param {Function} func The function to delay.\n             * @param {number} wait The number of milliseconds to delay invocation.\n             * @param {...*} [args] The arguments to invoke `func` with.\n             * @returns {number} Returns the timer id.\n             * @example\n             *\n             * delay(text => console.log(text), 1000, 'later')\n             * // => Logs 'later' after one second.\n             */\n            if (typeof func != 'function') {\n                throw new TypeError('Expected a function');\n            }\n            return setTimeout(func, +wait || 0, ...args);\n        }\n        ,\n        restArguments(func, startIndex) {\n            // Some functions take a variable number of arguments, or a few expected\n            // arguments at the beginning and then a variable number of values to operate\n            // on. This helper accumulates all remaining arguments past the function?s\n            // argument length (or an explicit `startIndex`), into an array that becomes\n            // the last argument. Similar to ES6?s \"rest parameter\".\n            startIndex = startIndex == null ? func.length - 1 : +startIndex;\n            return function () {\n                let length = Math.max(arguments.length - startIndex, 0),\n                    rest = Array(length),\n                    index = 0;\n                for (; index < length; index++) {\n                    rest[index] = arguments[index + startIndex];\n                }\n                switch (startIndex) {\n                    case 0:\n                        return func.call(this, rest);\n                    case 1:\n                        return func.call(this, arguments[0], rest);\n                    case 2:\n                        return func.call(this, arguments[0], arguments[1], rest);\n                }\n                let args = Array(startIndex + 1);\n                for (index = 0; index < startIndex; index++) {\n                    args[index] = arguments[index];\n                }\n                args[startIndex] = rest;\n                return func.apply(this, args);\n            };\n        }\n        ,\n        /*#endregion*/\n        loadPosts() {\n            // this.showSession()\n            // user menu\n            $(\"html, body\").animate({scrollTop: 0}, \"fast\");\n            this.bool_ShowRefresh = false;\n            this.initIntervalCheckNew();\n            this.isParent = Cookies.get('userTypeSession');\n            this.list = [];\n            let promise_GetPosts = this.isParent === \"Parent\" ?\n                DataSource.shared.getParentPost(this.int_NumberOfPost)\n                : DataSource.shared.getStaffPost(this.int_NumberOfPost);\n\n            promise_GetPosts.then((response) => {\n                if (response.Table)\n                    this.list.push.apply(this.list, response.Table);\n\n                this.isLoading = false;\n            });\n\n\n            /*#region Past revision*/\n            /*for (let item of response.Table) {\n            DataSource.shared.getPostFile(item.PostID).then((fileRes) => {\n                if (fileRes.Table) {\n                    item.postFiles = fileRes.Table;\n                }\n                item.commentPostID = item.PostID;\n            }).then(() => {\n                DataSource.shared.getComment(item.PostID).then((getCommentResponse) => {\n                    if (getCommentResponse.Table) {\n                        item.commentItems = getCommentResponse.Table;\n                        item.collapsed = true;\n                    }\n                });\n            });\n        }\n\n        this.list = response.Table;\n    }*/\n\n            // if (this.isParent === \"Parent\") {\n            //     DataSource.shared.getParentPost(this.int_NumberOfPost).then((response) => {\n            //         this.list = [];\n            //         if (response.Table) {\n            //             for (let item of response.Table) {\n            //                 this.list.push.apply(this.list, response.Table);\n            //\n            //                 DataSource.shared.getPostFile(item.PostID).then((fileRes) => {\n            //                     if (fileRes.Table) {\n            //                         item.postFiles = fileRes.Table;\n            //                     }\n            //                     item.commentPostID = item.PostID;\n            //                 }).then(() => {\n            //                     DataSource.shared.getComment(item.PostID).then((getCommentResponse) => {\n            //                         if (getCommentResponse.Table) {\n            //                             item.commentItems = getCommentResponse.Table;\n            //                             item.collapsed = true;\n            //                         }\n            //                     });\n            //                 });\n            //             }\n            //         }\n            //     });\n            // } else {\n            //\n            // }\n\n            // if (isParent === \"Parent\") {\n            //     let response = await DataSource.shared.getParentPost(this.int_NumberOfPost, \"\");\n            //     if (response.Table) {\n            //         for (let item of response.Table) {\n            //             const fileRes = await DataSource.shared.getPostFile(item.PostID);\n            //             const getCommentResponse = await DataSource.shared.getComment(item.PostID);\n            //             if (getCommentResponse.Table) {\n            //                 item.commentItems = getCommentResponse.Table;\n            //                 item.collapsed = true;\n            //             }\n            //             if (fileRes.Table) {\n            //                 item.postFiles = fileRes.Table;\n            //             }\n            //             item.commentPostID = item.PostID;\n            //         }\n            //         this.list = response.Table;\n            //     }\n            // } else {\n            //     let response = await DataSource.shared.getStaffPost(this.int_NumberOfPost, \"\");\n            //     if (response.Table) {\n            //         for (let item of response.Table) {\n            //             const fileRes = await DataSource.shared.getPostFile(item.PostID);\n            //             const getCommentResponse = await DataSource.shared.getComment(item.PostID);\n            //             if (getCommentResponse.Table) {\n            //                 item.commentItems = getCommentResponse.Table;\n            //                 item.collapsed = true;\n            //             }\n            //             if (fileRes.Table) {\n            //                 item.postFiles = fileRes.Table;\n            //             }\n            //             item.commentPostID = item.PostID;\n            //         }\n            //         this.list = response.Table;\n            //     }\n            // }\n\n\n            // try {\n            //     let tagResponse = await DataSource.shared.getPostDropdown();\n            //\n            //     if (tagResponse.AcademicYearTable && tagResponse.AcademicYearTable.Table) {\n            //         let uniqueYears = [];\n            //         tagResponse.AcademicYearTable.Table.forEach(object => {\n            //             const isExist = uniqueYears.find(year => year.SMT_Code === object.SMT_Code);\n            //             if (!isExist) {\n            //                 uniqueYears.push(object);\n            //             }\n            //         });\n            //         this.academicYearTable = uniqueYears;\n            //     }\n            //     if (tagResponse.ClassesTable && tagResponse.ClassesTable.Table) {\n            //         let uniqueClass = [];\n            //         tagResponse.ClassesTable.Table.forEach(object => {\n            //             const isExist = uniqueClass.find(year => year.PK_Class_ID === object.PK_Class_ID);\n            //             if (!isExist) {\n            //                 uniqueClass.push(object);\n            //             }\n            //         });\n            //         this.classesTable = uniqueClass;\n            //     }\n            //     if (tagResponse.LevelsTable && tagResponse.LevelsTable.Table) {\n            //\n            //         let uniqueLevel = [];\n            //         tagResponse.LevelsTable.Table.forEach(object => {\n            //             const isExist = uniqueLevel.find(level => level.SC_FK_CourseID === object.SC_FK_CourseID);\n            //             if (!isExist) {\n            //                 uniqueLevel.push(object);\n            //             }\n            //         });\n            //\n            //         this.levelsTable = uniqueLevel;\n            //     }\n            //     if (tagResponse.StudentTable && tagResponse.StudentTable.Table) {\n            //         let uniqueStudent = [];\n            //         tagResponse.StudentTable.Table.forEach(object => {\n            //             const isExist = uniqueStudent.find(student => student.Student_ID === object.Student_ID);\n            //             if (!isExist) {\n            //                 const selectedValue = {\n            //                     Student_ID: object.Student_ID,\n            //                     text: object.Full_Name,\n            //                     Sex: object.Sex,\n            //                     // email: object.email,\n            //                     Status: object.Status\n            //                 };\n            //                 uniqueStudent.push(selectedValue);\n            //             }\n            //         });\n            //         // this.studentTable = tagResponse.StudentTable.Table;\n            //         this.studentTable = uniqueStudent;\n            //     }\n            //\n            //     this.userType = Cookies.get('userTypeSession');\n            //\n            // } catch (e) {\n            //     console.log(e, '  errrr');\n            // }\n            // this.isLoading = false;\n            /*#endregion*/\n        }\n        ,\n\n        loadBroadcast() {\n            this.isParent = Cookies.get('userTypeSession');\n            this.arrobj_BroadcastPost = [];\n\n            let promise_GetPosts = this.isParent === \"Parent\" ?\n                DataSource.shared.getParentPost(10, null, \"BROADCAST\")\n                : DataSource.shared.getStaffPost(10, null, \"BROADCAST\");\n\n            promise_GetPosts.then((response) => {\n                if (response.Table)\n                    this.arrobj_BroadcastPost.push.apply(this.arrobj_BroadcastPost, response.Table);\n            });\n        },\n        hideComponentModal() {\n            this.obj_SelectedComponent = false;\n            this.isModalOpen = false;\n            this.modalTitle = null;\n        }\n        ,\n        displayResult(value) {\n            //TODO: Show Message\n            if (value == \"TRUE\") {\n                this.hideComponentModal();\n            }\n            // this.success = \"Successfully posted\";\n            // else\n            // this.success = \"Something went wrong. Please inform the adminstrator\";\n\n\n        }\n        ,\n        showUpdates() {\n            this.modalTitle = \"Post\";\n            this.obj_SelectedComponent = updates;\n            this.isModalOpen = true;\n        }\n        ,\n        showPortfolio() {\n            this.modalTitle = \"Portfolio\";\n            this.obj_SelectedComponent = portfolio;\n            this.isModalOpen = true;\n        }\n        ,\n        showBroadcast() {\n            this.modalTitle = \"Broadcast\";\n            this.obj_SelectedComponent = broadcast;\n            this.isModalOpen = true;\n        },\n        inputChange(input) {\n            this.postContent = input;\n        }\n        ,\n        showModal() {\n            this.isModalOpen = true;\n        }\n        ,\n        hideModal() {\n            this.isModalOpen = false;\n        }\n        ,\n        onFileChanged(event) {\n            this.selectedFile = event.target.files;\n            this.getImagePreviews();\n        }\n        ,\n        async onUpload() {\n            // const formData = new FormData();\n            // formData.append('myFile', this.selectedFile, this.selectedFile.name);\n            // this.formData = formData;\n            // await DataSource.shared.uploadFile(this.selectedFile);\n        }\n        ,\n        async onSubmit() {\n            this.$v.$touch();\n            this.error = \"\";\n            //this.results = \"<< Requesting.. >>\";\n            try {\n                const studentsIds = this.tags.map(d => d.Student_ID);\n                const saveResponse = await DataSource.shared.savePostUpdate(this.selectedFile, this.addPostContent, studentsIds, this.tagClassID, this.tagLevelID);\n\n                if (saveResponse) {\n                    switch (saveResponse.code) {\n                        case \"1\":\n                            this.isModalOpen = false;\n                            // reset all input filed to blank\n                            this.selectedFile = null;\n                            this.$refs.fileupload.value = \"\";\n                            this.addPostContent = \"\";\n                            this.tagAcademicYearID = null;\n\n                            this.tagLevelID = null;\n                            this.tagClassID = null;\n                            this.results = `Post Submitted`;\n                            this.success = 'Post Submitted, activity will be active in a while';\n                            break;\n                        case \"88\":\n                            this.results = `Please Login to submit post`;\n                            this.systemmsgError = true;\n                            break;\n                        case \"99\":\n                            this.results = `Please fill in content`;\n                            this.systemmsgError = true;\n                            break;\n                        // default:\n                        //     alert(\"Please try again later\");\n                        //     this.results = JSON.stringify(response);\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n                this.error = e;\n            }\n\n        }\n        ,\n        async commentitemSubmit(postId, comment) {\n            this.error = \"\";\n            //this.results = \"<< Requesting.. >>\";\n            try {\n\n                this.commentPostID = postId;\n                const commentResponse = await DataSource.shared.saveComment(this.commentPostID, comment);\n\n\n                if (commentResponse) {\n                    switch (commentResponse.code) {\n                        case \"1\":\n                            // reset all input filed to blank\n                            this.commentPostID = null;\n                            this.commentPostContent = \"\";\n\n                        //    const newComment = await DataSource.shared.getComment(commentPostID);\n\n                            this.list.find(item => {\n\n\n                                if (item.PostID === commentPostID) {\n                                    item.commentItems = newComment.Table;\n                                    return item;\n                                }\n\n                            });\n\n                           // this.$forceUpdate();\n\n\n                            // this.results = `Post Submitted`;\n                            // this.success = 'Post Submitted, activity will be active in a while';\n                            break;\n                        case \"88\":\n                            this.results = `Please Login to submit post`;\n                            this.systemmsgError = true;\n                            break;\n                        case \"99\":\n                            this.results = `Please fill in content`;\n                            this.systemmsgError = true;\n                            break;\n                        // default:\n                        //     alert(\"Please try again later\");\n                        //     this.results = JSON.stringify(response);\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n                this.error = e;\n            }\n        }\n        ,\n        async commentEdit(PoCmID, PoCmContent) {\n            this.error = \"\";\n            try {\n                this.actionMode = \"Edit\";\n                const commentResponse = await DataSource.shared.editComment(PoCmID, PoCmContent, this.actionMode);\n                if (commentResponse) {\n                    switch (commentResponse.code) {\n                        case \"1\":\n                            // reset all input filed to blank\n                            this.commentPostID = null;\n                            this.commentPostContent = \"\";\n                            this.readonly = true;\n\n                           // const newComment = await DataSource.shared.getComment(PoCmID);\n                            this.list.find(item => {\n\n                                if (item.PostID === PoCmID) {\n                                    item.commentItems = newComment.Table;\n                                    return item;\n                                }\n\n                            });\n                            break;\n                        case \"88\":\n                            this.results = `Please Login to submit post`;\n                            this.systemmsgError = true;\n                            break;\n                        case \"99\":\n                            this.results = `Please fill in content`;\n                            this.systemmsgError = true;\n                            break;\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n                this.error = e;\n            }\n        }\n        ,\n        async okClick() {\n\n        }\n        ,\n        async commentDelete(PoCmID, PoCmContent, postId) {\n            this.error = \"\";\n            try {\n                this.actionMode = \"Delete\";\n                const deleteCommentResponse = await DataSource.shared.deleteComment(PoCmID, PoCmContent, this.actionMode);\n                if (deleteCommentResponse) {\n                    switch (deleteCommentResponse.code) {\n                        case \"1\":\n                            // reset all input filed to blank\n                            this.commentPostID = null;\n                            this.commentPostContent = \"\";\n\n                       //     const newComment = await DataSource.shared.getComment(PoCmID);\n\n                            this.list.find(item => {\n\n                                if (item.PostID === postId) {\n                                    item.commentItems = item.commentItems.filter(comment => comment.PoCmID !== PoCmID);\n                                    return item;\n                                }\n\n                            });\n                          //  this.$forceUpdate();\n                            break;\n                        case \"88\":\n                            this.results = `Please Login to submit post`;\n                            this.systemmsgError = true;\n                            break;\n                        case \"99\":\n                            this.results = `Please fill in content`;\n                            this.systemmsgError = true;\n                            break;\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n                this.error = e;\n            }\n        }\n        ,\n        async disableReadonly(PoCmID) {\n            this.error = \"\";\n            try {\n                this.readonly = false;\n                this.checkidcomment = PoCmID;\n            } catch (e) {\n                console.log(e);\n                this.error = e;\n            }\n        }\n        ,\n        getImagePreviews() {\n            /*\n              Iterate over all of the files and generate an image preview for each one.\n            */\n            for (let i = 0; i < this.selectedFile.length; i++) {\n                /*\n                  Ensure the file is an image file\n                */\n                if (/\\.(jpe?g|png|gif)$/i.test(this.selectedFile[i].name)) {\n                    /*\n                      Create a new FileReader object\n                    */\n                    let reader = new FileReader();\n\n                    /*\n                      Add an event listener for when the file has been loaded\n                      to update the src on the file preview.\n                    */\n                    reader.addEventListener(\"load\", function () {\n                        this.$refs['image' + parseInt(i)][0].src = reader.result;\n                    }.bind(this), false);\n\n                    /*\n                      Read the data for the file in through the reader. When it has\n                      been loaded, we listen to the event propagated and set the image\n                      src to what was loaded from the reader.\n                    */\n                    reader.readAsDataURL(this.selectedFile[i]);\n                }\n            }\n        }\n        ,\n        clearPreview() {\n            this.selectedFile = null;\n        }\n        ,\n    }\n    ,\n    validations: {\n        updateContent: {\n            required\n            // minLength: minLength(4)\n        }\n    }\n    ,\n    computed: {\n        filteredBroadcastPost: function () {\n            return this.arrobj_BroadcastPost.slice(0, 3);\n        },\n    },\n};\n",{"version":3,"sources":["StaffPost.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StaffPost.vue","sourceRoot":"src/pages","sourcesContent":["<template>\r\n    <div id=\"staff-post\" class=\"container\">\r\n        <div class=\"profile-student\" v-if=\"isParent === 'Parent' \">\r\n            <div class=\"profile-student__wrapper\">\r\n                <img src=\"../assets/boy.png\">\r\n                <span class=\"studentName\"><strong>Alexander</strong><br/>Student Name</span>\r\n                <span class=\"teacherName\"><strong>Alice</strong><br/>Teacher Name</span>\r\n                <span class=\"\"><strong>SG-016-16-0038</strong><br/>Student ID</span>\r\n                <span class=\"\"><strong>Year 2018: 01/01/2018 - 31/12/2018</strong><br/>Academic Year</span>\r\n                <span class=\"\"><strong>Class One</strong><br/>Class</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"whitespace-30\"></div>\r\n        <div class=\"row\">\r\n            <!--<b>result:</b> {{staffPostResults}}-->\r\n            <vs-col vs-justify=\"center\" vs-w=\"4\" class=\"right-sideBar\">\r\n                <div class=\"dashboard-logo mt-4 mb-3\"><img src=\"../assets/kagami-long.png\"/></div>\r\n                <div class=\"sideBarSection__wrapper\">\r\n                    <div class=\"sideBarSection__item\">\r\n                        <div class=\"subtitle\">\r\n                            <h6>Communities</h6>\r\n                        </div>\r\n                        <div class=\"desc flex\">\r\n                            <ul>\r\n                                <li><span class=\"sideBarSection__img\"><img src=\"../assets/boy.png\"></span> N2 Inquirers\r\n                                    Class\r\n                                </li>\r\n                                <li><span class=\"sideBarSection__img\"><img src=\"../assets/boy.png\"></span> K2 Explorers\r\n                                    Class\r\n                                </li>\r\n                                <li><span class=\"sideBarSection__img\"><img src=\"../assets/boy.png\"></span> PSA Group\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"sideBarSection__item\">\r\n                        <div class=\"subtitle\">\r\n                            <h6>Upcoming Events</h6>\r\n                        </div>\r\n                        <div class=\"desc\">\r\n                            <ul>\r\n                                <li>22 DEC Christmas Party</li>\r\n                                <li>24 DEC Half Day Closure</li>\r\n                                <li>25 DEC Full Day Closure</li>\r\n                                <li>30 DEC Celebration of learning</li>\r\n                                <li>31 DEC Full Day Closure</li>\r\n                                <li>01 JAN Full Day Closure</li>\r\n                                <li>07 JAN Start of Term 1</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </vs-col>\r\n            <div class=\"col-md-8 mt-4 pb-4\">\r\n                <div class=\"notification\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-9\">\r\n                            <h4 class=\"text-left mb-3\">Broadcast</h4>\r\n                        </div>\r\n                        <div class=\"col-md-3\">\r\n                            <button @click=\"showMoreBroadcastModal\" class=\"btn btn-link\">Show More <i\r\n                                    class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i></button>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-4\" v-for=\"obj_BroadcastPost of filteredBroadcastPost\"\r\n                             :key=\"obj_BroadcastPost.id\">\r\n                            <div class=\"notification__item\">\r\n                                <div class=\"desc\">\r\n                                    <span>{{obj_BroadcastPost.PostContent}}</span>\r\n                                </div>\r\n                                <div class=\"notification-item__footer\">\r\n                                    <div class=\"notification__footer-item\">\r\n                                        {{obj_BroadcastPost.CONname}}<br/>\r\n                                        {{obj_BroadcastPost.PostCreatedBy}}\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"notification-item__footer\">\r\n                                    <div class=\"notification__footer-item\">\r\n                                        <button class=\"btn text-center\">Mark as read</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <!--<div class=\"notification\">\r\n                    <h4 class=\"text-left mb-3\">Important Notification</h4>\r\n                    <div class=\"row\">\r\n                        <div class=\" col-md-4\">\r\n                            <div class=\"notification__item\">\r\n                                <div class=\"subtitle\">\r\n                                    <h6>Parent Teacher Conference 2018</h6>\r\n                                </div>\r\n                                <div class=\"desc\">\r\n                                    <span>Please sign up for a slot for the Parent Teachers Conference by 30 Nov 2018.</span>\r\n                                </div>\r\n                                <div class=\"notification-item__footer \">\r\n                                    <div class=\"notification__footer-item\">\r\n                                        Ms Lisa<br/>\r\n                                        23 February at 19:36\r\n                                    </div>\r\n                                    <div class=\"notification__footer-item\">\r\n                                        <button class=\"btn text-center\">Mark as read</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div class=\" col-md-4\">\r\n                            <div class=\"notification__item\">\r\n                                <div class=\"subtitle\">\r\n                                    <h6>Parent Teacher Conference 2018</h6>\r\n                                </div>\r\n                                <div class=\"desc\">\r\n                                    <span>Please sign up for a slot for the Parent Teachers Conference by 30 Nov 2018.</span>\r\n                                </div>\r\n                                <div class=\"notification-item__footer \">\r\n                                    <div class=\"notification__footer-item\">\r\n                                        Ms Lisa<br/>\r\n                                        23 February at 19:36\r\n                                    </div>\r\n                                    <div class=\"notification__footer-item\">\r\n                                        <button class=\"btn text-center\">Mark as read</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\" col-md-4\">\r\n                            <div class=\"notification__item\">\r\n                                <div class=\"subtitle\">\r\n                                    <h6>Parent Teacher Conference 2018</h6>\r\n                                </div>\r\n                                <div class=\"desc\">\r\n                                    <span>Please sign up for a slot for the Parent Teachers Conference by 30 Nov 2018.</span>\r\n                                </div>\r\n                                <div class=\"notification-item__footer \">\r\n                                    <div class=\"notification__footer-item\">\r\n                                        Ms Lisa<br/>\r\n                                        23 February at 19:36\r\n                                    </div>\r\n                                    <div class=\"notification__footer-item\">\r\n                                        <button class=\"btn text-center\">Mark as read</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>-->\r\n\r\n                <div class=\"feed-header\">\r\n                    <h4 class=\"text-left\">Activity</h4>\r\n                    <div class=\"addPost\" :class=\"{'d-none' :userType==='Teacher'}\">\r\n                        <b-btn v-b-modal.modal1 @click=\"showBroadcast\"><i class=\"fa fa-bullhorn\" aria-hidden=\"true\"></i>\r\n                            <span>Broadcast</span></b-btn>\r\n                    </div>\r\n                    <div class=\"addPost\" :class=\"{'d-none' :userType==='Teacher'}\">\r\n                        <b-btn v-b-modal.modal1 @click=\"showUpdates\"><i class=\"fa fa-newspaper-o\"\r\n                                                                        aria-hidden=\"true\"></i> <span>Updates</span>\r\n                        </b-btn>\r\n                    </div>\r\n                    <div class=\"addPost\" :class=\"{'d-none' :userType==='Teacher'}\">\r\n                        <b-btn v-b-modal.modal1 @click=\"showPortfolio\"><i class=\"fa fa-book\" aria-hidden=\"true\"></i>\r\n                            <span>Portfolio</span></b-btn>\r\n                    </div>\r\n                </div>\r\n                <div class=\"success\">{{success}}</div>\r\n                <div v-if=\"isLoading\">Loading...</div>\r\n\r\n                <div class=\"\" v-for=\"object of list\"\r\n                     :key=\"`${object.PostID}${object.commentItems ? object.commentItems.length : ''}`\">\r\n                    <PostComponent\r\n                            :parent-post=\"object\"\r\n                            @commentitemSubmit=\"commentitemSubmit\"\r\n                            @commentEdit=\"commentEdit\"\r\n                            @commentDelete=\"commentDelete\"\r\n                            :commentPostContent=\"commentPostContent\"\r\n                            :PostID=\"commentPostID\"\r\n                            @loadPosts=\"loadPosts\"\r\n                    />\r\n                    <hr/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        <b-modal id=\"modal_ShowMoreBroadcast\" ref=\"modal_ShowMoreBroadcast\" size=\"lg\" hide-footer title=\"Broadcast\">\r\n            <button class=\"btn btn-primary\" @click=\"showBroadcast\"><i class=\"el-icon-bell\"></i> Create Broadcast\r\n            </button>\r\n            <div class=\"\" v-for=\"object of arrobj_BroadcastPost\" :key=\"object.id\">\r\n                <BroadcastList :parent-post=\"object\" :hideComment=\"true\" :hideSubmenu=\"true\"/>\r\n                <!--<hr/>-->\r\n            </div>\r\n        </b-modal>\r\n        <b-modal id=\"modal1\" size=\"lg\" hide-footer :title=\"modalTitle ? modalTitle : 'Post'\" v-model=\"isModalOpen\"\r\n                 @hidden=\"hideComponentModal\">\r\n            <el-button-group class=\"mb-4 modal-quicklink\">\r\n                <el-button type=\"primary\" @click=\"showBroadcast\" :class=\"{'active':modalTitle === 'Broadcast'}\"><i\r\n                        class=\"fa fa-bullhorn\" aria-hidden=\"true\"></i> <span> Broadcast</span></el-button>\r\n                <el-button type=\"primary\" @click=\"showUpdates\" :class=\"{'active':modalTitle === 'Post'}\"><i\r\n                        class=\"fa fa-newspaper-o\" aria-hidden=\"true\"></i> <span> Updates</span></el-button>\r\n                <el-button type=\"primary\" @click=\"showPortfolio\" :class=\"{'active':modalTitle === 'Portfolio'}\"><i\r\n                        class=\"fa fa-book\" aria-hidden=\"true\"></i> <span> Portfolio</span></el-button>\r\n            </el-button-group>\r\n            <component\r\n                    @result=\"displayResult\"\r\n                    :is=\"obj_SelectedComponent\"\r\n                    @loadPosts=\"loadPosts\"\r\n            ></component>\r\n        </b-modal>\r\n        <button @click=\"loadPosts\" v-if=\"bool_ShowRefresh\" class=\"btn btn-secondary\"\r\n                style=\"position: fixed; right: 20px; bottom: 20px\"><i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\r\n        </button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import DataSource from \"../data/datasource\";\r\n    import {required, minLength} from 'vuelidate/lib/validators';\r\n    import isImage from \"is-image\";\r\n    import PostComponent from \"../components/postCompnent\";\r\n    import BroadcastList from \"../components/BroadcastListCompnent\";\r\n    import VueTagsInput from '@johmun/vue-tags-input';\r\n    import portfolio from \"../components/Post_Portfolio_Component\";\r\n    import updates from \"../components/Post_Updates_Component.vue\";\r\n    import broadcast from \"../components/Post_Broadcast_Component.vue\";\r\n    import $ from 'jquery';\r\n    import Cookies from \"js-cookie\";\r\n\r\n\r\n    // import RichTextEditor from \"../components/RichTextEditor/RichTextEditor\";\r\n\r\n    export default {\r\n        name: 'staffPost',\r\n        components: {\r\n            PostComponent,\r\n            VueTagsInput,\r\n            // At,\r\n            BroadcastList\r\n        },\r\n        data() {\r\n            return {\r\n                modalTitle: null,\r\n                files: [],\r\n                systemmsgError: false,\r\n                isModalOpen: false,\r\n                token: null,\r\n                userType: \"\",\r\n                list: [],\r\n                error: \"\",\r\n                staffPostResults: \"\",\r\n                results: \"\",\r\n                postContent: \"\",\r\n                addPostContent: \"\",\r\n                tagAcademicYearID: \"\",\r\n                profolio: \"No\",\r\n                tagClassID: \"\",\r\n                tagLevelID: \"\",\r\n                // files: [],\r\n                content: '',\r\n                selectedFile: null,\r\n                success: \"\",\r\n                isLoading: true,\r\n                saveResponse: \"\",\r\n                PostItemPath: \"\",\r\n                tagResponseText: \"123\",\r\n                academicYearTable: [],\r\n                classesTable: [],\r\n                levelsTable: [],\r\n                studentTable: [],\r\n\r\n                PostID: \"\",\r\n                commentPostContent: \"\",\r\n                commentPostID: \"\",\r\n                actionMode: \"\",\r\n                readonly: true,\r\n                checkidcomment: \"\",\r\n                showDeleteModal: false,\r\n                query: '',\r\n                tag: '',\r\n                tags: [],\r\n                isParent: \"\",\r\n\r\n                obj_SelectedComponent: false,\r\n                int_NumberOfPost: 3,\r\n\r\n                arrobj_BroadcastPost: [],\r\n                intervalCheckNew: {},\r\n                bool_ShowRefresh: false,\r\n            };\r\n        },\r\n        filters: {\r\n            stringify(value) {\r\n                return JSON.stringify(value, null, 2);\r\n            }\r\n        },\r\n        computed: {\r\n            items() {\r\n                return this.studentTable.filter(i => {\r\n                    return i.text.toLowerCase().indexOf(this.tag.toLowerCase()) !== -1;\r\n                });\r\n            },\r\n        },\r\n        /*async mounted() {\r\n            this.loadPosts();\r\n        },*/\r\n        mounted() {\r\n            const self = this;\r\n            this.loadPosts();\r\n            this.loadBroadcast();\r\n            /*#region Scroll Loader Functions*/\r\n            $(window).scroll(self.debounce(() => {\r\n                    if (self.getScrollPercent() >= 50) {\r\n                        this.isParent = Cookies.get('userTypeSession');\r\n                        let obj_LastPost = !this.isNull(this.list) ? this.list[this.list.length - 1] : \"\";\r\n                        let promise_GetPosts = this.isParent === \"Parent\" ? DataSource.shared.getParentPost(this.int_NumberOfPost, obj_LastPost.PostID) : DataSource.shared.getStaffPost(this.int_NumberOfPost, obj_LastPost.PostID);\r\n\r\n\r\n                        promise_GetPosts.then((response) => {\r\n                            if (response.Table) {\r\n                                this.list.push.apply(this.list, response.Table);\r\n                            }\r\n                        });\r\n\r\n                        /*if (this.isParent === \"Parent\") {\r\n                            DataSource.shared.getParentPost(this.int_NumberOfPost, str_LastPostID).then((response) => {\r\n                                if (response.Table) {\r\n                                    for (let item of response.Table) {\r\n                                        this.list.push.apply(this.list, response.Table);\r\n\r\n                                        DataSource.shared.getPostFile(item.PostID).then((fileRes) => {\r\n                                            if (fileRes.Table) {\r\n                                                item.postFiles = fileRes.Table;\r\n                                            }\r\n                                            item.commentPostID = item.PostID;\r\n                                        }).then(() => {\r\n                                            DataSource.shared.getComment(item.PostID).then((getCommentResponse) => {\r\n                                                if (getCommentResponse.Table) {\r\n                                                    item.commentItems = getCommentResponse.Table;\r\n                                                    item.collapsed = true;\r\n                                                }\r\n                                            });\r\n                                        });\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else {\r\n                            DataSource.shared.getStaffPost(this.int_NumberOfPost, str_LastPostID).then((response) => {\r\n                                if (response.Table) {\r\n                                    this.list.push.apply(this.list, response.Table);\r\n\r\n                                    for (let item of response.Table) {\r\n                                        DataSource.shared.getPostFile(item.PostID).then((fileRes) => {\r\n                                            if (fileRes.Table) {\r\n                                                item.postFiles = fileRes.Table;\r\n                                            }\r\n                                            item.commentPostID = item.PostID;\r\n                                        }).then(() => {\r\n                                            DataSource.shared.getComment(item.PostID).then((getCommentResponse) => {\r\n                                                if (getCommentResponse.Table) {\r\n                                                    item.commentItems = getCommentResponse.Table;\r\n                                                    item.collapsed = true;\r\n                                                }\r\n                                            });\r\n                                        });\r\n                                    }\r\n                                }\r\n                            });\r\n                        }*/\r\n                    }\r\n                }, 250\r\n            ));\r\n            /*#endregion*/\r\n        },\r\n        methods: {\r\n            initIntervalCheckNew() {\r\n                if (!this.bool_ShowRefresh)\r\n                    this.intervalCheckNew = setInterval(() => {\r\n                        this.CheckNew();\r\n                    }, 300000);\r\n            },\r\n\r\n            CheckNew() {\r\n                this.isParent = Cookies.get('userTypeSession');\r\n\r\n                let promise_GetPosts = this.isParent === \"Parent\" ?\r\n                    DataSource.shared.getParentPost(1, null, null)\r\n                    : DataSource.shared.getStaffPost(1, null, null);\r\n\r\n                promise_GetPosts.then((response) => {\r\n                    if (response.Table && (new Date(response.Table[0].PostCreatedDate)) > (new Date(this.list[0].PostCreatedDate))) {\r\n                        this.bool_ShowRefresh = true;\r\n                        clearInterval(this.intervalCheckNew);\r\n                    }\r\n                });\r\n            },\r\n\r\n            showMoreBroadcastModal() {\r\n                this.$refs.modal_ShowMoreBroadcast.show();\r\n            },\r\n\r\n            isNull(obj) {\r\n                return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\r\n            }\r\n            ,\r\n            /*#region Scroll Loader Functions*/\r\n            getScrollPercent() {\r\n                //Credits to Phil Ricketts @ stackoverflow\r\n                let height = document.documentElement,\r\n                    body = document.body,\r\n                    scrollTop = 'scrollTop',\r\n                    scrollHeight = 'scrollHeight';\r\n\r\n                return (height[scrollTop] || body[scrollTop]) / ((height[scrollHeight] || body[scrollHeight]) - height.clientHeight) * 100;\r\n            }\r\n            ,\r\n            isScrollable() {\r\n                return $(document).height() > $(window).height();\r\n            }\r\n            ,\r\n            debounce(func, wait, immediate) {\r\n                // Returns a function, that, as long as it continues to be invoked, will not\r\n                // be triggered. The function will be called after it stops being called for\r\n                // N milliseconds. If `immediate` is passed, trigger the function on the\r\n                // leading edge, instead of the trailing.\r\n                let timeout, result;\r\n                let self = this;\r\n\r\n                let later = function (context, args) {\r\n                    timeout = null;\r\n                    if (args) result = func.apply(context, args);\r\n                };\r\n\r\n                let debounced = self.restArguments(function (args) {\r\n                    if (timeout) clearTimeout(timeout);\r\n                    if (immediate) {\r\n                        let callNow = !timeout;\r\n                        timeout = setTimeout(later, wait);\r\n                        if (callNow) result = func.apply(this, args);\r\n                    } else {\r\n                        timeout = self.delay(later, wait, this, args);\r\n                    }\r\n\r\n                    return result;\r\n                });\r\n\r\n                debounced.cancel = function () {\r\n                    clearTimeout(timeout);\r\n                    timeout = null;\r\n                };\r\n\r\n                return debounced;\r\n            }\r\n            ,\r\n            delay(func, wait, ...args) {\r\n                // Lodash Delay\r\n                /**\r\n                 * Invokes `func` after `wait` milliseconds. Any additional arguments are\r\n                 * provided to `func` when it's invoked.\r\n                 *\r\n                 * @since 0.1.0\r\n                 * @category Function\r\n                 * @param {Function} func The function to delay.\r\n                 * @param {number} wait The number of milliseconds to delay invocation.\r\n                 * @param {...*} [args] The arguments to invoke `func` with.\r\n                 * @returns {number} Returns the timer id.\r\n                 * @example\r\n                 *\r\n                 * delay(text => console.log(text), 1000, 'later')\r\n                 * // => Logs 'later' after one second.\r\n                 */\r\n                if (typeof func != 'function') {\r\n                    throw new TypeError('Expected a function');\r\n                }\r\n                return setTimeout(func, +wait || 0, ...args);\r\n            }\r\n            ,\r\n            restArguments(func, startIndex) {\r\n                // Some functions take a variable number of arguments, or a few expected\r\n                // arguments at the beginning and then a variable number of values to operate\r\n                // on. This helper accumulates all remaining arguments past the function?s\r\n                // argument length (or an explicit `startIndex`), into an array that becomes\r\n                // the last argument. Similar to ES6?s \"rest parameter\".\r\n                startIndex = startIndex == null ? func.length - 1 : +startIndex;\r\n                return function () {\r\n                    let length = Math.max(arguments.length - startIndex, 0),\r\n                        rest = Array(length),\r\n                        index = 0;\r\n                    for (; index < length; index++) {\r\n                        rest[index] = arguments[index + startIndex];\r\n                    }\r\n                    switch (startIndex) {\r\n                        case 0:\r\n                            return func.call(this, rest);\r\n                        case 1:\r\n                            return func.call(this, arguments[0], rest);\r\n                        case 2:\r\n                            return func.call(this, arguments[0], arguments[1], rest);\r\n                    }\r\n                    let args = Array(startIndex + 1);\r\n                    for (index = 0; index < startIndex; index++) {\r\n                        args[index] = arguments[index];\r\n                    }\r\n                    args[startIndex] = rest;\r\n                    return func.apply(this, args);\r\n                };\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n            loadPosts() {\r\n                // this.showSession()\r\n                // user menu\r\n                $(\"html, body\").animate({scrollTop: 0}, \"fast\");\r\n                this.bool_ShowRefresh = false;\r\n                this.initIntervalCheckNew();\r\n                this.isParent = Cookies.get('userTypeSession');\r\n                this.list = [];\r\n                let promise_GetPosts = this.isParent === \"Parent\" ?\r\n                    DataSource.shared.getParentPost(this.int_NumberOfPost)\r\n                    : DataSource.shared.getStaffPost(this.int_NumberOfPost);\r\n\r\n                promise_GetPosts.then((response) => {\r\n                    if (response.Table)\r\n                        this.list.push.apply(this.list, response.Table);\r\n\r\n                    this.isLoading = false;\r\n                });\r\n\r\n\r\n                /*#region Past revision*/\r\n                /*for (let item of response.Table) {\r\n                DataSource.shared.getPostFile(item.PostID).then((fileRes) => {\r\n                    if (fileRes.Table) {\r\n                        item.postFiles = fileRes.Table;\r\n                    }\r\n                    item.commentPostID = item.PostID;\r\n                }).then(() => {\r\n                    DataSource.shared.getComment(item.PostID).then((getCommentResponse) => {\r\n                        if (getCommentResponse.Table) {\r\n                            item.commentItems = getCommentResponse.Table;\r\n                            item.collapsed = true;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            this.list = response.Table;\r\n        }*/\r\n\r\n                // if (this.isParent === \"Parent\") {\r\n                //     DataSource.shared.getParentPost(this.int_NumberOfPost).then((response) => {\r\n                //         this.list = [];\r\n                //         if (response.Table) {\r\n                //             for (let item of response.Table) {\r\n                //                 this.list.push.apply(this.list, response.Table);\r\n                //\r\n                //                 DataSource.shared.getPostFile(item.PostID).then((fileRes) => {\r\n                //                     if (fileRes.Table) {\r\n                //                         item.postFiles = fileRes.Table;\r\n                //                     }\r\n                //                     item.commentPostID = item.PostID;\r\n                //                 }).then(() => {\r\n                //                     DataSource.shared.getComment(item.PostID).then((getCommentResponse) => {\r\n                //                         if (getCommentResponse.Table) {\r\n                //                             item.commentItems = getCommentResponse.Table;\r\n                //                             item.collapsed = true;\r\n                //                         }\r\n                //                     });\r\n                //                 });\r\n                //             }\r\n                //         }\r\n                //     });\r\n                // } else {\r\n                //\r\n                // }\r\n\r\n                // if (isParent === \"Parent\") {\r\n                //     let response = await DataSource.shared.getParentPost(this.int_NumberOfPost, \"\");\r\n                //     if (response.Table) {\r\n                //         for (let item of response.Table) {\r\n                //             const fileRes = await DataSource.shared.getPostFile(item.PostID);\r\n                //             const getCommentResponse = await DataSource.shared.getComment(item.PostID);\r\n                //             if (getCommentResponse.Table) {\r\n                //                 item.commentItems = getCommentResponse.Table;\r\n                //                 item.collapsed = true;\r\n                //             }\r\n                //             if (fileRes.Table) {\r\n                //                 item.postFiles = fileRes.Table;\r\n                //             }\r\n                //             item.commentPostID = item.PostID;\r\n                //         }\r\n                //         this.list = response.Table;\r\n                //     }\r\n                // } else {\r\n                //     let response = await DataSource.shared.getStaffPost(this.int_NumberOfPost, \"\");\r\n                //     if (response.Table) {\r\n                //         for (let item of response.Table) {\r\n                //             const fileRes = await DataSource.shared.getPostFile(item.PostID);\r\n                //             const getCommentResponse = await DataSource.shared.getComment(item.PostID);\r\n                //             if (getCommentResponse.Table) {\r\n                //                 item.commentItems = getCommentResponse.Table;\r\n                //                 item.collapsed = true;\r\n                //             }\r\n                //             if (fileRes.Table) {\r\n                //                 item.postFiles = fileRes.Table;\r\n                //             }\r\n                //             item.commentPostID = item.PostID;\r\n                //         }\r\n                //         this.list = response.Table;\r\n                //     }\r\n                // }\r\n\r\n\r\n                // try {\r\n                //     let tagResponse = await DataSource.shared.getPostDropdown();\r\n                //\r\n                //     if (tagResponse.AcademicYearTable && tagResponse.AcademicYearTable.Table) {\r\n                //         let uniqueYears = [];\r\n                //         tagResponse.AcademicYearTable.Table.forEach(object => {\r\n                //             const isExist = uniqueYears.find(year => year.SMT_Code === object.SMT_Code);\r\n                //             if (!isExist) {\r\n                //                 uniqueYears.push(object);\r\n                //             }\r\n                //         });\r\n                //         this.academicYearTable = uniqueYears;\r\n                //     }\r\n                //     if (tagResponse.ClassesTable && tagResponse.ClassesTable.Table) {\r\n                //         let uniqueClass = [];\r\n                //         tagResponse.ClassesTable.Table.forEach(object => {\r\n                //             const isExist = uniqueClass.find(year => year.PK_Class_ID === object.PK_Class_ID);\r\n                //             if (!isExist) {\r\n                //                 uniqueClass.push(object);\r\n                //             }\r\n                //         });\r\n                //         this.classesTable = uniqueClass;\r\n                //     }\r\n                //     if (tagResponse.LevelsTable && tagResponse.LevelsTable.Table) {\r\n                //\r\n                //         let uniqueLevel = [];\r\n                //         tagResponse.LevelsTable.Table.forEach(object => {\r\n                //             const isExist = uniqueLevel.find(level => level.SC_FK_CourseID === object.SC_FK_CourseID);\r\n                //             if (!isExist) {\r\n                //                 uniqueLevel.push(object);\r\n                //             }\r\n                //         });\r\n                //\r\n                //         this.levelsTable = uniqueLevel;\r\n                //     }\r\n                //     if (tagResponse.StudentTable && tagResponse.StudentTable.Table) {\r\n                //         let uniqueStudent = [];\r\n                //         tagResponse.StudentTable.Table.forEach(object => {\r\n                //             const isExist = uniqueStudent.find(student => student.Student_ID === object.Student_ID);\r\n                //             if (!isExist) {\r\n                //                 const selectedValue = {\r\n                //                     Student_ID: object.Student_ID,\r\n                //                     text: object.Full_Name,\r\n                //                     Sex: object.Sex,\r\n                //                     // email: object.email,\r\n                //                     Status: object.Status\r\n                //                 };\r\n                //                 uniqueStudent.push(selectedValue);\r\n                //             }\r\n                //         });\r\n                //         // this.studentTable = tagResponse.StudentTable.Table;\r\n                //         this.studentTable = uniqueStudent;\r\n                //     }\r\n                //\r\n                //     this.userType = Cookies.get('userTypeSession');\r\n                //\r\n                // } catch (e) {\r\n                //     console.log(e, '  errrr');\r\n                // }\r\n                // this.isLoading = false;\r\n                /*#endregion*/\r\n            }\r\n            ,\r\n\r\n            loadBroadcast() {\r\n                this.isParent = Cookies.get('userTypeSession');\r\n                this.arrobj_BroadcastPost = [];\r\n\r\n                let promise_GetPosts = this.isParent === \"Parent\" ?\r\n                    DataSource.shared.getParentPost(10, null, \"BROADCAST\")\r\n                    : DataSource.shared.getStaffPost(10, null, \"BROADCAST\");\r\n\r\n                promise_GetPosts.then((response) => {\r\n                    if (response.Table)\r\n                        this.arrobj_BroadcastPost.push.apply(this.arrobj_BroadcastPost, response.Table);\r\n                });\r\n            },\r\n            hideComponentModal() {\r\n                this.obj_SelectedComponent = false;\r\n                this.isModalOpen = false;\r\n                this.modalTitle = null;\r\n            }\r\n            ,\r\n            displayResult(value) {\r\n                //TODO: Show Message\r\n                if (value == \"TRUE\") {\r\n                    this.hideComponentModal();\r\n                }\r\n                // this.success = \"Successfully posted\";\r\n                // else\r\n                // this.success = \"Something went wrong. Please inform the adminstrator\";\r\n\r\n\r\n            }\r\n            ,\r\n            showUpdates() {\r\n                this.modalTitle = \"Post\";\r\n                this.obj_SelectedComponent = updates;\r\n                this.isModalOpen = true;\r\n            }\r\n            ,\r\n            showPortfolio() {\r\n                this.modalTitle = \"Portfolio\";\r\n                this.obj_SelectedComponent = portfolio;\r\n                this.isModalOpen = true;\r\n            }\r\n            ,\r\n            showBroadcast() {\r\n                this.modalTitle = \"Broadcast\";\r\n                this.obj_SelectedComponent = broadcast;\r\n                this.isModalOpen = true;\r\n            },\r\n            inputChange(input) {\r\n                this.postContent = input;\r\n            }\r\n            ,\r\n            showModal() {\r\n                this.isModalOpen = true;\r\n            }\r\n            ,\r\n            hideModal() {\r\n                this.isModalOpen = false;\r\n            }\r\n            ,\r\n            onFileChanged(event) {\r\n                this.selectedFile = event.target.files;\r\n                this.getImagePreviews();\r\n            }\r\n            ,\r\n            async onUpload() {\r\n                // const formData = new FormData();\r\n                // formData.append('myFile', this.selectedFile, this.selectedFile.name);\r\n                // this.formData = formData;\r\n                // await DataSource.shared.uploadFile(this.selectedFile);\r\n            }\r\n            ,\r\n            async onSubmit() {\r\n                this.$v.$touch();\r\n                this.error = \"\";\r\n                //this.results = \"<< Requesting.. >>\";\r\n                try {\r\n                    const studentsIds = this.tags.map(d => d.Student_ID);\r\n                    const saveResponse = await DataSource.shared.savePostUpdate(this.selectedFile, this.addPostContent, studentsIds, this.tagClassID, this.tagLevelID);\r\n\r\n                    if (saveResponse) {\r\n                        switch (saveResponse.code) {\r\n                            case \"1\":\r\n                                this.isModalOpen = false;\r\n                                // reset all input filed to blank\r\n                                this.selectedFile = null;\r\n                                this.$refs.fileupload.value = \"\";\r\n                                this.addPostContent = \"\";\r\n                                this.tagAcademicYearID = null;\r\n\r\n                                this.tagLevelID = null;\r\n                                this.tagClassID = null;\r\n                                this.results = `Post Submitted`;\r\n                                this.success = 'Post Submitted, activity will be active in a while';\r\n                                break;\r\n                            case \"88\":\r\n                                this.results = `Please Login to submit post`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            case \"99\":\r\n                                this.results = `Please fill in content`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            // default:\r\n                            //     alert(\"Please try again later\");\r\n                            //     this.results = JSON.stringify(response);\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.log(e);\r\n                    this.error = e;\r\n                }\r\n\r\n            }\r\n            ,\r\n            async commentitemSubmit(postId, comment) {\r\n                this.error = \"\";\r\n                //this.results = \"<< Requesting.. >>\";\r\n                try {\r\n\r\n                    this.commentPostID = postId;\r\n                    const commentResponse = await DataSource.shared.saveComment(this.commentPostID, comment);\r\n\r\n\r\n                    if (commentResponse) {\r\n                        switch (commentResponse.code) {\r\n                            case \"1\":\r\n                                // reset all input filed to blank\r\n                                this.commentPostID = null;\r\n                                this.commentPostContent = \"\";\r\n\r\n                            //    const newComment = await DataSource.shared.getComment(commentPostID);\r\n\r\n                                this.list.find(item => {\r\n\r\n\r\n                                    if (item.PostID === commentPostID) {\r\n                                        item.commentItems = newComment.Table;\r\n                                        return item;\r\n                                    }\r\n\r\n                                });\r\n\r\n                               // this.$forceUpdate();\r\n\r\n\r\n                                // this.results = `Post Submitted`;\r\n                                // this.success = 'Post Submitted, activity will be active in a while';\r\n                                break;\r\n                            case \"88\":\r\n                                this.results = `Please Login to submit post`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            case \"99\":\r\n                                this.results = `Please fill in content`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            // default:\r\n                            //     alert(\"Please try again later\");\r\n                            //     this.results = JSON.stringify(response);\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.log(e);\r\n                    this.error = e;\r\n                }\r\n            }\r\n            ,\r\n            async commentEdit(PoCmID, PoCmContent) {\r\n                this.error = \"\";\r\n                try {\r\n                    this.actionMode = \"Edit\";\r\n                    const commentResponse = await DataSource.shared.editComment(PoCmID, PoCmContent, this.actionMode);\r\n                    if (commentResponse) {\r\n                        switch (commentResponse.code) {\r\n                            case \"1\":\r\n                                // reset all input filed to blank\r\n                                this.commentPostID = null;\r\n                                this.commentPostContent = \"\";\r\n                                this.readonly = true;\r\n\r\n                               // const newComment = await DataSource.shared.getComment(PoCmID);\r\n                                this.list.find(item => {\r\n\r\n                                    if (item.PostID === PoCmID) {\r\n                                        item.commentItems = newComment.Table;\r\n                                        return item;\r\n                                    }\r\n\r\n                                });\r\n                                break;\r\n                            case \"88\":\r\n                                this.results = `Please Login to submit post`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            case \"99\":\r\n                                this.results = `Please fill in content`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.log(e);\r\n                    this.error = e;\r\n                }\r\n            }\r\n            ,\r\n            async okClick() {\r\n\r\n            }\r\n            ,\r\n            async commentDelete(PoCmID, PoCmContent, postId) {\r\n                this.error = \"\";\r\n                try {\r\n                    this.actionMode = \"Delete\";\r\n                    const deleteCommentResponse = await DataSource.shared.deleteComment(PoCmID, PoCmContent, this.actionMode);\r\n                    if (deleteCommentResponse) {\r\n                        switch (deleteCommentResponse.code) {\r\n                            case \"1\":\r\n                                // reset all input filed to blank\r\n                                this.commentPostID = null;\r\n                                this.commentPostContent = \"\";\r\n\r\n                           //     const newComment = await DataSource.shared.getComment(PoCmID);\r\n\r\n                                this.list.find(item => {\r\n\r\n                                    if (item.PostID === postId) {\r\n                                        item.commentItems = item.commentItems.filter(comment => comment.PoCmID !== PoCmID);\r\n                                        return item;\r\n                                    }\r\n\r\n                                });\r\n                              //  this.$forceUpdate();\r\n                                break;\r\n                            case \"88\":\r\n                                this.results = `Please Login to submit post`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            case \"99\":\r\n                                this.results = `Please fill in content`;\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.log(e);\r\n                    this.error = e;\r\n                }\r\n            }\r\n            ,\r\n            async disableReadonly(PoCmID) {\r\n                this.error = \"\";\r\n                try {\r\n                    this.readonly = false;\r\n                    this.checkidcomment = PoCmID;\r\n                } catch (e) {\r\n                    console.log(e);\r\n                    this.error = e;\r\n                }\r\n            }\r\n            ,\r\n            getImagePreviews() {\r\n                /*\r\n                  Iterate over all of the files and generate an image preview for each one.\r\n                */\r\n                for (let i = 0; i < this.selectedFile.length; i++) {\r\n                    /*\r\n                      Ensure the file is an image file\r\n                    */\r\n                    if (/\\.(jpe?g|png|gif)$/i.test(this.selectedFile[i].name)) {\r\n                        /*\r\n                          Create a new FileReader object\r\n                        */\r\n                        let reader = new FileReader();\r\n\r\n                        /*\r\n                          Add an event listener for when the file has been loaded\r\n                          to update the src on the file preview.\r\n                        */\r\n                        reader.addEventListener(\"load\", function () {\r\n                            this.$refs['image' + parseInt(i)][0].src = reader.result;\r\n                        }.bind(this), false);\r\n\r\n                        /*\r\n                          Read the data for the file in through the reader. When it has\r\n                          been loaded, we listen to the event propagated and set the image\r\n                          src to what was loaded from the reader.\r\n                        */\r\n                        reader.readAsDataURL(this.selectedFile[i]);\r\n                    }\r\n                }\r\n            }\r\n            ,\r\n            clearPreview() {\r\n                this.selectedFile = null;\r\n            }\r\n            ,\r\n        }\r\n        ,\r\n        validations: {\r\n            updateContent: {\r\n                required\r\n                // minLength: minLength(4)\r\n            }\r\n        }\r\n        ,\r\n        computed: {\r\n            filteredBroadcastPost: function () {\r\n                return this.arrobj_BroadcastPost.slice(0, 3);\r\n            },\r\n        },\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n    .overflow-x-scroll {\r\n        overflow-x: hidden;\r\n    }\r\n</style>\r\n\r\n<style>\r\n    .vue-tags-input {\r\n        max-width: 100% !important;\r\n    }\r\n\r\n    .ti-input {\r\n        border: 0px !important;\r\n        background: whitesmoke;\r\n        border-radius: 4px;\r\n        padding: 0px !important;\r\n    }\r\n\r\n    input.ti-new-tag-input {\r\n        background: transparent;\r\n        font-size: 1rem;\r\n    }\r\n\r\n    li.ti-new-tag-input-wrapper {\r\n        padding: 10px !important;\r\n        margin: 0px !important;\r\n    }\r\n\r\n    .tags-input {\r\n        margin-top: 15px;\r\n    }\r\n\r\n    .ti-input {\r\n        min-height: 46px;\r\n    }\r\n\r\n    li.ti-tag {\r\n        background-color: #E6E6E6;\r\n        color: #000;\r\n        border-radius: 12px;\r\n        padding: 4px 8px;\r\n    }\r\n\r\n    .ti-tag input {\r\n        color: #000;\r\n    }\r\n\r\n    .ti-tag-left {\r\n        margin-right: 2px;\r\n        width: 24px;\r\n    }\r\n\r\n    .my-item, .my-tag-left {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    .my-item i {\r\n        margin-right: 5px;\r\n    }\r\n\r\n    .ti-deletion-mark {\r\n        background-color: $ error;\r\n    }\r\n\r\n    #modal1 .modal-lg {\r\n        /*max-width: 95% !important;*/\r\n    }\r\n</style>"]}]}