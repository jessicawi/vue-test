{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\postCompnent.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\postCompnent.vue","mtime":1558979915662},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport isImage from \"is-image\";\nimport DataSource from \"../data/datasource\";\nimport AlertComponent from \"./alertComponent\";\nimport portfolio from \"../components/Post_Portfolio_Component\";\nimport updates from \"../components/Post_Updates_Component.vue\";\nimport Cookies from \"js-cookie\";\nimport $ from \"jquery\";\n\nexport default {\n    name: 'postComponent',\n    components: {AlertComponent, updates, portfolio},\n    data() {\n        return {\n            reactionCount2: \"\",\n            commentCount: \"\",\n            show3: false,\n            commentPostContent: \"\",\n            readonly: \"\",\n            checkidcomment: null,\n            systemmsgError: null,\n            commentPostID: '',\n            deleteModalShow: false,\n            showEdit: true,\n            deleteCmId: null,\n            deleteCmContent: null,\n            deleteCmPostId: null,\n            deletePostModalShow: false,\n            obj_SelectedComponent: false,\n            result: \"\",\n            post: [{\n                CONname: \"\",\n                PostContent: \"\",\n                PostCreatedBy: \"\",\n                PostCreatedDate: \"\",\n                PostID: \"\",\n                PostType: \"\",\n                PostUpdDtlDescription: \"\",\n                ProfileImage: \"\",\n                RowNumber: \"\",\n                collapsed: true,\n                commentItems: [],\n                commentPostID: \"\",\n                postFiles: \"\",\n                postReaction: [],\n                countImageFile: \"\"\n            }],\n            str_TimerID: \"\",\n            likeCount: 0,\n            isFile: false,\n            approverPostNotShow: true,\n            remainingImage: \"\",\n        };\n    },\n    mounted() {\n        if (!this.isNull(this.approverPost) && this.approverPost === 'YES') {\n            this.approverPostNotShow = false;\n        }\n        if (!this.isNull(this.parentPost)) {\n            this.initPost();\n        }\n    },\n    props: [\"parentPost\", \"commentitemSubmit\", \"hideComment\", \"isHome\", \"hideSubmenu\", \"loadPost\", \"approverPost\"],\n    methods: {\n        showImageModal(){\n            this.$refs['imageModal'].show()\n        },\n        hideImageModal(){\n            this.$refs['imageModal'].hide()\n        },\n        checkIfImage(file) {\n            return isImage(file);\n        },\n        isMobile() {\n            if (screen.width <= 760) {\n                return true;\n            } else {\n                return false;\n            }\n        },\n        showCommentTransition(CommentBtnPostID) {\n            this.show3 = CommentBtnPostID;\n        },\n        getUserSelectedCommentReaction(str_Reaction, commentItem) {\n            let isExist = !this.isNull(commentItem.commentReactions) ? commentItem.commentReactions.filter(x => x.PoReaCreatedBy === Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction) : false;\n            return isExist;\n        },\n\n        getCommentReactionCount(str_Reaction, commentItem) {\n            // setInterval(() => {\n            //     DataSource.shared.getPostReaction(commentItem.PoCmID).then((result) => {\n            //         this.$set(this.post.commentItems, \"commentReaction\", result.Table)\n            //     });\n            // }, 2000);\n\n\n            let int_ReactionCount = !this.isNull(commentItem.commentReactions) ? commentItem.commentReactions.filter(x => x.PoReaType.toUpperCase() === str_Reaction).length : 0;\n            return int_ReactionCount;\n            /*\n            let int_ReactionCount = !this.isNull(commentItem.commentReaction) ? commentItem.commentReaction.filter(x => x.PoReaType.toUpperCase() === str_Reaction).length : 0;\n\n            return int_ReactionCount*/\n        },\n\n        toggleCommentReaction(e, commentItem) {\n            let reaction = $(e.target).val();\n            let isChecked = $(e.target).prop(\"checked\");\n\n            $(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\n\n            DataSource.shared.updatePostReaction(commentItem.PoCmID, \"DELETE\")\n                .then(() => {\n                    $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\n\n                    if (isChecked) {\n                        $(e.target).closest(\"td\").addClass(\"checked\");\n                        return DataSource.shared.savePostReaction(commentItem.PoCmID, reaction, \"POST\");\n                    }\n                });\n\n            /*$(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\n            DataSource.shared.updatePostReaction(commentItem.PoCmID, \"DELETE\")\n                .then(() => {\n                    $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\n\n                    if (isChecked) {\n                        $(e.target).closest(\"td\").addClass(\"checked\");\n                        DataSource.shared.savePostReaction(commentItem.PoCmID, reaction, \"COMMENT\");\n                    }\n                });*/\n        }\n        ,\n\n        getUserSelectedReaction(str_Reaction) {\n            let isExist = !this.isNull(this.post.postReaction) ? this.post.postReaction.filter(x => Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction).length : 0;\n            return isExist;\n        },\n\n        getPostReactionCount(str_Reaction) {\n            let isExist = !this.isNull(this.post.postReaction) ? this.post.postReaction.filter(x => x.PoReaCreatedBy === Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction).length : 0;\n            return isExist;\n            let reactionCount = this.post.postReaction.length;\n        }\n        ,\n\n        togglePostReaction(e) {\n            let reaction = $(e.target).val();\n            let isChecked = $(e.target).prop(\"checked\");\n            $(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\n\n            DataSource.shared.updatePostReaction(this.post.PostID, \"DELETE\")\n                .then(() => {\n                    $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\n\n                    if (isChecked) {\n                        $(e.target).closest(\"td\").addClass(\"checked\");\n                        return DataSource.shared.savePostReaction(this.post.PostID, reaction, \"POST\");\n                    }\n                })\n                .then(() => {\n                    DataSource.shared.getPostReaction(this.post.PostID).then((result) => {\n                        this.$set(this.post, \"postReaction\", result.Table);\n                    });\n                });\n        }\n        ,\n\n        /*#region Download Item Functions*/\n        downloadItem() {\n            let arr_Promises = [];\n            this.showLoading();\n\n            for (let obj_SelectedItem of this.arrobj_SelectedItem) {\n                let downloadPromise = new Promise((resolve, reject) => {\n                    DataSource.shared.downloadFile(obj_SelectedItem.GalID).then((result) => {\n                        let file = (result.Table)[0];\n                        let a = document.createElement(\"a\");\n                        let contentType = this.getContentType(file);\n                        let b64Data = file.GalFile;\n                        let blob = this.b64toBlob(b64Data, contentType);\n\n                        a.href = URL.createObjectURL(blob);\n                        a.download = (file.GalFileName + file.GalFileExt).toString();\n                        a.style.display = \"none\";\n                        document.body.appendChild(a);\n                        a.click();\n                        a.remove();\n                        resolve(result);\n                    });\n                });\n\n                arr_Promises.push(downloadPromise);\n            }\n\n            Promise.all(arr_Promises).then((result) => {\n                this.hideLoading();\n            });\n        }\n        ,\n        getContentType(e) {\n            let contentType = \"\";\n\n            switch (e.GalFileExt.toUpperCase()) {\n                case \".PDF\":\n                    contentType += \"application/octet-stream\";\n                    break;\n                default:\n                    contentType += e.GalFileType;\n                    break;\n            }\n\n            return contentType;\n        }\n        ,\n        b64toBlob(b64Data, contentType, sliceSize) {\n            //Credit to Jeremy Banks @ stackoverflow\n            contentType = contentType || '';\n            sliceSize = sliceSize || 512;\n\n            let byteCharacters = atob(b64Data);\n            let byteArrays = [];\n\n            for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n                let slice = byteCharacters.slice(offset, offset + sliceSize);\n\n                let byteNumbers = new Array(slice.length);\n                for (let i = 0; i < slice.length; i++) {\n                    byteNumbers[i] = slice.charCodeAt(i);\n                }\n\n                let byteArray = new Uint8Array(byteNumbers);\n\n                byteArrays.push(byteArray);\n            }\n\n            return new Blob(byteArrays, {type: contentType});\n        }\n        ,\n        /*#endregion*/\n        initPost() {\n            /*this.resetPost();*/\n            // let tempobj = !this.isNull(this.post.PostID) ? this.post : this.parentPost;\n            this.post = this.parentPost;\n            let promise_GetPostFile = DataSource.shared.getPostFile(this.post.PostID);\n            let promise_GetPostReaction = DataSource.shared.getPostReaction(this.post.PostID);\n\n            Promise.all([promise_GetPostFile, promise_GetPostReaction])\n                .then((result) => {\n                    this.$set(this.post, \"postFiles\", result[0].Table);\n                    this.$set(this.post, \"collapsed\", true);\n                    this.$set(this.post, \"postReaction\", result[1].Table);\n                    this.getComment();\n                    const countImageFile = this.post && this.post.postFiles && this.post.postFiles.length;\n                    this.$set(this.post, \"countImageFile\", countImageFile);\n\n                    this.remainingImage = this.post.countImageFile - 4;\n                });\n            setInterval(() => {\n                this.getComment();\n                }, 3000);\n        },\n\n        initCommentInterval() {\n            /* setInterval(() => {\n                 this.getComment;\n             },\n                3000);*/\n\n            /*  setTimeout(\n                  this.getComment\n                  , 3000);*/\n            /* if (!this.isNull(comments.Table)) {\n                 for (let i = 0; i < comments.Table.length; i++)\n                     setInterval(() => {\n                         DataSource.shared.getPostReaction(comments.Table[i].PoCmID).then((commentReactions) => {\n                             this.$set(this.post.commentItems[i], \"commentReactions\", commentReactions.Table);\n                         });\n                     }, 5000);\n             }*/\n\n            /*this.$set(this.post, \"commentPostID\", this.post.PostID);\n            this.$set(this.post, \"commentItems\", result[1].Table);*/\n\n            /*for(let comment of this.post.commentItems){\n            }*/\n        },\n        getComment() {\n\n                DataSource.shared.getComment(this.post.PostID).then((comments) => {\n                    this.$set(this.post, \"commentItems\", comments.Table);\n\n                    if (!this.isNull(this.post.commentItems)) {\n                        /*for (let i = 0; i < this.post.commentItems.length; i++) {\n                            DataSource.shared.getPostReaction(comments.Table[i].PoCmID).then((commentReactions) => {\n                                this.$set(this.post.commentItems[i], \"commentReactions\", commentReactions.Table);\n                            });\n                        }*/\n\n                        this.commentCount = this.post.commentItems.length;\n                    } else {\n                        this.commentCount = \"0\";\n                    }\n                });\n\n        },\n\n        isNull(obj) {\n            return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\n        },\n        isImageByExt(obj_File) {\n            let ext = String(obj_File.PostItemFileExt).toUpperCase();\n            let isImage = false;\n\n            switch (ext) {\n                case \".PNG\":\n                case \".JPG\":\n                case \".BMP\":\n                case \".GIF\":\n                    isImage = true;\n                    break;\n                default:\n                    isImage = false;\n                    break;\n            }\n\n            return isImage;\n        },\n        getLowSource(file) {\n            return `data:image/jpg;base64, ${file.PostItemFileLow}`;\n        },\n        getMediumSource(file) {\n            let SourceisImage = this.isImageByExt(file);\n            if (SourceisImage === true) {\n                return `data:image/jpg;base64, ${file.PostItemFileMedium}`;\n            } else{\n                return `data:application/pdf;base64, ${file.PostItemFile}`;\n            }\n        },\n        getFile(file) {\n            return `data:${file.PostItemFileType};base64,${file.PostItemFile}`;\n        },\n        submitComment(commentPostID) {\n            this.$emit('commentitemSubmit', commentPostID, this.commentPostContent);\n            this.commentPostContent = \"\";\n        },\n        saveClick(PoCmID, PoCmContent) {\n            this.readonly = true;\n            this.showEdit = true;\n            this.checkidcomment = null;\n            this.$emit(\"commentEdit\", PoCmID, PoCmContent);\n        },\n        showDeleteModal(deleteCmId, deleteCmContent, deleteCmPostId) {\n            this.deleteModalShow = true;\n            this.deleteCmId = deleteCmId;\n            this.deleteCmContent = deleteCmContent;\n            this.deleteCmPostId = deleteCmPostId;\n        },\n        closeDeleteModal() {\n            this.deleteModalShow = false;\n        },\n        editClick(PoCmID) {\n            this.showEdit = false;\n            this.readonly = false;\n            this.checkidcomment = PoCmID;\n        },\n        deleteComment() {\n            this.$emit(\"commentDelete\", this.deleteCmId, this.deleteCmContent, this.deleteCmPostId);\n            this.closeDeleteModal();\n        },\n        removePost() {\n            this.$refs.modal_DeletePost.show();\n        },\n        deletePost(post) {\n            DataSource.shared.softDeletePost(post.PostID).then((result) => {\n            });\n            this.$emit(\"loadPosts\");\n        },\n        editPost(post) {\n            DataSource.shared.getPostAllTaggingStudentsByPostID(post.PostID)\n                .then((result) => {\n                    this.post.arrobj_SelectedStudents = result.Table;\n\n                    switch (this.post.PostType.toUpperCase()) {\n                        case \"PORTFOLIO\":\n                            this.obj_SelectedComponent = portfolio;\n                            break;\n                        case \"UPDATE\":\n                            this.obj_SelectedComponent = updates;\n                            break;\n                    }\n\n                    this.showEditModal();\n                });\n\n        },\n        showEditModal() {\n            this.$refs.modal_EditComponent.show();\n        },\n        hideEditModal() {\n            this.obj_SelectedComponent = false;\n            this.$refs.modal_EditComponent.hide();\n        },\n        displayResult(value) {\n            if (value == \"TRUE\")\n                this.result = \"Successfully posted\";\n            else\n                this.result = \"Something went wrong. Please inform the adminstrator\";\n\n            this.hideEditModal();\n        },\n        // checkIfImage(file) {\n        //     return isImage(file);\n        // },\n        // async commentEdit(PoCmID, PoCmContent) {\n        //     this.error = \"\";\n        //     //this.results = \"<< Requesting.. >>\";\n        //     try {\n        //\n        //         this.commentPostID = PoCmID;\n        //         this.commentPostContent = PoCmContent;\n        //         this.actionMode = \"Edit\";\n        //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\n        //         if (commentResponse) {\n        //             switch (commentResponse.code) {\n        //                 case \"1\":\n        //                     // reset all input filed to blank\n        //                     this.commentPostID = null;\n        //                     this.commentPostContent = \"\";\n        //                     this.readonly = true;\n        //                     // this.results = `Post Submitted`;\n        //                     // this.success = 'Post Submitted, activity will be active in a while';\n        //                     break;\n        //                 case \"88\":\n        //                     this.results = `Please Login to submit post`;\n        //                     this.systemmsgError = true;\n        //                     break;\n        //                 case \"99\":\n        //                     this.results = `Please fill in content`;\n        //                     this.systemmsgError = true;\n        //                     break;\n        //                 // default:\n        //                 //     alert(\"Please try again later\");\n        //                 //     this.results = JSON.stringify(response);\n        //             }\n        //         }\n        //     } catch (e) {\n        //         console.log(e);\n        //         this.error = e;\n        //     }\n        // },\n        // async commentEdit(PoCmID, PoCmContent) {\n        //     this.error = \"\";\n        //     //this.results = \"<< Requesting.. >>\";\n        //     try {\n        //\n        //         this.commentPostID = PoCmID;\n        //         this.commentPostContent = PoCmContent;\n        //         this.actionMode = \"Edit\";\n        //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\n        //         if (commentResponse) {\n        //             switch (commentResponse.code) {\n        //                 case \"1\":\n        //                     // reset all input filed to blank\n        //                     this.commentPostID = null;\n        //                     this.commentPostContent = \"\";\n        //                     this.readonly = true;\n        //                     // this.results = `Post Submitted`;\n        //                     // this.success = 'Post Submitted, activity will be active in a while';\n        //                     break;\n        //                 case \"88\":\n        //                     this.results = `Please Login to submit post`;\n        //                     this.systemmsgError = true;\n        //                     break;\n        //                 case \"99\":\n        //                     this.results = `Please fill in content`;\n        //                     this.systemmsgError = true;\n        //                     break;\n        //                 // default:\n        //                 //     alert(\"Please try again later\");\n        //                 //     this.results = JSON.stringify(response);\n        //             }\n        //         }\n        //     } catch (e) {\n        //         console.log(e);\n        //         this.error = e;\n        //     }\n        // },\n    },\n};\n",{"version":3,"sources":["postCompnent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoYA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"postCompnent.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"container-fluid row\" v-if=\"result\">\r\n            {{result}}\r\n        </div>\r\n        <div class=\"feed-box\" v-bind:class=\"[post.PostID]\" v-if=\"!isHome\">\r\n\r\n            <div class=\"author\">\r\n                <div class=\"profile\">\r\n                    <!--<img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"-->\r\n                         <!--:src=\"getProfileSource(post.ProfileImage)\"-->\r\n                         <!--:alt=\"post.PostPorDtlTitle\"/>-->\r\n                    <img src=\"../assets/boy.png\" v-if=\"post.ProfileImage === ''\">\r\n                    <img :src=\"`data:image/jpg;base64, ${post.ProfileImage}`\"\r\n                         v-if=\"post.ProfileImage\"/>\r\n                </div>\r\n                <div class=\"feed-heading\">\r\n                    <span>{{post.CONname}}</span>\r\n                    <small class=\"date\"><i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\r\n                        {{post.PostCreatedDate}}\r\n                    </small>\r\n                </div>\r\n                <el-popover\r\n                        placement=\"bottom\"\r\n                        width=\"100\"\r\n                        trigger=\"click\"\r\n                        class=\"feed-box__dropdown\"\r\n                        v-if=\"approverPostNotShow\">\r\n                    <button @click=\"editPost(post)\" class=\"btn btn-link\">Edit Post</button>\r\n                    <button @click=\"removePost(post)\" class=\"btn btn-link\">Delete Post</button>\r\n                    <el-button slot=\"reference\"><i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i></el-button>\r\n                </el-popover>\r\n                <!--<b-dropdown right v-if=\"!hideSubmenu\">-->\r\n                <!--<template slot=\"button-content\">-->\r\n                <!--<i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i>-->\r\n                <!--</template>-->\r\n                <!--<b-dropdown-item @click=\"editPost(post)\">Edit Post</b-dropdown-item>-->\r\n                <!--<b-dropdown-item @click=\"removePost(post)\">Delete Post</b-dropdown-item>-->\r\n                <!--</b-dropdown>-->\r\n            </div>\r\n\r\n            <div class=\"content\">\r\n                <p>\r\n                    <!--<strong class=\"feed-subtitle\"> ADD A NOTE</strong>-->\r\n                    <span style=\"white-space: pre-line;\">{{post.PostContent}}</span>\r\n                </p>\r\n            </div>\r\n            <div class=\"image-wrapper\" v-if=\"!isNull(post.postFiles)\">\r\n                <ul v-if=\"!isMobile()\">\r\n                    <li class=\"postFile__item\" v-for=\"(obj_Images, index) in post.postFiles\" :key=\"obj_Images.id\"\r\n                        :class=\"{'isFile':isImageByExt(obj_Images)===false}\" v-if=\"index < 5\">\r\n                        <img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"\r\n                             :src=\"getMediumSource(obj_Images)\"\r\n                             v-if=\"isImageByExt(obj_Images)\"\r\n                             :alt=\"post.PostPorDtlTitle\"/>\r\n                        <div v-else>\r\n                            <a :href=\"getFile(obj_Images)\"\r\n                               :download=\"`${obj_Images.PostItemID}${obj_Images.PostItemFileExt}`\" class=\"filepath\">\r\n                                {{obj_Images.PostItemID}}{{obj_Images.PostItemFileExt}}\r\n                            </a>\r\n                            <!--<span class=\"filepath\" @click=\"getFile(obj_Images)\">{{obj_Images.PostItemID}}{{obj_Images.PostItemFileExt}}</span>-->\r\n                        </div>\r\n\r\n                        <button v-if=\"index === 4 \" class=\"postFile-remainingNumber\" @click=\"showImageModal\">\r\n                            + {{remainingImage}}\r\n                        </button>\r\n                        <!--<img :src=\"getLowSource(obj_Images)\"-->\r\n                        <!--:class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"-->\r\n                        <!--/>-->\r\n\r\n                        <!--<img :src=\"postFile.PostItemPath\"-->\r\n                        <!--:class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"-->\r\n                        <!--v-else-if=\"!checkIfImage(postFile.PostItemPath)\"/>-->\r\n                    </li>\r\n                </ul>\r\n                <b-carousel id=\"carousel1\"\r\n                            style=\"text-shadow: 1px 1px 2px #333;\"\r\n                            :controls=\"post.postFiles.length > 1\"\r\n                            indicators\r\n                            background=\"#fff\"\r\n                            :interval=\"0\"\r\n                            v-if=\"isMobile()\">\r\n                    <div>\r\n                        <b-carousel-slide v-for=\"obj_Images of post.postFiles\" :key=\"obj_Images.id\">\r\n                            <img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"\r\n                                 :src=\"getMediumSource(obj_Images)\"\r\n                                 v-if=\"isImageByExt(obj_Images)\"\r\n                                 :alt=\"post.PostPorDtlTitle\"/>\r\n                        </b-carousel-slide>\r\n                    </div>\r\n                </b-carousel>\r\n            </div>\r\n            <div class=\"postFile\" v-if=\"!isNull(post.postFiles)\">\r\n                <div class=\"postFile__item\" v-for=\"postFile in post.postFiles\" :key=\"postFile.ID\">\r\n                    <!--<img :src=\"postFile.PostItemPath\" :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"/>-->\r\n\r\n                    <a v-if=\"!postFile.PostItemFileLow && !checkIfImage(postFile.PostItemPath)\"\r\n                       v-bind:href=\"[postFile.PostItemPath]\"\r\n                       :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\">\r\n                        <i class=\"fa fa-file\" aria-hidden=\"true\"></i>\r\n                        {{postFile.PostItemPostID}}\r\n                    </a>\r\n                    <!--{{postFile.PostItemCreatedDate}}-->\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n            <div class=\"feed-iconBox\" v-if=\"approverPostNotShow\">\r\n                <el-button @click=\"showCommentTransition(post.PostID)\" class=\"float-left ml-2 post-icon-btn\"><i\r\n                        class=\"material-icons\">\r\n                    chat_bubble_outline\r\n                </i>\r\n                    {{commentCount}}\r\n                </el-button>\r\n\r\n                <el-popover\r\n                        placement=\"top-start\"\r\n                        width=\"250\"\r\n                        trigger=\"click\"\r\n                        class=\"float-left ml-2 post-icon-btn\"\r\n                >\r\n                    <table class=\"table reaction-table\">\r\n                        <tr>\r\n                            <td :class=\"{checked: getPostReactionCount('LIKE') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('LIKE')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"LIKE\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('LIKE')}}</div>\r\n                                        <img src=\"../assets/like.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                </label>\r\n                            </td>\r\n                            <td :class=\"{checked: getPostReactionCount('LOVE') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('LOVE')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"LOVE\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('LOVE')}}</div>\r\n                                        <img src=\"../assets/love.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                </label>\r\n                            </td>\r\n                            <td :class=\"{checked: getPostReactionCount('WOW') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('WOW')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"WOW\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('WOW')}}</div>\r\n                                        <img src=\"../assets/oo.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                </label>\r\n                            </td>\r\n                            <td :class=\"{checked: getPostReactionCount('HAHA') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('HAHA')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"HAHA\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('HAHA')}}</div>\r\n                                        <img src=\"../assets/funny.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                </label>\r\n                            </td>\r\n                            <td :class=\"{checked: getPostReactionCount('SAD') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('SAD')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"SAD\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('SAD')}}</div>\r\n                                        <img src=\"../assets/sad.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n\r\n                                </label>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                    <el-button slot=\"reference\"\r\n                               :class=\"{checked: getPostReactionCount('LIKE') > 0 || getPostReactionCount('LOVE') > 0 || getPostReactionCount('WOW') > 0 || getPostReactionCount('HAHA') > 0 || getPostReactionCount('SAD') > 0}\">\r\n                        <i class=\"material-icons\">favorite_border</i>\r\n                        <i class=\"material-icons show-if-check\">favorite</i>\r\n                    </el-button>\r\n                </el-popover>\r\n            </div>\r\n\r\n            <!--<div slot=\"footer\">-->\r\n            <!--<vs-row vs-justify=\"flex-end\">-->\r\n            <!--<vs-button color=\"primary\" type=\"gradient\" >View</vs-button>-->\r\n            <!--<vs-button color=\"danger\" type=\"gradient\">Delete</vs-button>-->\r\n            <!--</vs-row>-->\r\n            <!--</div>-->\r\n        </div>\r\n\r\n        <ul class=\"feed-box\" v-bind:class=\"[post.PostID]\" v-if=\"isHome\">\r\n            <li>\r\n                <div class=\"image-wrapper\">\r\n                    <ul>\r\n                        <li class=\"\" v-for=\"postFile in post.postFiles\" :key=\"postFile.ID\">\r\n                            <img :src=\"`data:image/jpg;base64, ${postFile.PostItemFile}`\"\r\n                                 :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"\r\n                                 v-if=\"postFile.PostItemFile\"/>\r\n                            <img :src=\"postFile.PostItemPath\"\r\n                                 :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"\r\n                                 v-else-if=\"checkIfImage(postFile.PostItemPath)\"/>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <span>\r\n                        <strong>{{post.CONname}}</strong>\r\n                        <small class=\"date\"><i class=\"fa fa-clock-o\"\r\n                                               aria-hidden=\"true\"></i> {{post.PostCreatedDate}}</small>\r\n                        {{post.PostContent}}\r\n                    </span>\r\n            </li>\r\n        </ul>\r\n        <el-collapse-transition>\r\n            <div v-if=\"show3 === post.PostID \">\r\n                <div class=\"comment_wrapper transition-box\" v-if=\"!hideComment\">\r\n                    <form class=\"form-style\">\r\n                        <input type=\"text\" class=\"form-control d-none\" id=\"commentPostID\" v-model=\"commentPostID\">\r\n                        <vs-input label-placeholder=\"Write a comment\" v-model=\"commentPostContent\"\r\n                                  class=\"addComment\"/>\r\n                        <div class=\"btn btn-primary\" @click=\"submitComment(post.PostID)\"><i\r\n                                class=\"fa fa-paper-plane\"\r\n                                aria-hidden=\"true\"></i></div>\r\n                    </form>\r\n\r\n                    <div class=\"commentWrap\" v-if=\"post.commentItems\"\r\n                         :class=\"{'is-collapsed' : post.collapsed }\">\r\n                        <div class=\"comment__item\" v-for=\"commentItem of post.commentItems\"\r\n                             :key=\"commentItem.PoCmID\">\r\n                            <div class=\"commentItem__header\">\r\n                                <div class=\"comment__name\">{{commentItem.CONname}}</div>\r\n                                <div class=\"comment__date\">{{commentItem.PoCmCreatedDate}}</div>\r\n                            </div>\r\n\r\n                            <div class=\"commentPostContent_show\" v-if=\"checkidcomment !== commentItem.PoCmID\">\r\n                                {{commentItem.PoCmContent}}\r\n                            </div>\r\n                            <textarea v-if=\"readonly === false && checkidcomment === commentItem.PoCmID\" type=\"text\"\r\n                                      class=\"comment__content\" id=\"commentPostContent\"\r\n                                      v-model=\"commentItem.PoCmContent\" v-bind:readonly=\"readonly\"\r\n                                      :class=\"{'editable' : readonly === false && checkidcomment === commentItem.PoCmID }\"></textarea>\r\n                            <!--{{checkidcomment}} ==== {{commentItem.PoCmID}} === {{readonly}}<br/>-->\r\n\r\n                            <!--<span class=\"edit\" @click=\"editClick(commentItem.PoCmID)\" v-if=\"showEdit\">-->\r\n                            <!--Edit .-->\r\n                            <!--</span>-->\r\n                            <el-button class=\"save\" type=\"text\" slot=\"reference\"\r\n                                       @click=\"saveClick(commentItem.PoCmID, commentItem.PoCmContent)\"\r\n                                       :class=\"{'d-none' : readonly === true || checkidcomment !== commentItem.PoCmID}\">\r\n                                Save\r\n                            </el-button>\r\n                            <el-button class=\"edit\" type=\"text\" slot=\"reference\" @click=\"editClick(commentItem.PoCmID)\"\r\n                                       v-if=\"showEdit\">\r\n                                Edit\r\n                            </el-button>\r\n                            .\r\n\r\n                            <!--<span class=\"save\" @click=\"saveClick(commentItem.PoCmID, commentItem.PoCmContent)\"-->\r\n                            <!--:class=\"{'d-none' : readonly === true || checkidcomment !== commentItem.PoCmID}\">Save . </span>-->\r\n                            <!--<span class=\"delete\"-->\r\n                            <!--@click=\"deleteComment(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">Delete</span>-->\r\n                            <!--<span class=\"delete\"-->\r\n                            <!--@click=\"showDeleteModal(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">-->\r\n                            <!--Delete .-->\r\n                            <!---->\r\n                            <!--</span>-->\r\n                            <el-button class=\"delete\" type=\"text\" slot=\"reference\"\r\n                                       @click=\"showDeleteModal(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">\r\n                                Delete\r\n                            </el-button>\r\n                            .\r\n                            <span class=\"like\">\r\n                        <el-popover\r\n                                placement=\"right\"\r\n                                width=\"250\"\r\n                                trigger=\"click\"\r\n                                popper-class=\"like-popover\">\r\n                            <table class=\"table reaction-table\">\r\n                                <tr>\r\n                                    <td :class=\"{checked: getCommentReactionCount('LIKE', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('LIKE', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"LIKE\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('LIKE', commentItem)}}</div>\r\n                                        <img src=\"../assets/like.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                        </label></td>\r\n                                    <td :class=\"{checked: getCommentReactionCount('LOVE', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('LOVE', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"LOVE\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('LOVE', commentItem)}}</div>\r\n                                        <img src=\"../assets/love.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                    </label></td>\r\n                                    <td :class=\"{checked: getCommentReactionCount('WOW', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('WOW', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"WOW\">\r\n\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('WOW', commentItem)}}</div>\r\n                                        <img src=\"../assets/oo.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                        </label></td>\r\n                                    <td :class=\"{checked: getCommentReactionCount('HAHA', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('HAHA', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"HAHA\">\r\n\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('HAHA', commentItem)}}</div>\r\n                                        <img src=\"../assets/funny.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                        </label></td>\r\n                                    <td :class=\"{checked: getCommentReactionCount('SAD', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('SAD', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"SAD\">\r\n\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('SAD', commentItem)}}</div>\r\n                                        <img src=\"../assets/sad.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                        </label></td>\r\n                                </tr>\r\n                            </table>\r\n                            <el-button type=\"text\" slot=\"reference\">\r\n                                Like\r\n                            </el-button>\r\n                        </el-popover>\r\n                    </span>\r\n                            <AlertComponent :showModal=\"deleteModalShow\" @cancelClick=\"closeDeleteModal\"\r\n                                            @okClick=\"deleteComment\"/>\r\n                        </div>\r\n                        <button v-on:click=\" post.collapsed = !post.collapsed \"\r\n                                :class=\"{'d-none' : !post.collapsed }\" v-if=\"post.commentItems&&post.commentItems.length !== 2\">\r\n                            More Comment\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </el-collapse-transition>\r\n        <b-modal class=\"alert-modal\" title=\"ARE YOU SURE?\" ref=\"modal_DeletePost\" @ok=\"deletePost(post)\">\r\n            Once you delete a post, you can't undo it.\r\n        </b-modal>\r\n        <b-modal id=\"modal_EditComponent\" ref=\"modal_EditComponent\" size=\"lg\" hide-footer title=\"Edit Post\"\r\n                 @hidden=\"hideEditModal\">\r\n            <component @result=\"displayResult\" :is=\"obj_SelectedComponent\" :post=\"post\"></component>\r\n        </b-modal>\r\n        <b-modal id=\"imageModal\" ref=\"imageModal\" hide-footer hide-header>\r\n            <b-carousel id=\"modal_carousel\"\r\n                        style=\"text-shadow: 1px 1px 2px #333;\"\r\n                        :controls=\"post.postFiles&&post.postFiles.length > 1\"\r\n                        indicators\r\n                        background=\"#fff\"\r\n                        :interval=\"0\">\r\n                <div>\r\n                    <b-carousel-slide v-for=\"obj_Images of post.postFiles\" :key=\"obj_Images.id\">\r\n                        <img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"\r\n                             :src=\"getMediumSource(obj_Images)\"\r\n                             v-if=\"isImageByExt(obj_Images)\"\r\n                             :alt=\"post.PostPorDtlTitle\"/>\r\n                    </b-carousel-slide>\r\n                </div>\r\n            </b-carousel>\r\n        </b-modal>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import isImage from \"is-image\";\r\n    import DataSource from \"../data/datasource\";\r\n    import AlertComponent from \"./alertComponent\";\r\n    import portfolio from \"../components/Post_Portfolio_Component\";\r\n    import updates from \"../components/Post_Updates_Component.vue\";\r\n    import Cookies from \"js-cookie\";\r\n    import $ from \"jquery\";\r\n\r\n    export default {\r\n        name: 'postComponent',\r\n        components: {AlertComponent, updates, portfolio},\r\n        data() {\r\n            return {\r\n                reactionCount2: \"\",\r\n                commentCount: \"\",\r\n                show3: false,\r\n                commentPostContent: \"\",\r\n                readonly: \"\",\r\n                checkidcomment: null,\r\n                systemmsgError: null,\r\n                commentPostID: '',\r\n                deleteModalShow: false,\r\n                showEdit: true,\r\n                deleteCmId: null,\r\n                deleteCmContent: null,\r\n                deleteCmPostId: null,\r\n                deletePostModalShow: false,\r\n                obj_SelectedComponent: false,\r\n                result: \"\",\r\n                post: [{\r\n                    CONname: \"\",\r\n                    PostContent: \"\",\r\n                    PostCreatedBy: \"\",\r\n                    PostCreatedDate: \"\",\r\n                    PostID: \"\",\r\n                    PostType: \"\",\r\n                    PostUpdDtlDescription: \"\",\r\n                    ProfileImage: \"\",\r\n                    RowNumber: \"\",\r\n                    collapsed: true,\r\n                    commentItems: [],\r\n                    commentPostID: \"\",\r\n                    postFiles: \"\",\r\n                    postReaction: [],\r\n                    countImageFile: \"\"\r\n                }],\r\n                str_TimerID: \"\",\r\n                likeCount: 0,\r\n                isFile: false,\r\n                approverPostNotShow: true,\r\n                remainingImage: \"\",\r\n            };\r\n        },\r\n        mounted() {\r\n            if (!this.isNull(this.approverPost) && this.approverPost === 'YES') {\r\n                this.approverPostNotShow = false;\r\n            }\r\n            if (!this.isNull(this.parentPost)) {\r\n                this.initPost();\r\n            }\r\n        },\r\n        props: [\"parentPost\", \"commentitemSubmit\", \"hideComment\", \"isHome\", \"hideSubmenu\", \"loadPost\", \"approverPost\"],\r\n        methods: {\r\n            showImageModal(){\r\n                this.$refs['imageModal'].show()\r\n            },\r\n            hideImageModal(){\r\n                this.$refs['imageModal'].hide()\r\n            },\r\n            checkIfImage(file) {\r\n                return isImage(file);\r\n            },\r\n            isMobile() {\r\n                if (screen.width <= 760) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            },\r\n            showCommentTransition(CommentBtnPostID) {\r\n                this.show3 = CommentBtnPostID;\r\n            },\r\n            getUserSelectedCommentReaction(str_Reaction, commentItem) {\r\n                let isExist = !this.isNull(commentItem.commentReactions) ? commentItem.commentReactions.filter(x => x.PoReaCreatedBy === Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction) : false;\r\n                return isExist;\r\n            },\r\n\r\n            getCommentReactionCount(str_Reaction, commentItem) {\r\n                // setInterval(() => {\r\n                //     DataSource.shared.getPostReaction(commentItem.PoCmID).then((result) => {\r\n                //         this.$set(this.post.commentItems, \"commentReaction\", result.Table)\r\n                //     });\r\n                // }, 2000);\r\n\r\n\r\n                let int_ReactionCount = !this.isNull(commentItem.commentReactions) ? commentItem.commentReactions.filter(x => x.PoReaType.toUpperCase() === str_Reaction).length : 0;\r\n                return int_ReactionCount;\r\n                /*\r\n                let int_ReactionCount = !this.isNull(commentItem.commentReaction) ? commentItem.commentReaction.filter(x => x.PoReaType.toUpperCase() === str_Reaction).length : 0;\r\n\r\n                return int_ReactionCount*/\r\n            },\r\n\r\n            toggleCommentReaction(e, commentItem) {\r\n                let reaction = $(e.target).val();\r\n                let isChecked = $(e.target).prop(\"checked\");\r\n\r\n                $(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\r\n\r\n                DataSource.shared.updatePostReaction(commentItem.PoCmID, \"DELETE\")\r\n                    .then(() => {\r\n                        $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\r\n\r\n                        if (isChecked) {\r\n                            $(e.target).closest(\"td\").addClass(\"checked\");\r\n                            return DataSource.shared.savePostReaction(commentItem.PoCmID, reaction, \"POST\");\r\n                        }\r\n                    });\r\n\r\n                /*$(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\r\n                DataSource.shared.updatePostReaction(commentItem.PoCmID, \"DELETE\")\r\n                    .then(() => {\r\n                        $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\r\n\r\n                        if (isChecked) {\r\n                            $(e.target).closest(\"td\").addClass(\"checked\");\r\n                            DataSource.shared.savePostReaction(commentItem.PoCmID, reaction, \"COMMENT\");\r\n                        }\r\n                    });*/\r\n            }\r\n            ,\r\n\r\n            getUserSelectedReaction(str_Reaction) {\r\n                let isExist = !this.isNull(this.post.postReaction) ? this.post.postReaction.filter(x => Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction).length : 0;\r\n                return isExist;\r\n            },\r\n\r\n            getPostReactionCount(str_Reaction) {\r\n                let isExist = !this.isNull(this.post.postReaction) ? this.post.postReaction.filter(x => x.PoReaCreatedBy === Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction).length : 0;\r\n                return isExist;\r\n                let reactionCount = this.post.postReaction.length;\r\n            }\r\n            ,\r\n\r\n            togglePostReaction(e) {\r\n                let reaction = $(e.target).val();\r\n                let isChecked = $(e.target).prop(\"checked\");\r\n                $(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\r\n\r\n                DataSource.shared.updatePostReaction(this.post.PostID, \"DELETE\")\r\n                    .then(() => {\r\n                        $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\r\n\r\n                        if (isChecked) {\r\n                            $(e.target).closest(\"td\").addClass(\"checked\");\r\n                            return DataSource.shared.savePostReaction(this.post.PostID, reaction, \"POST\");\r\n                        }\r\n                    })\r\n                    .then(() => {\r\n                        DataSource.shared.getPostReaction(this.post.PostID).then((result) => {\r\n                            this.$set(this.post, \"postReaction\", result.Table);\r\n                        });\r\n                    });\r\n            }\r\n            ,\r\n\r\n            /*#region Download Item Functions*/\r\n            downloadItem() {\r\n                let arr_Promises = [];\r\n                this.showLoading();\r\n\r\n                for (let obj_SelectedItem of this.arrobj_SelectedItem) {\r\n                    let downloadPromise = new Promise((resolve, reject) => {\r\n                        DataSource.shared.downloadFile(obj_SelectedItem.GalID).then((result) => {\r\n                            let file = (result.Table)[0];\r\n                            let a = document.createElement(\"a\");\r\n                            let contentType = this.getContentType(file);\r\n                            let b64Data = file.GalFile;\r\n                            let blob = this.b64toBlob(b64Data, contentType);\r\n\r\n                            a.href = URL.createObjectURL(blob);\r\n                            a.download = (file.GalFileName + file.GalFileExt).toString();\r\n                            a.style.display = \"none\";\r\n                            document.body.appendChild(a);\r\n                            a.click();\r\n                            a.remove();\r\n                            resolve(result);\r\n                        });\r\n                    });\r\n\r\n                    arr_Promises.push(downloadPromise);\r\n                }\r\n\r\n                Promise.all(arr_Promises).then((result) => {\r\n                    this.hideLoading();\r\n                });\r\n            }\r\n            ,\r\n            getContentType(e) {\r\n                let contentType = \"\";\r\n\r\n                switch (e.GalFileExt.toUpperCase()) {\r\n                    case \".PDF\":\r\n                        contentType += \"application/octet-stream\";\r\n                        break;\r\n                    default:\r\n                        contentType += e.GalFileType;\r\n                        break;\r\n                }\r\n\r\n                return contentType;\r\n            }\r\n            ,\r\n            b64toBlob(b64Data, contentType, sliceSize) {\r\n                //Credit to Jeremy Banks @ stackoverflow\r\n                contentType = contentType || '';\r\n                sliceSize = sliceSize || 512;\r\n\r\n                let byteCharacters = atob(b64Data);\r\n                let byteArrays = [];\r\n\r\n                for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n                    let slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n                    let byteNumbers = new Array(slice.length);\r\n                    for (let i = 0; i < slice.length; i++) {\r\n                        byteNumbers[i] = slice.charCodeAt(i);\r\n                    }\r\n\r\n                    let byteArray = new Uint8Array(byteNumbers);\r\n\r\n                    byteArrays.push(byteArray);\r\n                }\r\n\r\n                return new Blob(byteArrays, {type: contentType});\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n            initPost() {\r\n                /*this.resetPost();*/\r\n                // let tempobj = !this.isNull(this.post.PostID) ? this.post : this.parentPost;\r\n                this.post = this.parentPost;\r\n                let promise_GetPostFile = DataSource.shared.getPostFile(this.post.PostID);\r\n                let promise_GetPostReaction = DataSource.shared.getPostReaction(this.post.PostID);\r\n\r\n                Promise.all([promise_GetPostFile, promise_GetPostReaction])\r\n                    .then((result) => {\r\n                        this.$set(this.post, \"postFiles\", result[0].Table);\r\n                        this.$set(this.post, \"collapsed\", true);\r\n                        this.$set(this.post, \"postReaction\", result[1].Table);\r\n                        this.getComment();\r\n                        const countImageFile = this.post && this.post.postFiles && this.post.postFiles.length;\r\n                        this.$set(this.post, \"countImageFile\", countImageFile);\r\n\r\n                        this.remainingImage = this.post.countImageFile - 4;\r\n                    });\r\n                setInterval(() => {\r\n                    this.getComment();\r\n                    }, 3000);\r\n            },\r\n\r\n            initCommentInterval() {\r\n                /* setInterval(() => {\r\n                     this.getComment;\r\n                 },\r\n                    3000);*/\r\n\r\n                /*  setTimeout(\r\n                      this.getComment\r\n                      , 3000);*/\r\n                /* if (!this.isNull(comments.Table)) {\r\n                     for (let i = 0; i < comments.Table.length; i++)\r\n                         setInterval(() => {\r\n                             DataSource.shared.getPostReaction(comments.Table[i].PoCmID).then((commentReactions) => {\r\n                                 this.$set(this.post.commentItems[i], \"commentReactions\", commentReactions.Table);\r\n                             });\r\n                         }, 5000);\r\n                 }*/\r\n\r\n                /*this.$set(this.post, \"commentPostID\", this.post.PostID);\r\n                this.$set(this.post, \"commentItems\", result[1].Table);*/\r\n\r\n                /*for(let comment of this.post.commentItems){\r\n                }*/\r\n            },\r\n            getComment() {\r\n\r\n                    DataSource.shared.getComment(this.post.PostID).then((comments) => {\r\n                        this.$set(this.post, \"commentItems\", comments.Table);\r\n\r\n                        if (!this.isNull(this.post.commentItems)) {\r\n                            /*for (let i = 0; i < this.post.commentItems.length; i++) {\r\n                                DataSource.shared.getPostReaction(comments.Table[i].PoCmID).then((commentReactions) => {\r\n                                    this.$set(this.post.commentItems[i], \"commentReactions\", commentReactions.Table);\r\n                                });\r\n                            }*/\r\n\r\n                            this.commentCount = this.post.commentItems.length;\r\n                        } else {\r\n                            this.commentCount = \"0\";\r\n                        }\r\n                    });\r\n\r\n            },\r\n\r\n            isNull(obj) {\r\n                return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\r\n            },\r\n            isImageByExt(obj_File) {\r\n                let ext = String(obj_File.PostItemFileExt).toUpperCase();\r\n                let isImage = false;\r\n\r\n                switch (ext) {\r\n                    case \".PNG\":\r\n                    case \".JPG\":\r\n                    case \".BMP\":\r\n                    case \".GIF\":\r\n                        isImage = true;\r\n                        break;\r\n                    default:\r\n                        isImage = false;\r\n                        break;\r\n                }\r\n\r\n                return isImage;\r\n            },\r\n            getLowSource(file) {\r\n                return `data:image/jpg;base64, ${file.PostItemFileLow}`;\r\n            },\r\n            getMediumSource(file) {\r\n                let SourceisImage = this.isImageByExt(file);\r\n                if (SourceisImage === true) {\r\n                    return `data:image/jpg;base64, ${file.PostItemFileMedium}`;\r\n                } else{\r\n                    return `data:application/pdf;base64, ${file.PostItemFile}`;\r\n                }\r\n            },\r\n            getFile(file) {\r\n                return `data:${file.PostItemFileType};base64,${file.PostItemFile}`;\r\n            },\r\n            submitComment(commentPostID) {\r\n                this.$emit('commentitemSubmit', commentPostID, this.commentPostContent);\r\n                this.commentPostContent = \"\";\r\n            },\r\n            saveClick(PoCmID, PoCmContent) {\r\n                this.readonly = true;\r\n                this.showEdit = true;\r\n                this.checkidcomment = null;\r\n                this.$emit(\"commentEdit\", PoCmID, PoCmContent);\r\n            },\r\n            showDeleteModal(deleteCmId, deleteCmContent, deleteCmPostId) {\r\n                this.deleteModalShow = true;\r\n                this.deleteCmId = deleteCmId;\r\n                this.deleteCmContent = deleteCmContent;\r\n                this.deleteCmPostId = deleteCmPostId;\r\n            },\r\n            closeDeleteModal() {\r\n                this.deleteModalShow = false;\r\n            },\r\n            editClick(PoCmID) {\r\n                this.showEdit = false;\r\n                this.readonly = false;\r\n                this.checkidcomment = PoCmID;\r\n            },\r\n            deleteComment() {\r\n                this.$emit(\"commentDelete\", this.deleteCmId, this.deleteCmContent, this.deleteCmPostId);\r\n                this.closeDeleteModal();\r\n            },\r\n            removePost() {\r\n                this.$refs.modal_DeletePost.show();\r\n            },\r\n            deletePost(post) {\r\n                DataSource.shared.softDeletePost(post.PostID).then((result) => {\r\n                });\r\n                this.$emit(\"loadPosts\");\r\n            },\r\n            editPost(post) {\r\n                DataSource.shared.getPostAllTaggingStudentsByPostID(post.PostID)\r\n                    .then((result) => {\r\n                        this.post.arrobj_SelectedStudents = result.Table;\r\n\r\n                        switch (this.post.PostType.toUpperCase()) {\r\n                            case \"PORTFOLIO\":\r\n                                this.obj_SelectedComponent = portfolio;\r\n                                break;\r\n                            case \"UPDATE\":\r\n                                this.obj_SelectedComponent = updates;\r\n                                break;\r\n                        }\r\n\r\n                        this.showEditModal();\r\n                    });\r\n\r\n            },\r\n            showEditModal() {\r\n                this.$refs.modal_EditComponent.show();\r\n            },\r\n            hideEditModal() {\r\n                this.obj_SelectedComponent = false;\r\n                this.$refs.modal_EditComponent.hide();\r\n            },\r\n            displayResult(value) {\r\n                if (value == \"TRUE\")\r\n                    this.result = \"Successfully posted\";\r\n                else\r\n                    this.result = \"Something went wrong. Please inform the adminstrator\";\r\n\r\n                this.hideEditModal();\r\n            },\r\n            // checkIfImage(file) {\r\n            //     return isImage(file);\r\n            // },\r\n            // async commentEdit(PoCmID, PoCmContent) {\r\n            //     this.error = \"\";\r\n            //     //this.results = \"<< Requesting.. >>\";\r\n            //     try {\r\n            //\r\n            //         this.commentPostID = PoCmID;\r\n            //         this.commentPostContent = PoCmContent;\r\n            //         this.actionMode = \"Edit\";\r\n            //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\r\n            //         if (commentResponse) {\r\n            //             switch (commentResponse.code) {\r\n            //                 case \"1\":\r\n            //                     // reset all input filed to blank\r\n            //                     this.commentPostID = null;\r\n            //                     this.commentPostContent = \"\";\r\n            //                     this.readonly = true;\r\n            //                     // this.results = `Post Submitted`;\r\n            //                     // this.success = 'Post Submitted, activity will be active in a while';\r\n            //                     break;\r\n            //                 case \"88\":\r\n            //                     this.results = `Please Login to submit post`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 case \"99\":\r\n            //                     this.results = `Please fill in content`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 // default:\r\n            //                 //     alert(\"Please try again later\");\r\n            //                 //     this.results = JSON.stringify(response);\r\n            //             }\r\n            //         }\r\n            //     } catch (e) {\r\n            //         console.log(e);\r\n            //         this.error = e;\r\n            //     }\r\n            // },\r\n            // async commentEdit(PoCmID, PoCmContent) {\r\n            //     this.error = \"\";\r\n            //     //this.results = \"<< Requesting.. >>\";\r\n            //     try {\r\n            //\r\n            //         this.commentPostID = PoCmID;\r\n            //         this.commentPostContent = PoCmContent;\r\n            //         this.actionMode = \"Edit\";\r\n            //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\r\n            //         if (commentResponse) {\r\n            //             switch (commentResponse.code) {\r\n            //                 case \"1\":\r\n            //                     // reset all input filed to blank\r\n            //                     this.commentPostID = null;\r\n            //                     this.commentPostContent = \"\";\r\n            //                     this.readonly = true;\r\n            //                     // this.results = `Post Submitted`;\r\n            //                     // this.success = 'Post Submitted, activity will be active in a while';\r\n            //                     break;\r\n            //                 case \"88\":\r\n            //                     this.results = `Please Login to submit post`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 case \"99\":\r\n            //                     this.results = `Please fill in content`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 // default:\r\n            //                 //     alert(\"Please try again later\");\r\n            //                 //     this.results = JSON.stringify(response);\r\n            //             }\r\n            //         }\r\n            //     } catch (e) {\r\n            //         console.log(e);\r\n            //         this.error = e;\r\n            //     }\r\n            // },\r\n        },\r\n    };\r\n</script>\r\n<style scoped>\r\n\r\n\r\n    /*.reaction-table td:hover {*/\r\n    /*background-color: #f5f5f5;*/\r\n    /*}*/\r\n\r\n\r\n    .visible {\r\n        visibility: visible;\r\n        opacity: 1;\r\n    }\r\n\r\n    .hidden {\r\n        visibility: hidden;\r\n        opacity: 0;\r\n    }\r\n</style>\r\n<style>\r\n    #modal_EditComponent .modal-lg {\r\n        /*max-width: 95% !important;*/\r\n    }\r\n</style>"]}]}