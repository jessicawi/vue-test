{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\Post_Updates_Component.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\Post_Updates_Component.vue","mtime":1556559872499},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["import _parseInt from \"C:\\\\Users\\\\jessi\\\\Documents\\\\git\\\\vue-test\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\jessi\\\\Documents\\\\git\\\\vue-test\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _getIterator from \"C:\\\\Users\\\\jessi\\\\Documents\\\\git\\\\vue-test\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _Promise from \"C:\\\\Users\\\\jessi\\\\Documents\\\\git\\\\vue-test\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport VueTagsInput from '@johmun/vue-tags-input';\nimport isImage from \"is-image\";\nimport DataSource from \"../data/datasource\";\nimport tagsComponent from \"./Post_Tags_Component\";\nimport $ from \"jquery\";\nimport { removeElementFromArray } from \"../helper/utily\";\nexport default {\n  name: \"updatesComponent\",\n  data: function data() {\n    return {\n      PostID: \"\",\n      addPostContent: \"\",\n      tagClassID: \"\",\n      tagLevelID: \"\",\n      classesTable: [],\n      levelsTable: [],\n      tag: '',\n      tags: [],\n      selectedFile: [],\n      systemmsgError: false,\n      error: \"\",\n      results: \"\",\n      academicYearTable: [],\n      studentTable: [],\n      loading: false,\n      uploadedFiles: []\n    };\n  },\n  methods: {\n    sleep: function sleep(milliseconds) {\n      return new _Promise(function (resolve) {\n        return setTimeout(resolve, milliseconds);\n      });\n    },\n    //return a promise that resolves with a File instance\n    urltoFile: function urltoFile(url, filename, mimeType) {\n      return fetch(url).then(function (res) {\n        return res.arrayBuffer();\n      }).then(function (buf) {\n        return new File([buf], filename, {\n          type: mimeType\n        });\n      });\n    },\n    isNull: function isNull(obj) {\n      return obj === null || obj === undefined || obj === \"undefined\";\n    },\n    resetAll: function resetAll() {\n      this.clearPreview();\n      this.$emit(\"result\", \"CANCEL\");\n    },\n    init: function init() {\n      var _this = this;\n\n      DataSource.shared.getPostDropdown().then(function (tagResponse) {\n        if (tagResponse.AcademicYearTable && tagResponse.AcademicYearTable.Table) {\n          var uniqueYears = [];\n          tagResponse.AcademicYearTable.Table.forEach(function (object) {\n            var isExist = uniqueYears.find(function (year) {\n              return year.SMT_Code === object.SMT_Code;\n            });\n\n            if (!isExist) {\n              uniqueYears.push(object);\n            }\n          });\n          _this.academicYearTable = uniqueYears;\n        }\n\n        if (tagResponse.ClassesTable && tagResponse.ClassesTable.Table) {\n          var uniqueClass = [];\n          tagResponse.ClassesTable.Table.forEach(function (object) {\n            var isExist = uniqueClass.find(function (year) {\n              return year.PK_Class_ID === object.PK_Class_ID;\n            });\n\n            if (!isExist) {\n              uniqueClass.push(object);\n            }\n          });\n          _this.classesTable = uniqueClass;\n        }\n\n        if (tagResponse.LevelsTable && tagResponse.LevelsTable.Table) {\n          var uniqueLevel = [];\n          tagResponse.LevelsTable.Table.forEach(function (object) {\n            var isExist = uniqueLevel.find(function (level) {\n              return level.SC_FK_CourseID === object.SC_FK_CourseID;\n            });\n\n            if (!isExist) {\n              uniqueLevel.push(object);\n            }\n          });\n          _this.levelsTable = uniqueLevel;\n        }\n\n        if (tagResponse.StudentTable && tagResponse.StudentTable.Table) {\n          var uniqueStudent = [];\n          tagResponse.StudentTable.Table.forEach(function (object) {\n            var isExist = uniqueStudent.find(function (student) {\n              return student.Student_ID === object.Student_ID;\n            });\n\n            if (!isExist) {\n              var selectedValue = {\n                Student_ID: object.Student_ID,\n                text: object.Full_Name,\n                Sex: object.Sex,\n                // email: object.email,\n                Status: object.Status\n              };\n              uniqueStudent.push(selectedValue);\n            }\n          }); // this.studentTable = tagResponse.StudentTable.Table;\n\n          _this.studentTable = uniqueStudent;\n        }\n      });\n    },\n    onFileChanged: function onFileChanged(event) {\n      // this.selectedFile = event.target.files;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(event.target.files), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var file = _step.value;\n\n          if (file.size > 10048576) {\n            this.$notify.error({\n              title: 'Error',\n              message: 'File limit exceeded 10MB!'\n            });\n          } else {\n            this.selectedFile.push(file);\n          }\n        } // if (this.selectedFile.size > 5048576) {\n        //     alert(\"File is too big!\");\n        //     this.selectedFile = \"\";\n        // }\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.getImagePreviews();\n    },\n    inputChange: function inputChange(input) {\n      this.postContent = input;\n    },\n    checkIfImage: function checkIfImage(file) {\n      var fileType = file.type.toLowerCase();\n\n      switch (fileType) {\n        case \"image/jpeg\":\n        case \"image/png\":\n        case \"image/jpg\":\n          return true;\n\n        default:\n          return false;\n      }\n    },\n    isImageByExt: function isImageByExt(obj_File) {\n      var ext = String(obj_File.PostItemFileExt).toUpperCase();\n      var isImage = false;\n\n      switch (ext) {\n        case \".PNG\":\n        case \".JPG\":\n        case \".BMP\":\n        case \".GIF\":\n          isImage = true;\n          break;\n\n        default:\n          isImage = false;\n          break;\n      }\n\n      return isImage;\n    },\n    successMsg: function successMsg() {},\n    errorMsg: function errorMsg() {},\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var saveResponse;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.error = \"\";\n                this.$vs.loading();\n                _context.next = 4;\n                return this.sleep(500);\n\n              case 4:\n                _context.prev = 4;\n                _context.next = 7;\n                return DataSource.shared.savePostUpdate(this.selectedFile, this.addPostContent, this.tags, this.tagClassID, this.tagLevelID, this.PostID);\n\n              case 7:\n                saveResponse = _context.sent;\n\n                if (!saveResponse) {\n                  _context.next = 35;\n                  break;\n                }\n\n                if (saveResponse.code == \"1\") this.$emit(\"result\", \"TRUE\");else this.$emit(\"result\", \"FALSE\");\n                _context.t0 = saveResponse.code;\n                _context.next = _context.t0 === \"1\" ? 13 : _context.t0 === \"88\" ? 27 : _context.t0 === \"99\" ? 31 : 35;\n                break;\n\n              case 13:\n                this.$emit(\"loadPosts\");\n                this.isModalOpen = false; // reset all input filed to blank\n\n                this.selectedFile = [];\n                this.$refs.fileupload.value = \"\";\n                this.addPostContent = \"\";\n                this.tagAcademicYearID = null;\n                this.tagLevelID = null;\n                this.tagClassID = null;\n                this.results = \"Post Submitted\"; // this.success = '';\n\n                this.$notify({\n                  title: 'Success',\n                  message: 'Post Submitted, activity will be active in a while',\n                  type: 'success'\n                });\n                _context.next = 25;\n                return DataSource.shared.softDeletePost(this.PostID);\n\n              case 25:\n                this.$vs.loading.close();\n                return _context.abrupt(\"break\", 35);\n\n              case 27:\n                this.$vs.loading.close();\n                this.$notify.error({\n                  title: 'Error',\n                  message: 'Please Login to submit post'\n                });\n                this.systemmsgError = true;\n                return _context.abrupt(\"break\", 35);\n\n              case 31:\n                this.$vs.loading.close();\n                this.$notify.error({\n                  title: 'Error',\n                  message: 'Please fill in content'\n                });\n                this.systemmsgError = true;\n                return _context.abrupt(\"break\", 35);\n\n              case 35:\n                _context.next = 41;\n                break;\n\n              case 37:\n                _context.prev = 37;\n                _context.t1 = _context[\"catch\"](4);\n                console.log(_context.t1);\n                this.error = _context.t1;\n\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 37]]);\n      }));\n\n      function onSubmit() {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }(),\n    getImagePreviews: function getImagePreviews() {\n      var _this2 = this;\n\n      var _loop = function _loop(i) {\n        /*\n          Ensure the file is an image file\n        */\n        if (/\\.(jpe?g|png|gif)$/i.test(_this2.selectedFile[i].name)) {\n          /*\n            Create a new FileReader object\n          */\n          var reader = new FileReader();\n          /*\n            Add an event listener for when the file has been loaded\n            to update the src on the file preview.\n          */\n\n          reader.addEventListener(\"load\", function () {\n            this.$refs['image' + _parseInt(i)][0].src = reader.result;\n          }.bind(_this2), false);\n          /*\n            Read the data for the file in through the reader. When it has\n            been loaded, we listen to the event propagated and set the image\n            src to what was loaded from the reader.\n          */\n\n          reader.readAsDataURL(_this2.selectedFile[i]);\n        }\n      };\n\n      /*\n        Iterate over all of the files and generate an image preview for each one.\n      */\n      for (var i = 0; i < this.selectedFile.length; i++) {\n        _loop(i);\n      }\n    },\n    clearPreview: function clearPreview() {\n      $(\"#inputfile\").val(\"\");\n      this.selectedFile = [];\n    },\n    removePreviewImg: function removePreviewImg(fileName) {\n      this.selectedFile = this.selectedFile.filter(function (d) {\n        return d.name !== fileName;\n      });\n      this.getImagePreviews();\n    },\n    setTags: function setTags(value) {\n      this.tags = value;\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.init();\n\n    if (!this.isNull(this.post)) {\n      this.addPostContent = this.post.PostContent;\n      this.PostID = this.post.PostID;\n      /*this.selectedFile = ()=>{\n          let tempselectedFile = [];\n          for (let image of this.post.postFiles) {\n              let url = \"data:\" + image.GalFileType + \";base64,\" + image.GalFileLow;\n              let fileName = image.GalFileName + image.GalFileExt;\n              let mimeType = image.GalFileType;\n              this.urltoFile(url, fileName, mimeType).then((file) => {\n                  tempselectedFile.push(file)\n              }).finally(() => {\n                  return tempselectedFile;\n              });\n          }\n      };*/\n    }\n\n    if (!this.isNull(this.images)) {\n      this.selectedFile = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(this.images), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var image = _step2.value;\n          var url = \"data:\" + image.GalFileType + \";base64,\" + image.GalFileLow;\n          var fileName = image.GalFileName + image.GalFileExt;\n          var mimeType = image.GalFileType;\n          this.urltoFile(url, fileName, mimeType).then(function (file) {\n            _this3.selectedFile.push(file);\n          }).finally(function () {\n            _this3.getImagePreviews();\n          });\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    }\n  },\n  computed: {\n    items: function items() {\n      var _this4 = this;\n\n      return this.studentTable.filter(function (i) {\n        return i.text.toLowerCase().indexOf(_this4.tag.toLowerCase()) !== -1;\n      });\n    }\n  },\n  components: {\n    /*VueTagsInput,*/\n    tagsComponent: tagsComponent\n  },\n  props: [\"images\", \"post\"]\n};",{"version":3,"sources":["Post_Updates_Component.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"container-fluid\">\r\n\r\n        <div class=\"row\">\r\n            <div class=\"col-12\">\r\n                <form class=\"needs-validation form-style vs-con-loading__container\" novalidate\r\n                      @submit.prevent=\"onSubmit\" id=\"div-with-loading\">\r\n                    <div class=\"mb-3 form-group\">\r\n                        <!--<label for=\"username\">Username</label>-->\r\n                        <textarea type=\"text\" class=\"form-control\" id=\"postContent\" v-model=\"addPostContent\"\r\n                                  placeholder=\"CONTENT\"></textarea>\r\n                    </div>\r\n                    <!--<div class=\"row\">\r\n                        <div class=\"col-md-6 \">\r\n                            <label :for=\"tagClassID\">Class</label>\r\n                            <select class=\"form-control\" id=\"tagClassID\" v-model=\"tagClassID\">\r\n                                <option v-for=\"object in classesTable\" :key=\"object.PK_Class_ID\"\r\n                                        :value=\"object.PK_Class_ID\">{{object.CLS_ClassName}}\r\n                                </option>\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <label for=\"tagLevelID\">Level</label>\r\n                            <select class=\"form-control\" id=\"tagLevelID\" v-model=\"tagLevelID\">\r\n                                <option v-for=\"object in levelsTable\" :key=\"object.PK_Class_ID\"\r\n                                        :value=\"object.SC_FK_CourseID\">{{object.CRS_Course_Name}}\r\n                                </option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-12\">\r\n                            <label>Student</label>\r\n                            <vue-tags-input\r\n                                    v-model=\"tag\"\r\n                                    :tags=\"tags\"\r\n                                    :allow-edit-tags=\"true\"\r\n                                    :autocomplete-items=\"items\"\r\n                                    :add-only-from-autocomplete=\"true\"\r\n                                    :autocomplete-min-length=\"3\"\r\n                                    placeholder=\"Min 3 Character\"\r\n                                    class=\"tags-input\"\r\n                                    @tags-changed=\"newTags => tags = newTags\"\r\n                            />\r\n                        </div>\r\n                    </div>-->\r\n                    <tags-component @tags=\"setTags\" :parent_Post=\"post\"></tags-component>\r\n                    <div class=\"row inputFile-box\">\r\n                        <div class=\"col-md-12\">\r\n                            <input type=\"file\" multiple @change=\"onFileChanged\" ref=\"fileupload\" class=\"inputfile\"\r\n                                   id=\"inputfile\"\r\n                                   data-multiple-caption=\"{count} files selected\">\r\n                            <label for=\"inputfile\">Choose a file</label>\r\n\r\n                            <div class=\"btn btn-primary\" v-if=\"selectedFile\" @click=\"clearPreview()\"><strong>X</strong>\r\n                                REMOVE ALL\r\n                            </div>\r\n                            <div class=\"uploadFile-image\">\r\n                                <div v-for=\"(file, key) in selectedFile\" class=\"col-md-3 file-listing\"\r\n                                     :key=\"(file, key).id\"\r\n                                     v-if=\"checkIfImage(file)\">\r\n                                    <img class=\"preview\" v-bind:ref=\"'image'+parseInt( key )\"/>\r\n                                    <span @click=\"removePreviewImg(file.name)\" class=\"clearFile-single\"><i class=\"el-icon-error\"></i></span>\r\n                                </div>\r\n                                <div v-for=\"(file, key) in selectedFile\" class=\"col-md-3 file-listing nonimg-uploadFile\"\r\n                                     :key=\"(file, key).id\"\r\n                                     v-if=\"!checkIfImage(file)\">\r\n                                    <i class=\"el-icon-tickets\"></i> {{ file.name }}\r\n                                    <span @click=\"removePreviewImg(file)\" class=\"clearFile-single\"><i class=\"el-icon-error\"></i> </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"mb-2\">\r\n\r\n                    </div>\r\n                    <!--<div class=\"system-msg\" v-bind:class=\"{'bg-danger': systemmsgError===true}\">{{results}}-->\r\n                    <!--<p v-if=\"error\" style=\"color: red\">{{error}}</p></div>-->\r\n                    <div class=\"row d-flex  form-footer\">\r\n                        <div class=\"col-md-6\">\r\n                            <b-btn @click=\"resetAll\" class=\"float-left btn-secondary\">Cancel</b-btn>\r\n                        </div>\r\n                        <div class=\"col-md-6\">\r\n                            <button class=\"btn btn-primary \" type=\"submit\">Submit\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import VueTagsInput from '@johmun/vue-tags-input';\r\n    import isImage from \"is-image\";\r\n    import DataSource from \"../data/datasource\";\r\n    import tagsComponent from \"./Post_Tags_Component\";\r\n    import $ from \"jquery\";\r\n    import {removeElementFromArray} from \"../helper/utily\";\r\n\r\n    export default {\r\n        name: \"updatesComponent\",\r\n        data() {\r\n            return {\r\n                PostID: \"\",\r\n                addPostContent: \"\",\r\n                tagClassID: \"\",\r\n                tagLevelID: \"\",\r\n                classesTable: [],\r\n                levelsTable: [],\r\n                tag: '',\r\n                tags: [],\r\n                selectedFile: [],\r\n                systemmsgError: false,\r\n                error: \"\",\r\n                results: \"\",\r\n                academicYearTable: [],\r\n                studentTable: [],\r\n                loading: false,\r\n                uploadedFiles: []\r\n            };\r\n        },\r\n        methods: {\r\n            sleep(milliseconds) {\r\n                return new Promise(resolve => setTimeout(resolve, milliseconds));\r\n            },\r\n            //return a promise that resolves with a File instance\r\n            urltoFile(url, filename, mimeType) {\r\n                return (fetch(url)\r\n                        .then(function (res) {\r\n                            return res.arrayBuffer();\r\n                        })\r\n                        .then(function (buf) {\r\n                            return new File([buf], filename, {type: mimeType});\r\n                        })\r\n                );\r\n            },\r\n            isNull(obj) {\r\n                return (obj === null || obj === undefined || obj === \"undefined\");\r\n            },\r\n            resetAll() {\r\n                this.clearPreview();\r\n                this.$emit(\"result\", \"CANCEL\");\r\n            },\r\n            init() {\r\n                DataSource.shared.getPostDropdown().then((tagResponse) => {\r\n                    if (tagResponse.AcademicYearTable && tagResponse.AcademicYearTable.Table) {\r\n                        let uniqueYears = [];\r\n                        tagResponse.AcademicYearTable.Table.forEach(object => {\r\n                            const isExist = uniqueYears.find(year => year.SMT_Code === object.SMT_Code);\r\n                            if (!isExist) {\r\n                                uniqueYears.push(object);\r\n                            }\r\n                        });\r\n                        this.academicYearTable = uniqueYears;\r\n                    }\r\n                    if (tagResponse.ClassesTable && tagResponse.ClassesTable.Table) {\r\n                        let uniqueClass = [];\r\n                        tagResponse.ClassesTable.Table.forEach(object => {\r\n                            const isExist = uniqueClass.find(year => year.PK_Class_ID === object.PK_Class_ID);\r\n                            if (!isExist) {\r\n                                uniqueClass.push(object);\r\n                            }\r\n                        });\r\n                        this.classesTable = uniqueClass;\r\n                    }\r\n                    if (tagResponse.LevelsTable && tagResponse.LevelsTable.Table) {\r\n\r\n                        let uniqueLevel = [];\r\n                        tagResponse.LevelsTable.Table.forEach(object => {\r\n                            const isExist = uniqueLevel.find(level => level.SC_FK_CourseID === object.SC_FK_CourseID);\r\n                            if (!isExist) {\r\n                                uniqueLevel.push(object);\r\n                            }\r\n                        });\r\n\r\n                        this.levelsTable = uniqueLevel;\r\n                    }\r\n                    if (tagResponse.StudentTable && tagResponse.StudentTable.Table) {\r\n                        let uniqueStudent = [];\r\n                        tagResponse.StudentTable.Table.forEach(object => {\r\n                            const isExist = uniqueStudent.find(student => student.Student_ID === object.Student_ID);\r\n                            if (!isExist) {\r\n                                const selectedValue = {\r\n                                    Student_ID: object.Student_ID,\r\n                                    text: object.Full_Name,\r\n                                    Sex: object.Sex,\r\n                                    // email: object.email,\r\n                                    Status: object.Status\r\n                                };\r\n                                uniqueStudent.push(selectedValue);\r\n                            }\r\n                        });\r\n                        // this.studentTable = tagResponse.StudentTable.Table;\r\n                        this.studentTable = uniqueStudent;\r\n                    }\r\n                });\r\n            },\r\n            onFileChanged(event) {\r\n                // this.selectedFile = event.target.files;\r\n                for (let file of event.target.files) {\r\n                    if (file.size > 10048576) {\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'File limit exceeded 10MB!'\r\n                        });\r\n                    } else {\r\n                        this.selectedFile.push(file);\r\n                    }\r\n                }\r\n                // if (this.selectedFile.size > 5048576) {\r\n                //     alert(\"File is too big!\");\r\n                //     this.selectedFile = \"\";\r\n                // }\r\n                this.getImagePreviews();\r\n            },\r\n            inputChange(input) {\r\n                this.postContent = input;\r\n            },\r\n            checkIfImage(file) {\r\n                const fileType = file.type.toLowerCase();\r\n                switch (fileType) {\r\n                    case \"image/jpeg\":\r\n                    case \"image/png\":\r\n                    case \"image/jpg\":\r\n                        return true;\r\n                    default:\r\n                        return false;\r\n                }\r\n            },\r\n            isImageByExt(obj_File) {\r\n                let ext = String(obj_File.PostItemFileExt).toUpperCase();\r\n                let isImage = false;\r\n\r\n                switch (ext) {\r\n                    case \".PNG\":\r\n                    case \".JPG\":\r\n                    case \".BMP\":\r\n                    case \".GIF\":\r\n                        isImage = true;\r\n                        break;\r\n                    default:\r\n                        isImage = false;\r\n                        break;\r\n                }\r\n\r\n                return isImage;\r\n            },\r\n            successMsg() {\r\n\r\n            },\r\n            errorMsg() {\r\n\r\n            },\r\n            async onSubmit() {\r\n                this.error = \"\";\r\n                this.$vs.loading();\r\n                await this.sleep(500);\r\n                //this.results = \"<< Requesting.. >>\";\r\n                try {\r\n                    /*const studentsIds = this.tags.map(d => d.Student_ID);*/\r\n\r\n\r\n                    const saveResponse = await DataSource.shared.savePostUpdate(this.selectedFile, this.addPostContent, this.tags, this.tagClassID, this.tagLevelID, this.PostID);\r\n                    if (saveResponse) {\r\n\r\n                        if (saveResponse.code == \"1\")\r\n                            this.$emit(\"result\", \"TRUE\");\r\n                        else\r\n                            this.$emit(\"result\", \"FALSE\");\r\n                        switch (saveResponse.code) {\r\n                            case \"1\":\r\n                                this.$emit(\"loadPosts\");\r\n                                this.isModalOpen = false;\r\n                                // reset all input filed to blank\r\n                                this.selectedFile = [];\r\n                                this.$refs.fileupload.value = \"\";\r\n                                this.addPostContent = \"\";\r\n                                this.tagAcademicYearID = null;\r\n\r\n                                this.tagLevelID = null;\r\n                                this.tagClassID = null;\r\n                                this.results = `Post Submitted`;\r\n                                // this.success = '';\r\n                                this.$notify({\r\n                                    title: 'Success',\r\n                                    message: 'Post Submitted, activity will be active in a while',\r\n                                    type: 'success'\r\n                                });\r\n                                await DataSource.shared.softDeletePost(this.PostID);\r\n\r\n                                this.$vs.loading.close();\r\n                                break;\r\n                            case \"88\":\r\n                                this.$vs.loading.close();\r\n                                this.$notify.error({\r\n                                    title: 'Error',\r\n                                    message: 'Please Login to submit post'\r\n                                });\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            case \"99\":\r\n                                this.$vs.loading.close();\r\n                                this.$notify.error({\r\n                                    title: 'Error',\r\n                                    message: 'Please fill in content'\r\n                                });\r\n                                this.systemmsgError = true;\r\n                                break;\r\n                            // default:\r\n                            //     alert(\"Please try again later\");\r\n                            //     this.results = JSON.stringify(response);\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.log(e);\r\n                    this.error = e;\r\n                }\r\n            },\r\n            getImagePreviews() {\r\n                /*\r\n                  Iterate over all of the files and generate an image preview for each one.\r\n                */\r\n                for (let i = 0; i < this.selectedFile.length; i++) {\r\n                    /*\r\n                      Ensure the file is an image file\r\n                    */\r\n                    if (/\\.(jpe?g|png|gif)$/i.test(this.selectedFile[i].name)) {\r\n                        /*\r\n                          Create a new FileReader object\r\n                        */\r\n                        let reader = new FileReader();\r\n\r\n                        /*\r\n                          Add an event listener for when the file has been loaded\r\n                          to update the src on the file preview.\r\n                        */\r\n                        reader.addEventListener(\"load\", function () {\r\n                            this.$refs['image' + parseInt(i)][0].src = reader.result;\r\n                        }.bind(this), false);\r\n\r\n                        /*\r\n                          Read the data for the file in through the reader. When it has\r\n                          been loaded, we listen to the event propagated and set the image\r\n                          src to what was loaded from the reader.\r\n                        */\r\n                        reader.readAsDataURL(this.selectedFile[i]);\r\n                    }\r\n                }\r\n            },\r\n            clearPreview() {\r\n                $(\"#inputfile\").val(\"\");\r\n                this.selectedFile = [];\r\n            },\r\n            removePreviewImg(fileName) {\r\n\r\n                this.selectedFile = this.selectedFile.filter(d => {\r\n                    return d.name !== fileName;\r\n                });\r\n\r\n                this.getImagePreviews()\r\n            },\r\n            setTags(value) {\r\n                this.tags = value;\r\n            },\r\n        },\r\n        mounted() {\r\n            this.init();\r\n\r\n            if (!this.isNull(this.post)) {\r\n                this.addPostContent = this.post.PostContent;\r\n                this.PostID = this.post.PostID;\r\n                /*this.selectedFile = ()=>{\r\n                    let tempselectedFile = [];\r\n                    for (let image of this.post.postFiles) {\r\n                        let url = \"data:\" + image.GalFileType + \";base64,\" + image.GalFileLow;\r\n                        let fileName = image.GalFileName + image.GalFileExt;\r\n                        let mimeType = image.GalFileType;\r\n                        this.urltoFile(url, fileName, mimeType).then((file) => {\r\n                            tempselectedFile.push(file)\r\n                        }).finally(() => {\r\n                            return tempselectedFile;\r\n                        });\r\n                    }\r\n                };*/\r\n            }\r\n\r\n            if (!this.isNull(this.images)) {\r\n                this.selectedFile = [];\r\n                for (let image of this.images) {\r\n                    let url = \"data:\" + image.GalFileType + \";base64,\" + image.GalFileLow;\r\n                    let fileName = image.GalFileName + image.GalFileExt;\r\n                    let mimeType = image.GalFileType;\r\n                    this.urltoFile(url, fileName, mimeType).then((file) => {\r\n                        this.selectedFile.push(file);\r\n                    }).finally(() => {\r\n                        this.getImagePreviews();\r\n                    });\r\n                }\r\n            }\r\n        },\r\n        computed: {\r\n            items() {\r\n                return this.studentTable.filter(i => {\r\n                    return i.text.toLowerCase().indexOf(this.tag.toLowerCase()) !== -1;\r\n                });\r\n            },\r\n        },\r\n        components: {\r\n            /*VueTagsInput,*/\r\n            tagsComponent\r\n        },\r\n        props: [\"images\", \"post\"],\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"sourceRoot":"src/components"}]}