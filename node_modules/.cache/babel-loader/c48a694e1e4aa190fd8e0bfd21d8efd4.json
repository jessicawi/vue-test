{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\postCompnent.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\postCompnent.vue","mtime":1558979915662},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _getIterator from \"C:\\\\Users\\\\jessi\\\\Documents\\\\git\\\\vue-test\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport _Promise from \"C:\\\\Users\\\\jessi\\\\Documents\\\\git\\\\vue-test\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.find\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport isImage from \"is-image\";\nimport DataSource from \"../data/datasource\";\nimport AlertComponent from \"./alertComponent\";\nimport portfolio from \"../components/Post_Portfolio_Component\";\nimport updates from \"../components/Post_Updates_Component.vue\";\nimport Cookies from \"js-cookie\";\nimport $ from \"jquery\";\nexport default {\n  name: 'postComponent',\n  components: {\n    AlertComponent: AlertComponent,\n    updates: updates,\n    portfolio: portfolio\n  },\n  data: function data() {\n    return {\n      reactionCount2: \"\",\n      commentCount: \"\",\n      show3: false,\n      commentPostContent: \"\",\n      readonly: \"\",\n      checkidcomment: null,\n      systemmsgError: null,\n      commentPostID: '',\n      deleteModalShow: false,\n      showEdit: true,\n      deleteCmId: null,\n      deleteCmContent: null,\n      deleteCmPostId: null,\n      deletePostModalShow: false,\n      obj_SelectedComponent: false,\n      result: \"\",\n      post: [{\n        CONname: \"\",\n        PostContent: \"\",\n        PostCreatedBy: \"\",\n        PostCreatedDate: \"\",\n        PostID: \"\",\n        PostType: \"\",\n        PostUpdDtlDescription: \"\",\n        ProfileImage: \"\",\n        RowNumber: \"\",\n        collapsed: true,\n        commentItems: [],\n        commentPostID: \"\",\n        postFiles: \"\",\n        postReaction: [],\n        countImageFile: \"\"\n      }],\n      str_TimerID: \"\",\n      likeCount: 0,\n      isFile: false,\n      approverPostNotShow: true,\n      remainingImage: \"\"\n    };\n  },\n  mounted: function mounted() {\n    if (!this.isNull(this.approverPost) && this.approverPost === 'YES') {\n      this.approverPostNotShow = false;\n    }\n\n    if (!this.isNull(this.parentPost)) {\n      this.initPost();\n    }\n  },\n  props: [\"parentPost\", \"commentitemSubmit\", \"hideComment\", \"isHome\", \"hideSubmenu\", \"loadPost\", \"approverPost\"],\n  methods: {\n    showImageModal: function showImageModal() {\n      this.$refs['imageModal'].show();\n    },\n    hideImageModal: function hideImageModal() {\n      this.$refs['imageModal'].hide();\n    },\n    checkIfImage: function checkIfImage(file) {\n      return isImage(file);\n    },\n    isMobile: function isMobile() {\n      if (screen.width <= 760) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    showCommentTransition: function showCommentTransition(CommentBtnPostID) {\n      this.show3 = CommentBtnPostID;\n    },\n    getUserSelectedCommentReaction: function getUserSelectedCommentReaction(str_Reaction, commentItem) {\n      var isExist = !this.isNull(commentItem.commentReactions) ? commentItem.commentReactions.filter(function (x) {\n        return x.PoReaCreatedBy === Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction;\n      }) : false;\n      return isExist;\n    },\n    getCommentReactionCount: function getCommentReactionCount(str_Reaction, commentItem) {\n      // setInterval(() => {\n      //     DataSource.shared.getPostReaction(commentItem.PoCmID).then((result) => {\n      //         this.$set(this.post.commentItems, \"commentReaction\", result.Table)\n      //     });\n      // }, 2000);\n      var int_ReactionCount = !this.isNull(commentItem.commentReactions) ? commentItem.commentReactions.filter(function (x) {\n        return x.PoReaType.toUpperCase() === str_Reaction;\n      }).length : 0;\n      return int_ReactionCount;\n      /*\n      let int_ReactionCount = !this.isNull(commentItem.commentReaction) ? commentItem.commentReaction.filter(x => x.PoReaType.toUpperCase() === str_Reaction).length : 0;\n       return int_ReactionCount*/\n    },\n    toggleCommentReaction: function toggleCommentReaction(e, commentItem) {\n      var reaction = $(e.target).val();\n      var isChecked = $(e.target).prop(\"checked\");\n      $(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\n      DataSource.shared.updatePostReaction(commentItem.PoCmID, \"DELETE\").then(function () {\n        $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\n\n        if (isChecked) {\n          $(e.target).closest(\"td\").addClass(\"checked\");\n          return DataSource.shared.savePostReaction(commentItem.PoCmID, reaction, \"POST\");\n        }\n      });\n      /*$(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\n      DataSource.shared.updatePostReaction(commentItem.PoCmID, \"DELETE\")\n          .then(() => {\n              $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\n               if (isChecked) {\n                  $(e.target).closest(\"td\").addClass(\"checked\");\n                  DataSource.shared.savePostReaction(commentItem.PoCmID, reaction, \"COMMENT\");\n              }\n          });*/\n    },\n    getUserSelectedReaction: function getUserSelectedReaction(str_Reaction) {\n      var isExist = !this.isNull(this.post.postReaction) ? this.post.postReaction.filter(function (x) {\n        return Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction;\n      }).length : 0;\n      return isExist;\n    },\n    getPostReactionCount: function getPostReactionCount(str_Reaction) {\n      var isExist = !this.isNull(this.post.postReaction) ? this.post.postReaction.filter(function (x) {\n        return x.PoReaCreatedBy === Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction;\n      }).length : 0;\n      return isExist;\n      var reactionCount = this.post.postReaction.length;\n    },\n    togglePostReaction: function togglePostReaction(e) {\n      var _this = this;\n\n      var reaction = $(e.target).val();\n      var isChecked = $(e.target).prop(\"checked\");\n      $(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\n      DataSource.shared.updatePostReaction(this.post.PostID, \"DELETE\").then(function () {\n        $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\n\n        if (isChecked) {\n          $(e.target).closest(\"td\").addClass(\"checked\");\n          return DataSource.shared.savePostReaction(_this.post.PostID, reaction, \"POST\");\n        }\n      }).then(function () {\n        DataSource.shared.getPostReaction(_this.post.PostID).then(function (result) {\n          _this.$set(_this.post, \"postReaction\", result.Table);\n        });\n      });\n    },\n\n    /*#region Download Item Functions*/\n    downloadItem: function downloadItem() {\n      var _this2 = this;\n\n      var arr_Promises = [];\n      this.showLoading();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var obj_SelectedItem = _step.value;\n          var downloadPromise = new _Promise(function (resolve, reject) {\n            DataSource.shared.downloadFile(obj_SelectedItem.GalID).then(function (result) {\n              var file = result.Table[0];\n              var a = document.createElement(\"a\");\n\n              var contentType = _this2.getContentType(file);\n\n              var b64Data = file.GalFile;\n\n              var blob = _this2.b64toBlob(b64Data, contentType);\n\n              a.href = URL.createObjectURL(blob);\n              a.download = (file.GalFileName + file.GalFileExt).toString();\n              a.style.display = \"none\";\n              document.body.appendChild(a);\n              a.click();\n              a.remove();\n              resolve(result);\n            });\n          });\n          arr_Promises.push(downloadPromise);\n        };\n\n        for (var _iterator = _getIterator(this.arrobj_SelectedItem), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _Promise.all(arr_Promises).then(function (result) {\n        _this2.hideLoading();\n      });\n    },\n    getContentType: function getContentType(e) {\n      var contentType = \"\";\n\n      switch (e.GalFileExt.toUpperCase()) {\n        case \".PDF\":\n          contentType += \"application/octet-stream\";\n          break;\n\n        default:\n          contentType += e.GalFileType;\n          break;\n      }\n\n      return contentType;\n    },\n    b64toBlob: function b64toBlob(b64Data, contentType, sliceSize) {\n      //Credit to Jeremy Banks @ stackoverflow\n      contentType = contentType || '';\n      sliceSize = sliceSize || 512;\n      var byteCharacters = atob(b64Data);\n      var byteArrays = [];\n\n      for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        var slice = byteCharacters.slice(offset, offset + sliceSize);\n        var byteNumbers = new Array(slice.length);\n\n        for (var i = 0; i < slice.length; i++) {\n          byteNumbers[i] = slice.charCodeAt(i);\n        }\n\n        var byteArray = new Uint8Array(byteNumbers);\n        byteArrays.push(byteArray);\n      }\n\n      return new Blob(byteArrays, {\n        type: contentType\n      });\n    },\n\n    /*#endregion*/\n    initPost: function initPost() {\n      var _this3 = this;\n\n      /*this.resetPost();*/\n      // let tempobj = !this.isNull(this.post.PostID) ? this.post : this.parentPost;\n      this.post = this.parentPost;\n      var promise_GetPostFile = DataSource.shared.getPostFile(this.post.PostID);\n      var promise_GetPostReaction = DataSource.shared.getPostReaction(this.post.PostID);\n\n      _Promise.all([promise_GetPostFile, promise_GetPostReaction]).then(function (result) {\n        _this3.$set(_this3.post, \"postFiles\", result[0].Table);\n\n        _this3.$set(_this3.post, \"collapsed\", true);\n\n        _this3.$set(_this3.post, \"postReaction\", result[1].Table);\n\n        _this3.getComment();\n\n        var countImageFile = _this3.post && _this3.post.postFiles && _this3.post.postFiles.length;\n\n        _this3.$set(_this3.post, \"countImageFile\", countImageFile);\n\n        _this3.remainingImage = _this3.post.countImageFile - 4;\n      });\n\n      setInterval(function () {\n        _this3.getComment();\n      }, 3000);\n    },\n    initCommentInterval: function initCommentInterval() {\n      /* setInterval(() => {\n           this.getComment;\n       },\n          3000);*/\n\n      /*  setTimeout(\n            this.getComment\n            , 3000);*/\n\n      /* if (!this.isNull(comments.Table)) {\n           for (let i = 0; i < comments.Table.length; i++)\n               setInterval(() => {\n                   DataSource.shared.getPostReaction(comments.Table[i].PoCmID).then((commentReactions) => {\n                       this.$set(this.post.commentItems[i], \"commentReactions\", commentReactions.Table);\n                   });\n               }, 5000);\n       }*/\n\n      /*this.$set(this.post, \"commentPostID\", this.post.PostID);\n      this.$set(this.post, \"commentItems\", result[1].Table);*/\n\n      /*for(let comment of this.post.commentItems){\n      }*/\n    },\n    getComment: function getComment() {\n      var _this4 = this;\n\n      DataSource.shared.getComment(this.post.PostID).then(function (comments) {\n        _this4.$set(_this4.post, \"commentItems\", comments.Table);\n\n        if (!_this4.isNull(_this4.post.commentItems)) {\n          /*for (let i = 0; i < this.post.commentItems.length; i++) {\n              DataSource.shared.getPostReaction(comments.Table[i].PoCmID).then((commentReactions) => {\n                  this.$set(this.post.commentItems[i], \"commentReactions\", commentReactions.Table);\n              });\n          }*/\n          _this4.commentCount = _this4.post.commentItems.length;\n        } else {\n          _this4.commentCount = \"0\";\n        }\n      });\n    },\n    isNull: function isNull(obj) {\n      return obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\";\n    },\n    isImageByExt: function isImageByExt(obj_File) {\n      var ext = String(obj_File.PostItemFileExt).toUpperCase();\n      var isImage = false;\n\n      switch (ext) {\n        case \".PNG\":\n        case \".JPG\":\n        case \".BMP\":\n        case \".GIF\":\n          isImage = true;\n          break;\n\n        default:\n          isImage = false;\n          break;\n      }\n\n      return isImage;\n    },\n    getLowSource: function getLowSource(file) {\n      return \"data:image/jpg;base64, \".concat(file.PostItemFileLow);\n    },\n    getMediumSource: function getMediumSource(file) {\n      var SourceisImage = this.isImageByExt(file);\n\n      if (SourceisImage === true) {\n        return \"data:image/jpg;base64, \".concat(file.PostItemFileMedium);\n      } else {\n        return \"data:application/pdf;base64, \".concat(file.PostItemFile);\n      }\n    },\n    getFile: function getFile(file) {\n      return \"data:\".concat(file.PostItemFileType, \";base64,\").concat(file.PostItemFile);\n    },\n    submitComment: function submitComment(commentPostID) {\n      this.$emit('commentitemSubmit', commentPostID, this.commentPostContent);\n      this.commentPostContent = \"\";\n    },\n    saveClick: function saveClick(PoCmID, PoCmContent) {\n      this.readonly = true;\n      this.showEdit = true;\n      this.checkidcomment = null;\n      this.$emit(\"commentEdit\", PoCmID, PoCmContent);\n    },\n    showDeleteModal: function showDeleteModal(deleteCmId, deleteCmContent, deleteCmPostId) {\n      this.deleteModalShow = true;\n      this.deleteCmId = deleteCmId;\n      this.deleteCmContent = deleteCmContent;\n      this.deleteCmPostId = deleteCmPostId;\n    },\n    closeDeleteModal: function closeDeleteModal() {\n      this.deleteModalShow = false;\n    },\n    editClick: function editClick(PoCmID) {\n      this.showEdit = false;\n      this.readonly = false;\n      this.checkidcomment = PoCmID;\n    },\n    deleteComment: function deleteComment() {\n      this.$emit(\"commentDelete\", this.deleteCmId, this.deleteCmContent, this.deleteCmPostId);\n      this.closeDeleteModal();\n    },\n    removePost: function removePost() {\n      this.$refs.modal_DeletePost.show();\n    },\n    deletePost: function deletePost(post) {\n      DataSource.shared.softDeletePost(post.PostID).then(function (result) {});\n      this.$emit(\"loadPosts\");\n    },\n    editPost: function editPost(post) {\n      var _this5 = this;\n\n      DataSource.shared.getPostAllTaggingStudentsByPostID(post.PostID).then(function (result) {\n        _this5.post.arrobj_SelectedStudents = result.Table;\n\n        switch (_this5.post.PostType.toUpperCase()) {\n          case \"PORTFOLIO\":\n            _this5.obj_SelectedComponent = portfolio;\n            break;\n\n          case \"UPDATE\":\n            _this5.obj_SelectedComponent = updates;\n            break;\n        }\n\n        _this5.showEditModal();\n      });\n    },\n    showEditModal: function showEditModal() {\n      this.$refs.modal_EditComponent.show();\n    },\n    hideEditModal: function hideEditModal() {\n      this.obj_SelectedComponent = false;\n      this.$refs.modal_EditComponent.hide();\n    },\n    displayResult: function displayResult(value) {\n      if (value == \"TRUE\") this.result = \"Successfully posted\";else this.result = \"Something went wrong. Please inform the adminstrator\";\n      this.hideEditModal();\n    }\n  }\n};",{"version":3,"sources":["postCompnent.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"container-fluid row\" v-if=\"result\">\r\n            {{result}}\r\n        </div>\r\n        <div class=\"feed-box\" v-bind:class=\"[post.PostID]\" v-if=\"!isHome\">\r\n\r\n            <div class=\"author\">\r\n                <div class=\"profile\">\r\n                    <!--<img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"-->\r\n                         <!--:src=\"getProfileSource(post.ProfileImage)\"-->\r\n                         <!--:alt=\"post.PostPorDtlTitle\"/>-->\r\n                    <img src=\"../assets/boy.png\" v-if=\"post.ProfileImage === ''\">\r\n                    <img :src=\"`data:image/jpg;base64, ${post.ProfileImage}`\"\r\n                         v-if=\"post.ProfileImage\"/>\r\n                </div>\r\n                <div class=\"feed-heading\">\r\n                    <span>{{post.CONname}}</span>\r\n                    <small class=\"date\"><i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\r\n                        {{post.PostCreatedDate}}\r\n                    </small>\r\n                </div>\r\n                <el-popover\r\n                        placement=\"bottom\"\r\n                        width=\"100\"\r\n                        trigger=\"click\"\r\n                        class=\"feed-box__dropdown\"\r\n                        v-if=\"approverPostNotShow\">\r\n                    <button @click=\"editPost(post)\" class=\"btn btn-link\">Edit Post</button>\r\n                    <button @click=\"removePost(post)\" class=\"btn btn-link\">Delete Post</button>\r\n                    <el-button slot=\"reference\"><i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i></el-button>\r\n                </el-popover>\r\n                <!--<b-dropdown right v-if=\"!hideSubmenu\">-->\r\n                <!--<template slot=\"button-content\">-->\r\n                <!--<i class=\"fa fa-ellipsis-h\" aria-hidden=\"true\"></i>-->\r\n                <!--</template>-->\r\n                <!--<b-dropdown-item @click=\"editPost(post)\">Edit Post</b-dropdown-item>-->\r\n                <!--<b-dropdown-item @click=\"removePost(post)\">Delete Post</b-dropdown-item>-->\r\n                <!--</b-dropdown>-->\r\n            </div>\r\n\r\n            <div class=\"content\">\r\n                <p>\r\n                    <!--<strong class=\"feed-subtitle\"> ADD A NOTE</strong>-->\r\n                    <span style=\"white-space: pre-line;\">{{post.PostContent}}</span>\r\n                </p>\r\n            </div>\r\n            <div class=\"image-wrapper\" v-if=\"!isNull(post.postFiles)\">\r\n                <ul v-if=\"!isMobile()\">\r\n                    <li class=\"postFile__item\" v-for=\"(obj_Images, index) in post.postFiles\" :key=\"obj_Images.id\"\r\n                        :class=\"{'isFile':isImageByExt(obj_Images)===false}\" v-if=\"index < 5\">\r\n                        <img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"\r\n                             :src=\"getMediumSource(obj_Images)\"\r\n                             v-if=\"isImageByExt(obj_Images)\"\r\n                             :alt=\"post.PostPorDtlTitle\"/>\r\n                        <div v-else>\r\n                            <a :href=\"getFile(obj_Images)\"\r\n                               :download=\"`${obj_Images.PostItemID}${obj_Images.PostItemFileExt}`\" class=\"filepath\">\r\n                                {{obj_Images.PostItemID}}{{obj_Images.PostItemFileExt}}\r\n                            </a>\r\n                            <!--<span class=\"filepath\" @click=\"getFile(obj_Images)\">{{obj_Images.PostItemID}}{{obj_Images.PostItemFileExt}}</span>-->\r\n                        </div>\r\n\r\n                        <button v-if=\"index === 4 \" class=\"postFile-remainingNumber\" @click=\"showImageModal\">\r\n                            + {{remainingImage}}\r\n                        </button>\r\n                        <!--<img :src=\"getLowSource(obj_Images)\"-->\r\n                        <!--:class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"-->\r\n                        <!--/>-->\r\n\r\n                        <!--<img :src=\"postFile.PostItemPath\"-->\r\n                        <!--:class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"-->\r\n                        <!--v-else-if=\"!checkIfImage(postFile.PostItemPath)\"/>-->\r\n                    </li>\r\n                </ul>\r\n                <b-carousel id=\"carousel1\"\r\n                            style=\"text-shadow: 1px 1px 2px #333;\"\r\n                            :controls=\"post.postFiles.length > 1\"\r\n                            indicators\r\n                            background=\"#fff\"\r\n                            :interval=\"0\"\r\n                            v-if=\"isMobile()\">\r\n                    <div>\r\n                        <b-carousel-slide v-for=\"obj_Images of post.postFiles\" :key=\"obj_Images.id\">\r\n                            <img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"\r\n                                 :src=\"getMediumSource(obj_Images)\"\r\n                                 v-if=\"isImageByExt(obj_Images)\"\r\n                                 :alt=\"post.PostPorDtlTitle\"/>\r\n                        </b-carousel-slide>\r\n                    </div>\r\n                </b-carousel>\r\n            </div>\r\n            <div class=\"postFile\" v-if=\"!isNull(post.postFiles)\">\r\n                <div class=\"postFile__item\" v-for=\"postFile in post.postFiles\" :key=\"postFile.ID\">\r\n                    <!--<img :src=\"postFile.PostItemPath\" :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"/>-->\r\n\r\n                    <a v-if=\"!postFile.PostItemFileLow && !checkIfImage(postFile.PostItemPath)\"\r\n                       v-bind:href=\"[postFile.PostItemPath]\"\r\n                       :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\">\r\n                        <i class=\"fa fa-file\" aria-hidden=\"true\"></i>\r\n                        {{postFile.PostItemPostID}}\r\n                    </a>\r\n                    <!--{{postFile.PostItemCreatedDate}}-->\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n            <div class=\"feed-iconBox\" v-if=\"approverPostNotShow\">\r\n                <el-button @click=\"showCommentTransition(post.PostID)\" class=\"float-left ml-2 post-icon-btn\"><i\r\n                        class=\"material-icons\">\r\n                    chat_bubble_outline\r\n                </i>\r\n                    {{commentCount}}\r\n                </el-button>\r\n\r\n                <el-popover\r\n                        placement=\"top-start\"\r\n                        width=\"250\"\r\n                        trigger=\"click\"\r\n                        class=\"float-left ml-2 post-icon-btn\"\r\n                >\r\n                    <table class=\"table reaction-table\">\r\n                        <tr>\r\n                            <td :class=\"{checked: getPostReactionCount('LIKE') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('LIKE')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"LIKE\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('LIKE')}}</div>\r\n                                        <img src=\"../assets/like.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                </label>\r\n                            </td>\r\n                            <td :class=\"{checked: getPostReactionCount('LOVE') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('LOVE')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"LOVE\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('LOVE')}}</div>\r\n                                        <img src=\"../assets/love.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                </label>\r\n                            </td>\r\n                            <td :class=\"{checked: getPostReactionCount('WOW') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('WOW')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"WOW\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('WOW')}}</div>\r\n                                        <img src=\"../assets/oo.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                </label>\r\n                            </td>\r\n                            <td :class=\"{checked: getPostReactionCount('HAHA') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('HAHA')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"HAHA\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('HAHA')}}</div>\r\n                                        <img src=\"../assets/funny.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                </label>\r\n                            </td>\r\n                            <td :class=\"{checked: getPostReactionCount('SAD') > 0}\">\r\n                                <label>\r\n                                    <input type=\"checkbox\"\r\n                                           :checked=\"getUserSelectedReaction('SAD')\"\r\n                                           @change=\"togglePostReaction\"\r\n                                           value=\"SAD\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getPostReactionCount('SAD')}}</div>\r\n                                        <img src=\"../assets/sad.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n\r\n                                </label>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                    <el-button slot=\"reference\"\r\n                               :class=\"{checked: getPostReactionCount('LIKE') > 0 || getPostReactionCount('LOVE') > 0 || getPostReactionCount('WOW') > 0 || getPostReactionCount('HAHA') > 0 || getPostReactionCount('SAD') > 0}\">\r\n                        <i class=\"material-icons\">favorite_border</i>\r\n                        <i class=\"material-icons show-if-check\">favorite</i>\r\n                    </el-button>\r\n                </el-popover>\r\n            </div>\r\n\r\n            <!--<div slot=\"footer\">-->\r\n            <!--<vs-row vs-justify=\"flex-end\">-->\r\n            <!--<vs-button color=\"primary\" type=\"gradient\" >View</vs-button>-->\r\n            <!--<vs-button color=\"danger\" type=\"gradient\">Delete</vs-button>-->\r\n            <!--</vs-row>-->\r\n            <!--</div>-->\r\n        </div>\r\n\r\n        <ul class=\"feed-box\" v-bind:class=\"[post.PostID]\" v-if=\"isHome\">\r\n            <li>\r\n                <div class=\"image-wrapper\">\r\n                    <ul>\r\n                        <li class=\"\" v-for=\"postFile in post.postFiles\" :key=\"postFile.ID\">\r\n                            <img :src=\"`data:image/jpg;base64, ${postFile.PostItemFile}`\"\r\n                                 :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"\r\n                                 v-if=\"postFile.PostItemFile\"/>\r\n                            <img :src=\"postFile.PostItemPath\"\r\n                                 :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"\r\n                                 v-else-if=\"checkIfImage(postFile.PostItemPath)\"/>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <span>\r\n                        <strong>{{post.CONname}}</strong>\r\n                        <small class=\"date\"><i class=\"fa fa-clock-o\"\r\n                                               aria-hidden=\"true\"></i> {{post.PostCreatedDate}}</small>\r\n                        {{post.PostContent}}\r\n                    </span>\r\n            </li>\r\n        </ul>\r\n        <el-collapse-transition>\r\n            <div v-if=\"show3 === post.PostID \">\r\n                <div class=\"comment_wrapper transition-box\" v-if=\"!hideComment\">\r\n                    <form class=\"form-style\">\r\n                        <input type=\"text\" class=\"form-control d-none\" id=\"commentPostID\" v-model=\"commentPostID\">\r\n                        <vs-input label-placeholder=\"Write a comment\" v-model=\"commentPostContent\"\r\n                                  class=\"addComment\"/>\r\n                        <div class=\"btn btn-primary\" @click=\"submitComment(post.PostID)\"><i\r\n                                class=\"fa fa-paper-plane\"\r\n                                aria-hidden=\"true\"></i></div>\r\n                    </form>\r\n\r\n                    <div class=\"commentWrap\" v-if=\"post.commentItems\"\r\n                         :class=\"{'is-collapsed' : post.collapsed }\">\r\n                        <div class=\"comment__item\" v-for=\"commentItem of post.commentItems\"\r\n                             :key=\"commentItem.PoCmID\">\r\n                            <div class=\"commentItem__header\">\r\n                                <div class=\"comment__name\">{{commentItem.CONname}}</div>\r\n                                <div class=\"comment__date\">{{commentItem.PoCmCreatedDate}}</div>\r\n                            </div>\r\n\r\n                            <div class=\"commentPostContent_show\" v-if=\"checkidcomment !== commentItem.PoCmID\">\r\n                                {{commentItem.PoCmContent}}\r\n                            </div>\r\n                            <textarea v-if=\"readonly === false && checkidcomment === commentItem.PoCmID\" type=\"text\"\r\n                                      class=\"comment__content\" id=\"commentPostContent\"\r\n                                      v-model=\"commentItem.PoCmContent\" v-bind:readonly=\"readonly\"\r\n                                      :class=\"{'editable' : readonly === false && checkidcomment === commentItem.PoCmID }\"></textarea>\r\n                            <!--{{checkidcomment}} ==== {{commentItem.PoCmID}} === {{readonly}}<br/>-->\r\n\r\n                            <!--<span class=\"edit\" @click=\"editClick(commentItem.PoCmID)\" v-if=\"showEdit\">-->\r\n                            <!--Edit .-->\r\n                            <!--</span>-->\r\n                            <el-button class=\"save\" type=\"text\" slot=\"reference\"\r\n                                       @click=\"saveClick(commentItem.PoCmID, commentItem.PoCmContent)\"\r\n                                       :class=\"{'d-none' : readonly === true || checkidcomment !== commentItem.PoCmID}\">\r\n                                Save\r\n                            </el-button>\r\n                            <el-button class=\"edit\" type=\"text\" slot=\"reference\" @click=\"editClick(commentItem.PoCmID)\"\r\n                                       v-if=\"showEdit\">\r\n                                Edit\r\n                            </el-button>\r\n                            .\r\n\r\n                            <!--<span class=\"save\" @click=\"saveClick(commentItem.PoCmID, commentItem.PoCmContent)\"-->\r\n                            <!--:class=\"{'d-none' : readonly === true || checkidcomment !== commentItem.PoCmID}\">Save . </span>-->\r\n                            <!--<span class=\"delete\"-->\r\n                            <!--@click=\"deleteComment(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">Delete</span>-->\r\n                            <!--<span class=\"delete\"-->\r\n                            <!--@click=\"showDeleteModal(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">-->\r\n                            <!--Delete .-->\r\n                            <!---->\r\n                            <!--</span>-->\r\n                            <el-button class=\"delete\" type=\"text\" slot=\"reference\"\r\n                                       @click=\"showDeleteModal(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">\r\n                                Delete\r\n                            </el-button>\r\n                            .\r\n                            <span class=\"like\">\r\n                        <el-popover\r\n                                placement=\"right\"\r\n                                width=\"250\"\r\n                                trigger=\"click\"\r\n                                popper-class=\"like-popover\">\r\n                            <table class=\"table reaction-table\">\r\n                                <tr>\r\n                                    <td :class=\"{checked: getCommentReactionCount('LIKE', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('LIKE', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"LIKE\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('LIKE', commentItem)}}</div>\r\n                                        <img src=\"../assets/like.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                        </label></td>\r\n                                    <td :class=\"{checked: getCommentReactionCount('LOVE', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('LOVE', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"LOVE\">\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('LOVE', commentItem)}}</div>\r\n                                        <img src=\"../assets/love.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                    </label></td>\r\n                                    <td :class=\"{checked: getCommentReactionCount('WOW', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('WOW', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"WOW\">\r\n\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('WOW', commentItem)}}</div>\r\n                                        <img src=\"../assets/oo.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                        </label></td>\r\n                                    <td :class=\"{checked: getCommentReactionCount('HAHA', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('HAHA', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"HAHA\">\r\n\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('HAHA', commentItem)}}</div>\r\n                                        <img src=\"../assets/funny.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                        </label></td>\r\n                                    <td :class=\"{checked: getCommentReactionCount('SAD', commentItem) > 0}\"><label><input\r\n                                            type=\"checkbox\"\r\n                                            :checked=\"getUserSelectedCommentReaction('SAD', commentItem)\"\r\n                                            @change=\"toggleCommentReaction($event, commentItem)\"\r\n                                            value=\"SAD\">\r\n\r\n                                    <el-tooltip placement=\"top\">\r\n                                        <div slot=\"content\">{{getCommentReactionCount('SAD', commentItem)}}</div>\r\n                                        <img src=\"../assets/sad.gif\" width=\"30px\"/>\r\n                                    </el-tooltip>\r\n                                        </label></td>\r\n                                </tr>\r\n                            </table>\r\n                            <el-button type=\"text\" slot=\"reference\">\r\n                                Like\r\n                            </el-button>\r\n                        </el-popover>\r\n                    </span>\r\n                            <AlertComponent :showModal=\"deleteModalShow\" @cancelClick=\"closeDeleteModal\"\r\n                                            @okClick=\"deleteComment\"/>\r\n                        </div>\r\n                        <button v-on:click=\" post.collapsed = !post.collapsed \"\r\n                                :class=\"{'d-none' : !post.collapsed }\" v-if=\"post.commentItems&&post.commentItems.length !== 2\">\r\n                            More Comment\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </el-collapse-transition>\r\n        <b-modal class=\"alert-modal\" title=\"ARE YOU SURE?\" ref=\"modal_DeletePost\" @ok=\"deletePost(post)\">\r\n            Once you delete a post, you can't undo it.\r\n        </b-modal>\r\n        <b-modal id=\"modal_EditComponent\" ref=\"modal_EditComponent\" size=\"lg\" hide-footer title=\"Edit Post\"\r\n                 @hidden=\"hideEditModal\">\r\n            <component @result=\"displayResult\" :is=\"obj_SelectedComponent\" :post=\"post\"></component>\r\n        </b-modal>\r\n        <b-modal id=\"imageModal\" ref=\"imageModal\" hide-footer hide-header>\r\n            <b-carousel id=\"modal_carousel\"\r\n                        style=\"text-shadow: 1px 1px 2px #333;\"\r\n                        :controls=\"post.postFiles&&post.postFiles.length > 1\"\r\n                        indicators\r\n                        background=\"#fff\"\r\n                        :interval=\"0\">\r\n                <div>\r\n                    <b-carousel-slide v-for=\"obj_Images of post.postFiles\" :key=\"obj_Images.id\">\r\n                        <img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"\r\n                             :src=\"getMediumSource(obj_Images)\"\r\n                             v-if=\"isImageByExt(obj_Images)\"\r\n                             :alt=\"post.PostPorDtlTitle\"/>\r\n                    </b-carousel-slide>\r\n                </div>\r\n            </b-carousel>\r\n        </b-modal>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import isImage from \"is-image\";\r\n    import DataSource from \"../data/datasource\";\r\n    import AlertComponent from \"./alertComponent\";\r\n    import portfolio from \"../components/Post_Portfolio_Component\";\r\n    import updates from \"../components/Post_Updates_Component.vue\";\r\n    import Cookies from \"js-cookie\";\r\n    import $ from \"jquery\";\r\n\r\n    export default {\r\n        name: 'postComponent',\r\n        components: {AlertComponent, updates, portfolio},\r\n        data() {\r\n            return {\r\n                reactionCount2: \"\",\r\n                commentCount: \"\",\r\n                show3: false,\r\n                commentPostContent: \"\",\r\n                readonly: \"\",\r\n                checkidcomment: null,\r\n                systemmsgError: null,\r\n                commentPostID: '',\r\n                deleteModalShow: false,\r\n                showEdit: true,\r\n                deleteCmId: null,\r\n                deleteCmContent: null,\r\n                deleteCmPostId: null,\r\n                deletePostModalShow: false,\r\n                obj_SelectedComponent: false,\r\n                result: \"\",\r\n                post: [{\r\n                    CONname: \"\",\r\n                    PostContent: \"\",\r\n                    PostCreatedBy: \"\",\r\n                    PostCreatedDate: \"\",\r\n                    PostID: \"\",\r\n                    PostType: \"\",\r\n                    PostUpdDtlDescription: \"\",\r\n                    ProfileImage: \"\",\r\n                    RowNumber: \"\",\r\n                    collapsed: true,\r\n                    commentItems: [],\r\n                    commentPostID: \"\",\r\n                    postFiles: \"\",\r\n                    postReaction: [],\r\n                    countImageFile: \"\"\r\n                }],\r\n                str_TimerID: \"\",\r\n                likeCount: 0,\r\n                isFile: false,\r\n                approverPostNotShow: true,\r\n                remainingImage: \"\",\r\n            };\r\n        },\r\n        mounted() {\r\n            if (!this.isNull(this.approverPost) && this.approverPost === 'YES') {\r\n                this.approverPostNotShow = false;\r\n            }\r\n            if (!this.isNull(this.parentPost)) {\r\n                this.initPost();\r\n            }\r\n        },\r\n        props: [\"parentPost\", \"commentitemSubmit\", \"hideComment\", \"isHome\", \"hideSubmenu\", \"loadPost\", \"approverPost\"],\r\n        methods: {\r\n            showImageModal(){\r\n                this.$refs['imageModal'].show()\r\n            },\r\n            hideImageModal(){\r\n                this.$refs['imageModal'].hide()\r\n            },\r\n            checkIfImage(file) {\r\n                return isImage(file);\r\n            },\r\n            isMobile() {\r\n                if (screen.width <= 760) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            },\r\n            showCommentTransition(CommentBtnPostID) {\r\n                this.show3 = CommentBtnPostID;\r\n            },\r\n            getUserSelectedCommentReaction(str_Reaction, commentItem) {\r\n                let isExist = !this.isNull(commentItem.commentReactions) ? commentItem.commentReactions.filter(x => x.PoReaCreatedBy === Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction) : false;\r\n                return isExist;\r\n            },\r\n\r\n            getCommentReactionCount(str_Reaction, commentItem) {\r\n                // setInterval(() => {\r\n                //     DataSource.shared.getPostReaction(commentItem.PoCmID).then((result) => {\r\n                //         this.$set(this.post.commentItems, \"commentReaction\", result.Table)\r\n                //     });\r\n                // }, 2000);\r\n\r\n\r\n                let int_ReactionCount = !this.isNull(commentItem.commentReactions) ? commentItem.commentReactions.filter(x => x.PoReaType.toUpperCase() === str_Reaction).length : 0;\r\n                return int_ReactionCount;\r\n                /*\r\n                let int_ReactionCount = !this.isNull(commentItem.commentReaction) ? commentItem.commentReaction.filter(x => x.PoReaType.toUpperCase() === str_Reaction).length : 0;\r\n\r\n                return int_ReactionCount*/\r\n            },\r\n\r\n            toggleCommentReaction(e, commentItem) {\r\n                let reaction = $(e.target).val();\r\n                let isChecked = $(e.target).prop(\"checked\");\r\n\r\n                $(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\r\n\r\n                DataSource.shared.updatePostReaction(commentItem.PoCmID, \"DELETE\")\r\n                    .then(() => {\r\n                        $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\r\n\r\n                        if (isChecked) {\r\n                            $(e.target).closest(\"td\").addClass(\"checked\");\r\n                            return DataSource.shared.savePostReaction(commentItem.PoCmID, reaction, \"POST\");\r\n                        }\r\n                    });\r\n\r\n                /*$(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\r\n                DataSource.shared.updatePostReaction(commentItem.PoCmID, \"DELETE\")\r\n                    .then(() => {\r\n                        $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\r\n\r\n                        if (isChecked) {\r\n                            $(e.target).closest(\"td\").addClass(\"checked\");\r\n                            DataSource.shared.savePostReaction(commentItem.PoCmID, reaction, \"COMMENT\");\r\n                        }\r\n                    });*/\r\n            }\r\n            ,\r\n\r\n            getUserSelectedReaction(str_Reaction) {\r\n                let isExist = !this.isNull(this.post.postReaction) ? this.post.postReaction.filter(x => Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction).length : 0;\r\n                return isExist;\r\n            },\r\n\r\n            getPostReactionCount(str_Reaction) {\r\n                let isExist = !this.isNull(this.post.postReaction) ? this.post.postReaction.filter(x => x.PoReaCreatedBy === Cookies.get(\"userIDSession\") && x.PoReaType.toUpperCase() === str_Reaction).length : 0;\r\n                return isExist;\r\n                let reactionCount = this.post.postReaction.length;\r\n            }\r\n            ,\r\n\r\n            togglePostReaction(e) {\r\n                let reaction = $(e.target).val();\r\n                let isChecked = $(e.target).prop(\"checked\");\r\n                $(e.target).closest(\"td\").siblings(\"td\").find(\"input[type='checkbox']\").prop(\"checked\", false);\r\n\r\n                DataSource.shared.updatePostReaction(this.post.PostID, \"DELETE\")\r\n                    .then(() => {\r\n                        $(e.target).closest(\"tr\").find(\"td\").removeClass(\"checked\");\r\n\r\n                        if (isChecked) {\r\n                            $(e.target).closest(\"td\").addClass(\"checked\");\r\n                            return DataSource.shared.savePostReaction(this.post.PostID, reaction, \"POST\");\r\n                        }\r\n                    })\r\n                    .then(() => {\r\n                        DataSource.shared.getPostReaction(this.post.PostID).then((result) => {\r\n                            this.$set(this.post, \"postReaction\", result.Table);\r\n                        });\r\n                    });\r\n            }\r\n            ,\r\n\r\n            /*#region Download Item Functions*/\r\n            downloadItem() {\r\n                let arr_Promises = [];\r\n                this.showLoading();\r\n\r\n                for (let obj_SelectedItem of this.arrobj_SelectedItem) {\r\n                    let downloadPromise = new Promise((resolve, reject) => {\r\n                        DataSource.shared.downloadFile(obj_SelectedItem.GalID).then((result) => {\r\n                            let file = (result.Table)[0];\r\n                            let a = document.createElement(\"a\");\r\n                            let contentType = this.getContentType(file);\r\n                            let b64Data = file.GalFile;\r\n                            let blob = this.b64toBlob(b64Data, contentType);\r\n\r\n                            a.href = URL.createObjectURL(blob);\r\n                            a.download = (file.GalFileName + file.GalFileExt).toString();\r\n                            a.style.display = \"none\";\r\n                            document.body.appendChild(a);\r\n                            a.click();\r\n                            a.remove();\r\n                            resolve(result);\r\n                        });\r\n                    });\r\n\r\n                    arr_Promises.push(downloadPromise);\r\n                }\r\n\r\n                Promise.all(arr_Promises).then((result) => {\r\n                    this.hideLoading();\r\n                });\r\n            }\r\n            ,\r\n            getContentType(e) {\r\n                let contentType = \"\";\r\n\r\n                switch (e.GalFileExt.toUpperCase()) {\r\n                    case \".PDF\":\r\n                        contentType += \"application/octet-stream\";\r\n                        break;\r\n                    default:\r\n                        contentType += e.GalFileType;\r\n                        break;\r\n                }\r\n\r\n                return contentType;\r\n            }\r\n            ,\r\n            b64toBlob(b64Data, contentType, sliceSize) {\r\n                //Credit to Jeremy Banks @ stackoverflow\r\n                contentType = contentType || '';\r\n                sliceSize = sliceSize || 512;\r\n\r\n                let byteCharacters = atob(b64Data);\r\n                let byteArrays = [];\r\n\r\n                for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n                    let slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n                    let byteNumbers = new Array(slice.length);\r\n                    for (let i = 0; i < slice.length; i++) {\r\n                        byteNumbers[i] = slice.charCodeAt(i);\r\n                    }\r\n\r\n                    let byteArray = new Uint8Array(byteNumbers);\r\n\r\n                    byteArrays.push(byteArray);\r\n                }\r\n\r\n                return new Blob(byteArrays, {type: contentType});\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n            initPost() {\r\n                /*this.resetPost();*/\r\n                // let tempobj = !this.isNull(this.post.PostID) ? this.post : this.parentPost;\r\n                this.post = this.parentPost;\r\n                let promise_GetPostFile = DataSource.shared.getPostFile(this.post.PostID);\r\n                let promise_GetPostReaction = DataSource.shared.getPostReaction(this.post.PostID);\r\n\r\n                Promise.all([promise_GetPostFile, promise_GetPostReaction])\r\n                    .then((result) => {\r\n                        this.$set(this.post, \"postFiles\", result[0].Table);\r\n                        this.$set(this.post, \"collapsed\", true);\r\n                        this.$set(this.post, \"postReaction\", result[1].Table);\r\n                        this.getComment();\r\n                        const countImageFile = this.post && this.post.postFiles && this.post.postFiles.length;\r\n                        this.$set(this.post, \"countImageFile\", countImageFile);\r\n\r\n                        this.remainingImage = this.post.countImageFile - 4;\r\n                    });\r\n                setInterval(() => {\r\n                    this.getComment();\r\n                    }, 3000);\r\n            },\r\n\r\n            initCommentInterval() {\r\n                /* setInterval(() => {\r\n                     this.getComment;\r\n                 },\r\n                    3000);*/\r\n\r\n                /*  setTimeout(\r\n                      this.getComment\r\n                      , 3000);*/\r\n                /* if (!this.isNull(comments.Table)) {\r\n                     for (let i = 0; i < comments.Table.length; i++)\r\n                         setInterval(() => {\r\n                             DataSource.shared.getPostReaction(comments.Table[i].PoCmID).then((commentReactions) => {\r\n                                 this.$set(this.post.commentItems[i], \"commentReactions\", commentReactions.Table);\r\n                             });\r\n                         }, 5000);\r\n                 }*/\r\n\r\n                /*this.$set(this.post, \"commentPostID\", this.post.PostID);\r\n                this.$set(this.post, \"commentItems\", result[1].Table);*/\r\n\r\n                /*for(let comment of this.post.commentItems){\r\n                }*/\r\n            },\r\n            getComment() {\r\n\r\n                    DataSource.shared.getComment(this.post.PostID).then((comments) => {\r\n                        this.$set(this.post, \"commentItems\", comments.Table);\r\n\r\n                        if (!this.isNull(this.post.commentItems)) {\r\n                            /*for (let i = 0; i < this.post.commentItems.length; i++) {\r\n                                DataSource.shared.getPostReaction(comments.Table[i].PoCmID).then((commentReactions) => {\r\n                                    this.$set(this.post.commentItems[i], \"commentReactions\", commentReactions.Table);\r\n                                });\r\n                            }*/\r\n\r\n                            this.commentCount = this.post.commentItems.length;\r\n                        } else {\r\n                            this.commentCount = \"0\";\r\n                        }\r\n                    });\r\n\r\n            },\r\n\r\n            isNull(obj) {\r\n                return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\r\n            },\r\n            isImageByExt(obj_File) {\r\n                let ext = String(obj_File.PostItemFileExt).toUpperCase();\r\n                let isImage = false;\r\n\r\n                switch (ext) {\r\n                    case \".PNG\":\r\n                    case \".JPG\":\r\n                    case \".BMP\":\r\n                    case \".GIF\":\r\n                        isImage = true;\r\n                        break;\r\n                    default:\r\n                        isImage = false;\r\n                        break;\r\n                }\r\n\r\n                return isImage;\r\n            },\r\n            getLowSource(file) {\r\n                return `data:image/jpg;base64, ${file.PostItemFileLow}`;\r\n            },\r\n            getMediumSource(file) {\r\n                let SourceisImage = this.isImageByExt(file);\r\n                if (SourceisImage === true) {\r\n                    return `data:image/jpg;base64, ${file.PostItemFileMedium}`;\r\n                } else{\r\n                    return `data:application/pdf;base64, ${file.PostItemFile}`;\r\n                }\r\n            },\r\n            getFile(file) {\r\n                return `data:${file.PostItemFileType};base64,${file.PostItemFile}`;\r\n            },\r\n            submitComment(commentPostID) {\r\n                this.$emit('commentitemSubmit', commentPostID, this.commentPostContent);\r\n                this.commentPostContent = \"\";\r\n            },\r\n            saveClick(PoCmID, PoCmContent) {\r\n                this.readonly = true;\r\n                this.showEdit = true;\r\n                this.checkidcomment = null;\r\n                this.$emit(\"commentEdit\", PoCmID, PoCmContent);\r\n            },\r\n            showDeleteModal(deleteCmId, deleteCmContent, deleteCmPostId) {\r\n                this.deleteModalShow = true;\r\n                this.deleteCmId = deleteCmId;\r\n                this.deleteCmContent = deleteCmContent;\r\n                this.deleteCmPostId = deleteCmPostId;\r\n            },\r\n            closeDeleteModal() {\r\n                this.deleteModalShow = false;\r\n            },\r\n            editClick(PoCmID) {\r\n                this.showEdit = false;\r\n                this.readonly = false;\r\n                this.checkidcomment = PoCmID;\r\n            },\r\n            deleteComment() {\r\n                this.$emit(\"commentDelete\", this.deleteCmId, this.deleteCmContent, this.deleteCmPostId);\r\n                this.closeDeleteModal();\r\n            },\r\n            removePost() {\r\n                this.$refs.modal_DeletePost.show();\r\n            },\r\n            deletePost(post) {\r\n                DataSource.shared.softDeletePost(post.PostID).then((result) => {\r\n                });\r\n                this.$emit(\"loadPosts\");\r\n            },\r\n            editPost(post) {\r\n                DataSource.shared.getPostAllTaggingStudentsByPostID(post.PostID)\r\n                    .then((result) => {\r\n                        this.post.arrobj_SelectedStudents = result.Table;\r\n\r\n                        switch (this.post.PostType.toUpperCase()) {\r\n                            case \"PORTFOLIO\":\r\n                                this.obj_SelectedComponent = portfolio;\r\n                                break;\r\n                            case \"UPDATE\":\r\n                                this.obj_SelectedComponent = updates;\r\n                                break;\r\n                        }\r\n\r\n                        this.showEditModal();\r\n                    });\r\n\r\n            },\r\n            showEditModal() {\r\n                this.$refs.modal_EditComponent.show();\r\n            },\r\n            hideEditModal() {\r\n                this.obj_SelectedComponent = false;\r\n                this.$refs.modal_EditComponent.hide();\r\n            },\r\n            displayResult(value) {\r\n                if (value == \"TRUE\")\r\n                    this.result = \"Successfully posted\";\r\n                else\r\n                    this.result = \"Something went wrong. Please inform the adminstrator\";\r\n\r\n                this.hideEditModal();\r\n            },\r\n            // checkIfImage(file) {\r\n            //     return isImage(file);\r\n            // },\r\n            // async commentEdit(PoCmID, PoCmContent) {\r\n            //     this.error = \"\";\r\n            //     //this.results = \"<< Requesting.. >>\";\r\n            //     try {\r\n            //\r\n            //         this.commentPostID = PoCmID;\r\n            //         this.commentPostContent = PoCmContent;\r\n            //         this.actionMode = \"Edit\";\r\n            //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\r\n            //         if (commentResponse) {\r\n            //             switch (commentResponse.code) {\r\n            //                 case \"1\":\r\n            //                     // reset all input filed to blank\r\n            //                     this.commentPostID = null;\r\n            //                     this.commentPostContent = \"\";\r\n            //                     this.readonly = true;\r\n            //                     // this.results = `Post Submitted`;\r\n            //                     // this.success = 'Post Submitted, activity will be active in a while';\r\n            //                     break;\r\n            //                 case \"88\":\r\n            //                     this.results = `Please Login to submit post`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 case \"99\":\r\n            //                     this.results = `Please fill in content`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 // default:\r\n            //                 //     alert(\"Please try again later\");\r\n            //                 //     this.results = JSON.stringify(response);\r\n            //             }\r\n            //         }\r\n            //     } catch (e) {\r\n            //         console.log(e);\r\n            //         this.error = e;\r\n            //     }\r\n            // },\r\n            // async commentEdit(PoCmID, PoCmContent) {\r\n            //     this.error = \"\";\r\n            //     //this.results = \"<< Requesting.. >>\";\r\n            //     try {\r\n            //\r\n            //         this.commentPostID = PoCmID;\r\n            //         this.commentPostContent = PoCmContent;\r\n            //         this.actionMode = \"Edit\";\r\n            //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\r\n            //         if (commentResponse) {\r\n            //             switch (commentResponse.code) {\r\n            //                 case \"1\":\r\n            //                     // reset all input filed to blank\r\n            //                     this.commentPostID = null;\r\n            //                     this.commentPostContent = \"\";\r\n            //                     this.readonly = true;\r\n            //                     // this.results = `Post Submitted`;\r\n            //                     // this.success = 'Post Submitted, activity will be active in a while';\r\n            //                     break;\r\n            //                 case \"88\":\r\n            //                     this.results = `Please Login to submit post`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 case \"99\":\r\n            //                     this.results = `Please fill in content`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 // default:\r\n            //                 //     alert(\"Please try again later\");\r\n            //                 //     this.results = JSON.stringify(response);\r\n            //             }\r\n            //         }\r\n            //     } catch (e) {\r\n            //         console.log(e);\r\n            //         this.error = e;\r\n            //     }\r\n            // },\r\n        },\r\n    };\r\n</script>\r\n<style scoped>\r\n\r\n\r\n    /*.reaction-table td:hover {*/\r\n    /*background-color: #f5f5f5;*/\r\n    /*}*/\r\n\r\n\r\n    .visible {\r\n        visibility: visible;\r\n        opacity: 1;\r\n    }\r\n\r\n    .hidden {\r\n        visibility: hidden;\r\n        opacity: 0;\r\n    }\r\n</style>\r\n<style>\r\n    #modal_EditComponent .modal-lg {\r\n        /*max-width: 95% !important;*/\r\n    }\r\n</style>"],"sourceRoot":"src/components"}]}