{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\BroadcastListCompnent.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\components\\BroadcastListCompnent.vue","mtime":1555608771451},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":1553612671158},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558432313812},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1553612666995}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _getIterator from \"C:\\\\Users\\\\jessi\\\\Documents\\\\git\\\\vue-test\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport _Promise from \"C:\\\\Users\\\\jessi\\\\Documents\\\\git\\\\vue-test\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport isImage from \"is-image\";\nimport DataSource from \"../data/datasource\";\nimport AlertComponent from \"./alertComponent\";\nimport portfolio from \"../components/Post_Portfolio_Component\";\nimport updates from \"../components/Post_Updates_Component.vue\";\nexport default {\n  name: 'postComponent',\n  components: {\n    AlertComponent: AlertComponent,\n    updates: updates,\n    portfolio: portfolio\n  },\n  data: function data() {\n    return {\n      commentPostContent: \"\",\n      readonly: \"\",\n      checkidcomment: null,\n      systemmsgError: null,\n      commentPostID: '',\n      deleteModalShow: false,\n      showEdit: true,\n      deleteCmId: null,\n      deleteCmContent: null,\n      deleteCmPostId: null,\n      deletePostModalShow: false,\n      obj_SelectedComponent: false,\n      obj_Post: null,\n      result: \"\",\n      post: []\n    };\n  },\n  mounted: function mounted() {\n    this.initPost();\n  },\n  props: [\"parentPost\", \"checkIfImage\", \"commentitemSubmit\", \"hideComment\", \"isHome\", \"hideSubmenu\"],\n  methods: {\n    /*#region Download Item Functions*/\n    downloadItem: function downloadItem() {\n      var _this = this;\n\n      var arr_Promises = [];\n      this.showLoading();\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var obj_SelectedItem = _step.value;\n          var downloadPromise = new _Promise(function (resolve, reject) {\n            DataSource.shared.downloadFile(obj_SelectedItem.GalID).then(function (result) {\n              var file = result.Table[0];\n              var a = document.createElement(\"a\");\n\n              var contentType = _this.getContentType(file);\n\n              var b64Data = file.GalFile;\n\n              var blob = _this.b64toBlob(b64Data, contentType);\n\n              a.href = URL.createObjectURL(blob);\n              a.download = (file.GalFileName + file.GalFileExt).toString();\n              a.style.display = \"none\";\n              document.body.appendChild(a);\n              a.click();\n              a.remove();\n              resolve(result);\n            });\n          });\n          arr_Promises.push(downloadPromise);\n        };\n\n        for (var _iterator = _getIterator(this.arrobj_SelectedItem), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _Promise.all(arr_Promises).then(function (result) {\n        _this.hideLoading();\n      });\n    },\n    getContentType: function getContentType(e) {\n      var contentType = \"\";\n\n      switch (e.GalFileExt.toUpperCase()) {\n        case \".PDF\":\n          contentType += \"application/octet-stream\";\n          break;\n\n        default:\n          contentType += e.GalFileType;\n          break;\n      }\n\n      return contentType;\n    },\n    b64toBlob: function b64toBlob(b64Data, contentType, sliceSize) {\n      //Credit to Jeremy Banks @ stackoverflow\n      contentType = contentType || '';\n      sliceSize = sliceSize || 512;\n      var byteCharacters = atob(b64Data);\n      var byteArrays = [];\n\n      for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        var slice = byteCharacters.slice(offset, offset + sliceSize);\n        var byteNumbers = new Array(slice.length);\n\n        for (var i = 0; i < slice.length; i++) {\n          byteNumbers[i] = slice.charCodeAt(i);\n        }\n\n        var byteArray = new Uint8Array(byteNumbers);\n        byteArrays.push(byteArray);\n      }\n\n      return new Blob(byteArrays, {\n        type: contentType\n      });\n    },\n\n    /*#endregion*/\n    initPost: function initPost() {\n      /*let tempobj = this.parentPost;\n      let promise_GetPostFile = DataSource.shared.getPostFile(tempobj.PostID);\n      let promise_GetComment = DataSource.shared.getComment(tempobj.PostID);\n       Promise.all([promise_GetPostFile, promise_GetComment]).then((result) => {\n          tempobj.postFiles = result[0].Table;\n          tempobj.commentPostID = tempobj.PostID;\n          tempobj.commentItems = result[1].Table;\n          tempobj.collapsed = true;\n      })\n           .then(()=>{\n              this.post=tempobj;\n          });*/\n    },\n    isNull: function isNull(obj) {\n      return obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\";\n    },\n    isImage: function isImage(obj_File) {\n      var ext = String(obj_File.PostItemFileExt).toUpperCase();\n      var isImage = false;\n\n      switch (ext) {\n        case \".PNG\":\n        case \".JPG\":\n        case \".BMP\":\n        case \".GIF\":\n          isImage = true;\n          break;\n\n        default:\n          isImage = false;\n          break;\n      }\n\n      return isImage;\n    },\n    getLowSource: function getLowSource(file) {\n      if (this.isImage(file)) return \"data:\" + file.PostItemFileType + \";base64,\" + file.PostItemFileLow;else return \"\";\n    },\n    submitComment: function submitComment(postId) {\n      this.$emit('commentitemSubmit', postId, this.commentPostContent);\n      this.commentPostContent = \"\";\n    },\n    saveClick: function saveClick(PoCmID, PoCmContent) {\n      this.readonly = true;\n      this.showEdit = true;\n      this.checkidcomment = null;\n      this.$emit(\"commentEdit\", PoCmID, PoCmContent);\n    },\n    showDeleteModal: function showDeleteModal(deleteCmId, deleteCmContent, deleteCmPostId) {\n      this.deleteModalShow = true;\n      this.deleteCmId = deleteCmId;\n      this.deleteCmContent = deleteCmContent;\n      this.deleteCmPostId = deleteCmPostId;\n    },\n    closeDeleteModal: function closeDeleteModal() {\n      this.deleteModalShow = false;\n    },\n    editClick: function editClick(PoCmID) {\n      this.showEdit = false;\n      this.readonly = false;\n      this.checkidcomment = PoCmID;\n    },\n    deleteComment: function deleteComment() {\n      this.$emit(\"commentDelete\", this.deleteCmId, this.deleteCmContent, this.deleteCmPostId);\n      this.closeDeleteModal();\n    },\n    removePost: function removePost() {\n      this.$refs.modal_DeletePost.show();\n    },\n    deletePost: function deletePost(post) {\n      DataSource.shared.softDeletePost(post.PostID).then(function (result) {});\n    },\n    editPost: function editPost(post) {\n      var _this2 = this;\n\n      DataSource.shared.getPostAllTaggingStudentsByPostID(post.PostID).then(function (result) {\n        _this2.post.arrobj_SelectedStudents = result.Table;\n        _this2.obj_Post = _this2.post;\n\n        switch (_this2.obj_Post.PostType.toUpperCase()) {\n          case \"PORTFOLIO\":\n            _this2.obj_SelectedComponent = portfolio;\n            break;\n\n          case \"UPDATE\":\n            _this2.obj_SelectedComponent = updates;\n            break;\n        }\n\n        _this2.showEditModal();\n      });\n    },\n    showEditModal: function showEditModal() {\n      this.$refs.modal_EditComponent.show();\n    },\n    hideEditModal: function hideEditModal() {\n      this.obj_SelectedComponent = false;\n      this.$refs.modal_EditComponent.hide();\n    },\n    displayResult: function displayResult(value) {\n      if (value == \"TRUE\") this.result = \"Successfully posted\";else this.result = \"Something went wrong. Please inform the adminstrator\";\n      this.hideEditModal();\n    }\n  }\n};",{"version":3,"sources":["BroadcastListCompnent.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div class=\"aaaa\">\r\n        <div class=\"container-fluid row\" v-if=\"result\">\r\n            {{result}}\r\n        </div>\r\n        <div class=\" broadcast-box\" v-bind:class=\"[post.PostID]\" v-if=\"!isHome\">\r\n            <el-row>\r\n                <el-col :span=\"7\" v-for=\"(o, index) in 3\" :key=\"o\" :offset=\"index > 0 ? 0 : 0\">\r\n                    <el-card :body-style=\"{ padding: '0px' }\" shadow=\"hover\">\r\n                        <div style=\"padding: 14px;\">\r\n                            <strong>{{post.CONname}}</strong><br/>\r\n                            <span>{{post.PostContent}}</span>\r\n                            <div class=\"bottom clearfix\">\r\n                                <small type=\"text\" class=\"button\">{{post.PostCreatedDate}}</small>\r\n                            </div>\r\n                        </div>\r\n                    </el-card>\r\n                </el-col>\r\n            </el-row>\r\n            <!--<div class=\"image-wrapper\" v-if=\"!isNull(post.postFiles)\">-->\r\n                <!--<b-carousel id=\"carousel1\"-->\r\n                            <!--style=\"text-shadow: 1px 1px 2px #333;\"-->\r\n                            <!--:controls=\"post.postFiles.length > 0\"-->\r\n                            <!--indicators-->\r\n                            <!--background=\"#ababab\"-->\r\n                            <!--:interval=\"0\"-->\r\n                <!--&gt;-->\r\n                    <!--<div>-->\r\n                        <!--<b-carousel-slide v-for=\"obj_Images of post.postFiles\" :key=\"obj_Images.id\">-->\r\n                            <!--<img slot=\"img\" class=\"card-img-top d-block img-fluid w-100\"-->\r\n                                 <!--:src=\"getLowSource(obj_Images)\"-->\r\n                                 <!--:alt=\"post.PostPorDtlTitle\"/>-->\r\n                        <!--</b-carousel-slide>-->\r\n                    <!--</div>-->\r\n                <!--</b-carousel>-->\r\n            <!--</div>-->\r\n            <!--<div class=\"postFile\" v-if=\"!isNull(post.postFiles)\">-->\r\n                <!--<div class=\"postFile__item\" v-for=\"postFile in post.postFiles\" :key=\"postFile.ID\">-->\r\n                    <!--&lt;!&ndash;<img :src=\"postFile.PostItemPath\" :class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\"/>&ndash;&gt;-->\r\n\r\n                    <!--<a v-if=\"!postFile.PostItemFileLow && !checkIfImage(postFile.PostItemPath)\"-->\r\n                       <!--v-bind:href=\"[postFile.PostItemPath]\"-->\r\n                       <!--:class=\"{'post-disabled':postFile.PostItemStatus !=='Active'}\">-->\r\n                        <!--<i class=\"fa fa-file\" aria-hidden=\"true\"></i>-->\r\n                        <!--{{postFile.PostItemPostID}}-->\r\n                    <!--</a>-->\r\n                    <!--&lt;!&ndash;{{postFile.PostItemCreatedDate}}&ndash;&gt;-->\r\n                <!--</div>-->\r\n            <!--</div>-->\r\n        </div>\r\n\r\n        <!--<div class=\"comment_wrapper\" v-if=\"!hideComment\">-->\r\n            <!--<form class=\"form-style\">-->\r\n                <!--<input type=\"text\" class=\"form-control d-none\" id=\"commentPostID\" v-model=\"commentPostID\">-->\r\n                <!--<vs-input label-placeholder=\"Write a comment\" v-model=\"commentPostContent\"-->\r\n                          <!--class=\"addComment\"/>-->\r\n                <!--<div class=\"btn btn-primary\" @click=\"submitComment(post.commentPostID)\"><i-->\r\n                        <!--class=\"fa fa-paper-plane\"-->\r\n                        <!--aria-hidden=\"true\"></i></div>-->\r\n            <!--</form>-->\r\n\r\n            <!--<div class=\"commentWrap\" v-if=\"post.commentItems\"-->\r\n                 <!--:class=\"{'is-collapsed' : post.collapsed }\">-->\r\n                <!--<div class=\"comment__item\" v-for=\"commentItem in post.commentItems\"-->\r\n                     <!--:key=\"commentItem.PoCmID\">-->\r\n                    <!--<div class=\"commentItem__header\">-->\r\n                        <!--<div class=\"comment__name\">{{commentItem.CONname}}</div>-->\r\n                        <!--<div class=\"comment__date\">{{commentItem.PoCmCreatedDate}}</div>-->\r\n                    <!--</div>-->\r\n                    <!--<div class=\"commentPostContent_show\" v-if=\"checkidcomment !== commentItem.PoCmID\">-->\r\n                        <!--{{commentItem.PoCmContent}}-->\r\n                    <!--</div>-->\r\n                    <!--<textarea v-if=\"readonly === false && checkidcomment === commentItem.PoCmID\" type=\"text\"-->\r\n                              <!--class=\"comment__content\" id=\"commentPostContent\"-->\r\n                              <!--v-model=\"commentItem.PoCmContent\" v-bind:readonly=\"readonly\"-->\r\n                              <!--:class=\"{'editable' : readonly === false && checkidcomment === commentItem.PoCmID }\"></textarea>-->\r\n                    <!--&lt;!&ndash;{{checkidcomment}} ==== {{commentItem.PoCmID}} === {{readonly}}<br/>&ndash;&gt;-->\r\n\r\n                    <!--<span class=\"edit\" @click=\"editClick(commentItem.PoCmID)\" v-if=\"showEdit\">-->\r\n                        <!--Edit .-->\r\n                    <!--</span>-->\r\n\r\n                    <!--<span class=\"save\" @click=\"saveClick(commentItem.PoCmID, commentItem.PoCmContent)\"-->\r\n                          <!--:class=\"{'d-none' : readonly === true || checkidcomment !== commentItem.PoCmID}\">Save . </span>-->\r\n                    <!--&lt;!&ndash;<span class=\"delete\"&ndash;&gt;-->\r\n                    <!--&lt;!&ndash;@click=\"deleteComment(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">Delete</span>&ndash;&gt;-->\r\n                    <!--<span class=\"delete\"-->\r\n                          <!--@click=\"showDeleteModal(commentItem.PoCmID, commentItem.PoCmContent, post.PostID)\">-->\r\n                        <!--Delete-->\r\n                    <!--</span>-->\r\n                    <!--<AlertComponent :showModal=\"deleteModalShow\" @cancelClick=\"closeDeleteModal\"-->\r\n                                    <!--@okClick=\"deleteComment\"/>-->\r\n                <!--</div>-->\r\n                <!--<button v-on:click=\" post.collapsed = !post.collapsed \"-->\r\n                        <!--:class=\"{'d-none' : !post.collapsed }\" v-if=\"post.commentItems.length !== 2\">Display more-->\r\n                    <!--comments-->\r\n                <!--</button>-->\r\n            <!--</div>-->\r\n        <!--</div>-->\r\n        <b-modal class=\"alert-modal\" title=\"ARE YOU SURE?\" ref=\"modal_DeletePost\" @ok=\"deletePost(post)\">\r\n            Once you delete a post, you can't undo it.\r\n        </b-modal>\r\n        <b-modal id=\"modal_EditComponent\" ref=\"modal_EditComponent\" size=\"lg\" hide-footer title=\"Edit Post\"\r\n                 @hidden=\"hideEditModal\">\r\n            <component @result=\"displayResult\" :is=\"obj_SelectedComponent\" :post=\"obj_Post\"></component>\r\n        </b-modal>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import isImage from \"is-image\";\r\n    import DataSource from \"../data/datasource\";\r\n    import AlertComponent from \"./alertComponent\";\r\n    import portfolio from \"../components/Post_Portfolio_Component\";\r\n    import updates from \"../components/Post_Updates_Component.vue\";\r\n\r\n    export default {\r\n        name: 'postComponent',\r\n        components: {AlertComponent, updates, portfolio},\r\n        data() {\r\n            return {\r\n                commentPostContent: \"\",\r\n                readonly: \"\",\r\n                checkidcomment: null,\r\n                systemmsgError: null,\r\n                commentPostID: '',\r\n                deleteModalShow: false,\r\n                showEdit: true,\r\n                deleteCmId: null,\r\n                deleteCmContent: null,\r\n                deleteCmPostId: null,\r\n                deletePostModalShow: false,\r\n\r\n                obj_SelectedComponent: false,\r\n                obj_Post: null,\r\n                result: \"\",\r\n                post: [],\r\n            };\r\n        },\r\n        mounted() {\r\n            this.initPost();\r\n        },\r\n        props: [\"parentPost\", \"checkIfImage\", \"commentitemSubmit\", \"hideComment\", \"isHome\", \"hideSubmenu\"],\r\n        methods: {\r\n            /*#region Download Item Functions*/\r\n            downloadItem() {\r\n                let arr_Promises = [];\r\n                this.showLoading();\r\n\r\n                for (let obj_SelectedItem of this.arrobj_SelectedItem) {\r\n                    let downloadPromise = new Promise((resolve, reject) => {\r\n                        DataSource.shared.downloadFile(obj_SelectedItem.GalID).then((result) => {\r\n                            let file = (result.Table)[0];\r\n                            let a = document.createElement(\"a\");\r\n                            let contentType = this.getContentType(file);\r\n                            let b64Data = file.GalFile;\r\n                            let blob = this.b64toBlob(b64Data, contentType);\r\n\r\n                            a.href = URL.createObjectURL(blob);\r\n                            a.download = (file.GalFileName + file.GalFileExt).toString();\r\n                            a.style.display = \"none\";\r\n                            document.body.appendChild(a);\r\n                            a.click();\r\n                            a.remove();\r\n                            resolve(result);\r\n                        });\r\n                    });\r\n\r\n                    arr_Promises.push(downloadPromise);\r\n                }\r\n\r\n                Promise.all(arr_Promises).then((result) => {\r\n                    this.hideLoading();\r\n                });\r\n            }\r\n            ,\r\n            getContentType(e) {\r\n                let contentType = \"\";\r\n\r\n                switch (e.GalFileExt.toUpperCase()) {\r\n                    case \".PDF\":\r\n                        contentType += \"application/octet-stream\";\r\n                        break;\r\n                    default:\r\n                        contentType += e.GalFileType;\r\n                        break;\r\n                }\r\n\r\n                return contentType;\r\n            }\r\n            ,\r\n            b64toBlob(b64Data, contentType, sliceSize) {\r\n                //Credit to Jeremy Banks @ stackoverflow\r\n                contentType = contentType || '';\r\n                sliceSize = sliceSize || 512;\r\n\r\n                let byteCharacters = atob(b64Data);\r\n                let byteArrays = [];\r\n\r\n                for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n                    let slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n                    let byteNumbers = new Array(slice.length);\r\n                    for (let i = 0; i < slice.length; i++) {\r\n                        byteNumbers[i] = slice.charCodeAt(i);\r\n                    }\r\n\r\n                    let byteArray = new Uint8Array(byteNumbers);\r\n\r\n                    byteArrays.push(byteArray);\r\n                }\r\n\r\n                return new Blob(byteArrays, {type: contentType});\r\n            }\r\n            ,\r\n            /*#endregion*/\r\n            initPost(){\r\n                /*let tempobj = this.parentPost;\r\n                let promise_GetPostFile = DataSource.shared.getPostFile(tempobj.PostID);\r\n                let promise_GetComment = DataSource.shared.getComment(tempobj.PostID);\r\n\r\n                Promise.all([promise_GetPostFile, promise_GetComment]).then((result) => {\r\n                    tempobj.postFiles = result[0].Table;\r\n                    tempobj.commentPostID = tempobj.PostID;\r\n                    tempobj.commentItems = result[1].Table;\r\n                    tempobj.collapsed = true;\r\n                })\r\n\r\n                    .then(()=>{\r\n                        this.post=tempobj;\r\n                    });*/\r\n            },\r\n            isNull(obj) {\r\n                return (obj === null || obj === undefined || obj === \"undefined\" || obj.length === 0 || obj === \"\");\r\n            },\r\n            isImage(obj_File) {\r\n                let ext = String(obj_File.PostItemFileExt).toUpperCase();\r\n                let isImage = false;\r\n\r\n                switch (ext) {\r\n                    case \".PNG\":\r\n                    case \".JPG\":\r\n                    case \".BMP\":\r\n                    case \".GIF\":\r\n                        isImage = true;\r\n                        break;\r\n                    default:\r\n                        isImage = false;\r\n                        break;\r\n                }\r\n\r\n                return isImage;\r\n            },\r\n            getLowSource(file) {\r\n                if (this.isImage(file))\r\n                    return \"data:\" + file.PostItemFileType + \";base64,\" + file.PostItemFileLow;\r\n                else\r\n                    return \"\";\r\n            },\r\n            submitComment(postId) {\r\n                this.$emit('commentitemSubmit', postId, this.commentPostContent);\r\n                this.commentPostContent = \"\";\r\n            },\r\n            saveClick(PoCmID, PoCmContent) {\r\n                this.readonly = true;\r\n                this.showEdit = true;\r\n                this.checkidcomment = null;\r\n                this.$emit(\"commentEdit\", PoCmID, PoCmContent);\r\n            },\r\n            showDeleteModal(deleteCmId, deleteCmContent, deleteCmPostId) {\r\n                this.deleteModalShow = true;\r\n                this.deleteCmId = deleteCmId;\r\n                this.deleteCmContent = deleteCmContent;\r\n                this.deleteCmPostId = deleteCmPostId;\r\n            },\r\n            closeDeleteModal() {\r\n                this.deleteModalShow = false;\r\n            },\r\n            editClick(PoCmID) {\r\n                this.showEdit = false;\r\n                this.readonly = false;\r\n                this.checkidcomment = PoCmID;\r\n            },\r\n            deleteComment() {\r\n                this.$emit(\"commentDelete\", this.deleteCmId, this.deleteCmContent, this.deleteCmPostId);\r\n                this.closeDeleteModal();\r\n            },\r\n            removePost() {\r\n                this.$refs.modal_DeletePost.show();\r\n            },\r\n            deletePost(post) {\r\n                DataSource.shared.softDeletePost(post.PostID).then((result) => {\r\n                });\r\n            },\r\n            editPost(post) {\r\n                DataSource.shared.getPostAllTaggingStudentsByPostID(post.PostID)\r\n                    .then((result) => {\r\n                        this.post.arrobj_SelectedStudents = result.Table;\r\n                        this.obj_Post = this.post;\r\n\r\n                        switch (this.obj_Post.PostType.toUpperCase()) {\r\n                            case \"PORTFOLIO\":\r\n                                this.obj_SelectedComponent = portfolio;\r\n                                break;\r\n                            case \"UPDATE\":\r\n                                this.obj_SelectedComponent = updates;\r\n                                break;\r\n                        }\r\n\r\n                        this.showEditModal()\r\n                    });\r\n\r\n            },\r\n            showEditModal() {\r\n                this.$refs.modal_EditComponent.show();\r\n            },\r\n            hideEditModal() {\r\n                this.obj_SelectedComponent = false;\r\n                this.$refs.modal_EditComponent.hide();\r\n            },\r\n            displayResult(value) {\r\n                if (value == \"TRUE\")\r\n                    this.result = \"Successfully posted\";\r\n                else\r\n                    this.result = \"Something went wrong. Please inform the adminstrator\";\r\n\r\n                this.hideEditModal();\r\n            },\r\n            // checkIfImage(file) {\r\n            //     return isImage(file);\r\n            // },\r\n            // async commentEdit(PoCmID, PoCmContent) {\r\n            //     this.error = \"\";\r\n            //     //this.results = \"<< Requesting.. >>\";\r\n            //     try {\r\n            //\r\n            //         this.commentPostID = PoCmID;\r\n            //         this.commentPostContent = PoCmContent;\r\n            //         this.actionMode = \"Edit\";\r\n            //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\r\n            //         if (commentResponse) {\r\n            //             switch (commentResponse.code) {\r\n            //                 case \"1\":\r\n            //                     // reset all input filed to blank\r\n            //                     this.commentPostID = null;\r\n            //                     this.commentPostContent = \"\";\r\n            //                     this.readonly = true;\r\n            //                     // this.results = `Post Submitted`;\r\n            //                     // this.success = 'Post Submitted, activity will be active in a while';\r\n            //                     break;\r\n            //                 case \"88\":\r\n            //                     this.results = `Please Login to submit post`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 case \"99\":\r\n            //                     this.results = `Please fill in content`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 // default:\r\n            //                 //     alert(\"Please try again later\");\r\n            //                 //     this.results = JSON.stringify(response);\r\n            //             }\r\n            //         }\r\n            //     } catch (e) {\r\n            //         console.log(e);\r\n            //         this.error = e;\r\n            //     }\r\n            // },\r\n            // async commentEdit(PoCmID, PoCmContent) {\r\n            //     this.error = \"\";\r\n            //     //this.results = \"<< Requesting.. >>\";\r\n            //     try {\r\n            //\r\n            //         this.commentPostID = PoCmID;\r\n            //         this.commentPostContent = PoCmContent;\r\n            //         this.actionMode = \"Edit\";\r\n            //         const commentResponse = await DataSource.shared.saveClick(this.commentPostID, this.commentPostContent, this.actionMode);\r\n            //         if (commentResponse) {\r\n            //             switch (commentResponse.code) {\r\n            //                 case \"1\":\r\n            //                     // reset all input filed to blank\r\n            //                     this.commentPostID = null;\r\n            //                     this.commentPostContent = \"\";\r\n            //                     this.readonly = true;\r\n            //                     // this.results = `Post Submitted`;\r\n            //                     // this.success = 'Post Submitted, activity will be active in a while';\r\n            //                     break;\r\n            //                 case \"88\":\r\n            //                     this.results = `Please Login to submit post`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 case \"99\":\r\n            //                     this.results = `Please fill in content`;\r\n            //                     this.systemmsgError = true;\r\n            //                     break;\r\n            //                 // default:\r\n            //                 //     alert(\"Please try again later\");\r\n            //                 //     this.results = JSON.stringify(response);\r\n            //             }\r\n            //         }\r\n            //     } catch (e) {\r\n            //         console.log(e);\r\n            //         this.error = e;\r\n            //     }\r\n            // },\r\n        },\r\n    };\r\n</script>\r\n<style scoped>\r\n</style>\r\n<style>\r\n    #modal_EditComponent .modal-lg {\r\n        /*max-width: 95% !important;*/\r\n    }\r\n</style>"],"sourceRoot":"src/components"}]}